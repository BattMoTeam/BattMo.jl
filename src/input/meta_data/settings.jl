export get_setting_meta_data


function get_setting_meta_data()
	meta_data = Dict(
		"ModelFramework" => Dict(
			"type" => String,
			"options" => ["P2D", "P4D Pouch", "P4D Cylindrical"],
			"context_type" => "ModelFramework",
			"context_type_iri" => "https://w3id.org/emmo/domain/battery#battery_b1921f7b_afac_465a_a275_26f929f7f936",
			"category" => "ModelSettings",
			"documentation" => "https://battmoteam.github.io/BattMo.jl/dev/manuals/user_guide/pxd_model",
			"description" => """Framework defining the dimensionality of the electrochemical model. Examples: "P2D", "P4D Pouch". """,
		),
		"SEIModel" => Dict(
			"type" => String,
			"options" => ["Bolay"],
			"category" => "ModelSettings",
			"context_type_iri" => nothing,
			"description" => """Which SEI model is used. For instance: "Bolay" """,
			"documentation" => "https://battmoteam.github.io/BattMo.jl/dev/manuals/user_guide/sei_model",
		),
		"PotentialFlowDiscretization" => Dict(
			"type" => String,
			"options" => ["GeneralAD", "TwoPointDiscretization"],
			"category" => "ModelSettings",
			"context_type_iri" => nothing,
			"description" => """Specifies the numerical backend used for solving the potential flow equations. 
								The GenericAD option uses a general automatic differentiation approach that is robust and widely applicable, 
								while the TwoPointDiscretization option applies a specialized two-point flux discretization of the conservation laws, 
									which can be faster but is less general. We recommend using GenericAD unless performance considerations dictate otherwise.""",
			"documentation" => "",
		),
		"ButlerVolmer" => Dict(
			"type" => String,
			"options" => ["Standard", "Chayambuka"],
			"context_type" => "ButlerVolmerEquation",
			"context_type_iri" => "https://w3id.org/emmo/domain/battery#battery_b1921f7b_afac_465a_a275_26f929f7f936",
			"category" => "ModelSettings",
			"documentation" => "https://battmoteam.github.io/BattMo.jl/dev/manuals/user_guide/pxd_model",
			"description" => """When set to Chayambuka, the slightly adapted butler volmer equation from reference [Chayambuka2020](https://www.sciencedirect.com/science/article/pii/S0013468621020478?via%3Dihub) will be selected within the model.""",
		),
		"TemperatureDependence" => Dict(
			"type" => String,
			"options" => ["Arrhenius"],
			"category" => "ModelSettings",
			"documentation" => "",
			"description" => """Temperature dependence model for electrode diffusion coefficients and reaction rates. Example: "Arrhenius".""",
		),
		"TransportInSolid" => Dict(
			"type" => String,
			"options" => ["FullDiffusion"],
			"category" => "ModelSettings",
			"context_type_iri" => nothing,
			"description" => """Which model is used to describe the intercalant diffusion in the solid particles. Example "FullDiffusion". """,
		),
		"CurrentCollectors" => Dict(
			"type" => String,
			"options" => ["Standard"],
			"context_type" => "CurrentCollectors",
			"context_type_iri" => nothing,
			"category" => "ModelSettings",
			"description" => "Which model describes the current collectors.",
		),
		"GridResolutionHeight" => Dict(
			"type" => Int,
			"min_value" => 1,
			"max_value" => 100,
			"category" => "SimulationSettings",
			"context_type" => "Cell",
			"context_type_iri" => nothing,
			"description" => "Number of grid points along the height of the cell (used in P4D cylindrical)",
		),
		"GridResolutionAngular" => Dict(
			"type" => Int,
			"min_value" => 1,
			"max_value" => 100,
			"category" => "SimulationSettings",
			"context_type" => "Cell",
			"context_type_iri" => nothing,
			"description" => "Number of discretisation angles for a cylindrical cell (used in P4D cylindrical)",
		),
		"GridResolutionElectrodeWidth" => Dict(
			"type" => Int,
			"min_value" => 1,
			"max_value" => 1000,
			"category" => "SimulationSettings",
			"context_type" => "GridResolutionPositiveElectrode",
			"context_type_iri" => nothing,
			"description" => "Number of grid points along the width dimension of the electrode.",
		),
		"GridResolutionElectrodeLength" => Dict(
			"type" => Int,
			"min_value" => 1,
			"max_value" => 1000,
			"category" => "SimulationSettings",
			"context_type_iri" => nothing,
			"description" => "Number of grid points along the length dimension of the electrode.",
		),
		"GridResolutionPositiveElectrodeCoating" => Dict(
			"type" => Int,
			"min_value" => 1,
			"max_value" => 1000,
			"category" => "SimulationSettings",
			"context_type_iri" => nothing,
			"description" => "Number of grid points along the thickness dimension of the positive electrode.",
		),
		"GridResolutionPositiveElectrodeParticle" => Dict(
			"type" => Int,
			"min_value" => 1,
			"max_value" => 1000,
			"category" => "SimulationSettings",
			"context_type_iri" => nothing,
			"description" => "Number of grid points along the radial pseudo dimension of the positive electrode active material particles.",
		),
		"GridResolutionNegativeElectrodeCoating" => Dict(
			"type" => Int,
			"min_value" => 1,
			"max_value" => 1000,
			"category" => "SimulationSettings",
			"context_type_iri" => nothing,
			"description" => "Number of grid points along the thickness dimension of the negative electrode.",
		),
		"GridResolutionPositiveElectrodeCurrentCollector" => Dict(
			"type" => Int,
			"min_value" => 1,
			"max_value" => 1000,
			"category" => "SimulationSettings",
			"context_type_iri" => nothing,
			"description" => "Number of grid points along the thickness dimension of the positive electrode current collector.",
		),
		"GridResolutionPositiveElectrodeCurrentCollectorTabWidth" => Dict(
			"type" => Int,
			"min_value" => 1,
			"max_value" => 1000,
			"category" => "SimulationSettings",
			"context_type_iri" => nothing,
			"description" => "In the current collector tab at the positive electrode, the number of grid points along the width dimension of the tab's face.",
		),
		"GridResolutionPositiveElectrodeCurrentCollectorTabLength" => Dict(
			"type" => Int,
			"min_value" => 1,
			"max_value" => 1000,
			"category" => "SimulationSettings",
			"context_type_iri" => "https://w3id.org/emmo/domain/electrochemistry#electrochemistry_47608fd0_cc0d_457e_9141_051935029e3a",
			"description" => "In the current collector tab at the positive electrode, the number of grid points along the length dimension of the tab's face.",
		),
		"GridResolutionNegativeElectrodeCurrentCollector" => Dict(
			"type" => Int,
			"min_value" => 1,
			"max_value" => 1000,
			"category" => "SimulationSettings",
			"context_type_iri" => "https://w3id.org/emmo/domain/electrochemistry#electrochemistry_47608fd0_cc0d_457e_9141_051935029e3a",
			"description" => "Number of grid points along the thickness dimension of the negative electrode current collector.",
		),
		"GridResolutionNegativeElectrodeCurrentCollectorTabWidth" => Dict(
			"type" => Int,
			"min_value" => 1,
			"max_value" => 1000,
			"category" => "SimulationSettings",
			"context_type_iri" => "https://w3id.org/emmo/domain/electrochemistry#electrochemistry_47608fd0_cc0d_457e_9141_051935029e3a",
			"description" => "In the current collector tab at the negative electrode, the number of grid points along the width dimension of the tab's face.",
		),
		"GridResolutionNegativeElectrodeCurrentCollectorTabLength" => Dict(
			"type" => Int,
			"min_value" => 1,
			"max_value" => 1000,
			"category" => "SimulationSettings",
			"context_type_iri" => "https://w3id.org/emmo/domain/electrochemistry#electrochemistry_47608fd0_cc0d_457e_9141_051935029e3a",
			"description" => "In the current collector tab at the negative electrode, the number of grid points along the length dimension of the tab's face.",
		),
		"GridResolutionNegativeElectrodeParticle" => Dict(
			"type" => Int,
			"min_value" => 1,
			"max_value" => 1000,
			"category" => "SimulationSettings",
			"context_type_iri" => "https://w3id.org/emmo/domain/electrochemistry#electrochemistry_47608fd0_cc0d_457e_9141_051935029e3a",
			"description" => "Number of grid points along the radial pseudo dimension of the negative electrode active material particles.",
		),
		"GridResolutionSeparator" => Dict(
			"type" => Int,
			"min_value" => 1,
			"max_value" => 1000,
			"category" => "SimulationSettings",
			"context_type_iri" => "https://w3id.org/emmo/domain/electrochemistry#electrochemistry_47608fd0_cc0d_457e_9141_051935029e3a",
			"description" => "Number of grid points along the thickness dimension of the separator.",
		),
		"Grid" => Dict(
			"type" => Vector,
			"category" => "SimulationSettings",
			"context_type" => "Grid",
			"context_type_iri" => nothing,
			"description" => "Vector storing the numerical representation of the computational grid discretizing the spatial representation of the cell.",
		),
		"RampUp" => Dict(
			"type" => String,
			"options" => ["Sinusoidal"],
			"category" => "SimulationSettings",
			"context_type" => "RampUp",
			"context_type_iri" => "https://w3id.org/emmo/domain/electrochemistry#electrochemistry_rampup",
			"documentation" => "https://battmoteam.github.io/BattMo.jl/dev/manuals/user_guide/ramp_up",
			"category" => "ModelSettings",
			"description" => """Type of signal of electric current used to initialize the cell simulation. Example: "Sinusoidal".""",
		),
		"RampUpSteps" => Dict(
			"type" => Int,
			"min_value" => 1,
			"max_value" => 100,
			"category" => "SimulationSettings",
			"context_type" => "RampUpSteps",
			"context_type_iri" => "https://w3id.org/emmo/domain/electrochemistry#electrochemistry_rampup_steps",
			"description" => "Number of ramp-up steps applied to initialize the cell simulation.",
		),
		"RampUpTime" => Dict(
			"type" => Int,
			"min_value" => 0,
			"max_value" => 500,
			"unit" => "s",
			"unit_name" => "emmo:Second",
			"category" => "SimulationSettings",
			"context_type" => "RampUpTime",
			"context_type_iri" => nothing,
			"description" => "Ramp up time duration applied to initialize the cell simulation.",
		),
		"TimeStepDuration" => Dict(
			"max_value" => 500,
			"min_value" => 1,
			"category" => "SimulationSettings",
			"context_type" => "StepDuration",
			"context_type_iri" => "https://w3id.org/emmo/domain/electrochemistry#electrochemistry_85e39686_9658_4c74_bb91_a935704c174a",
			"description" => "Duration of each time step in simulations",
			"type" => Real,
			"unit" => "s",
			"unit_name" => "emmo:Second",
			"unit_iri" => "https://w3id.org/emmo/domain/emmo#Second",
		),
		"MaxTimestepCuts" => Dict(
			"type" => Int,
			"variable_name" => "max_timestep_cuts",
			"min_value" => 0,
			"max_value" => 10000,
			"category" => "SolverSettings",
			"description" => "Maximum time step cuts in a single mini step before termination of simulation.",
		),
		"MaxTimestep" => Dict(
			"type" => Int,
			"variable_name" => "max_timestep",
			"min_value" => 0,
			"max_value" => 1e100,
			"category" => "SolverSettings",
			"description" => "Maximum time step length.",
		),
		"MinTimestep" => Dict(
			"type" => Int,
			"variable_name" => "min_timestep",
			"min_value" => 0,
			"max_value" => 1000,
			"category" => "SolverSettings",
			"description" => "Minimum time step length.",
		),
		"TimestepMaxIncrease" => Dict(
			"type" => Real,
			"variable_name" => "timestep_max_increase",
			"min_value" => 0,
			"max_value" => 100,
			"category" => "SolverSettings",
			"description" => "Max allowable factor to increase time-step by. Overrides step selectors.",
		),
		"TimestepMaxDecrease" => Dict(
			"type" => Real,
			"variable_name" => "timestep_max_decrease",
			"min_value" => 0,
			"max_value" => 100,
			"category" => "SolverSettings",
			"description" => "Max allowable factor to decrease time-step by. Overrides step selectors.",
		),
		"MaxNonLinearIterations" => Dict(
			"type" => Int,
			"variable_name" => "max_nonlinear_iterations",
			"min_value" => 0,
			"max_value" => 10000,
			"category" => "SolverSettings",
			"description" => "Max number of nonlinear iterations in a Newton solve before time-step is cut.",
		),
		"MaxLinearIterations" => Dict(
			"type" => Int,
			"variable_name" => "max_linear_iterations",
			"min_value" => 0,
			"max_value" => 10000,
			"category" => "SolverSettings",
			"description" => "Max number of linear iterations in a Newton solve before time-step is cut.",
		),
		"MinNonLinearIterations" => Dict(
			"type" => Int,
			"variable_name" => "min_nonlinear_iterations",
			"min_value" => 0,
			"max_value" => 100000000,
			"category" => "SolverSettings",
			"description" => "Minimum number of nonlinear iterations in Newton solver. This number of Newtion iterations is always performed, even if all equations are converged.",
		),
		"MaxSize" => Dict(
			"type" => Int,
			"min_value" => 0,
			"max_value" => 10000000,
			"category" => "SolverSettings",
			"description" => "Maximum size for linear solver.",
		),
		"Verbosity" => Dict(
			"type" => Int,
			"min_value" => 0,
			"max_value" => 10000,
			"category" => "SolverSettings",
			"description" => "Verbosity for linear solver.",
		),
		"Method" => Dict(
			"type" => String,
			"options" => ["direct", "iterative"],
			"category" => "SolverSettings",
			"description" => "Linear solver method.",
		),
		"FailureCutsTimesteps" => Dict(
			"type" => Bool,
			"variable_name" => "failure_cuts_timestep",
			"options" => [true, false],
			"category" => "SolverSettings",
			"description" => "Cut the timestep if exceptions occur during step. If set to false, throw errors and terminate.",
		),
		"CheckBeforeSolve" => Dict(
			"type" => Bool,
			"variable_name" => "check_before_solve",
			"options" => [true, false],
			"category" => "SolverSettings",
			"description" => "Check convergence before solving linear system. Can skip some linear solves if not using increment tolerances.",
		),
		"AlwaysUpdateSecondary" => Dict(
			"type" => Bool,
			"variable_name" => "always_update_secondary",
			"options" => [true, false],
			"category" => "SolverSettings",
			"description" => "Always update secondary variables (even when they can be reused from end of previous step). Only useful for nested solvers",
		),
		"ErrorOnIncomplete" => Dict(
			"type" => Bool,
			"variable_name" => "error_on_incomplete",
			"options" => [true, false],
			"category" => "SolverSettings",
			"description" => "Throw an error if the simulation could not complete. If `false` emit a message and return.",
		),
		"CuttingCriterion" => Dict(
			"type" => Nothing,
			"variable_name" => "cutting_criterion",
			"category" => "SolverSettings",
			"description" => "Criterion to use for early cutting of time-steps. Default value of nothing means cutting when max_nonlinear_iterations is reached.",
		),
		"Tolerances" => Dict(
			"type" => Dict,
			"variable_name" => "tolerances",
			"min_value" => 1e-40,
			"max_value" => 1,
			"category" => "SolverSettings",
			"description" => "Tolerances used for convergence criterions.",
		),
		"LinearTolerance" => Dict(
			"type" => Real,
			"variable_name" => "linear_tolerance",
			"min_value" => 1e-40,
			"max_value" => 1,
			"category" => "SolverSettings",
			"description" => "Tolerance used for convergence criterions.",
		),
		"TolFactorFinalIteration" => Dict(
			"type" => Int,
			"variable_name" => "tol_factor_final_iteration",
			"min_value" => 0,
			"max_value" => 10,
			"category" => "SolverSettings",
			"description" => "Value that multiplies all tolerances for the final convergence check before a time-step is cut.",
		),
		"SafeMode" => Dict(
			"type" => Bool,
			"variable_name" => "safe_mode",
			"options" => [true, false],
			"category" => "SolverSettings",
			"description" => "Add extra checks in simulator that have a small extra cost.",
		),
		"LinearSolver" => Dict(
			"type" => Dict,
			"variable_name" => "linear_solver",
			"category" => "SolverSettings",
			"description" => "The linear solver used to solve linearized systems.",
		),
		"ExtraTiming" => Dict(
			"type" => Bool,
			"variable_name" => "extra_timing",
			"options" => [true, false],
			"category" => "SolverSettings",
			"description" => "Output extra, highly detailed performance report at simulation end.",
		),
		"TimeStepSelectors" => Dict(
			"type" => String,
			"variable_name" => "timestep_selectors",
			"options" => ["TimestepSelector"],
			"category" => "SolverSettings",
			"description" => "Time-step selectors that pick mini steps.",
		),
		"Relaxation" => Dict(
			"type" => String,
			"variable_name" => "relaxation",
			"options" => ["NoRelaxation", "SimpleRelaxation"],
			"category" => "SolverSettings",
			"description" => "Non-Linear relaxation used. Currently supports `NoRelaxation()` and `SimpleRelaxation()`.",
		),
		"InfoLevel" => Dict(
			"type" => Int,
			"variable_name" => "info_level",
			"min_value" => -1,
			"max_value" => 4,
			"category" => "SolverSettings",
			"description" => """Info level determines the amount of runtime output to the terminal during simulation.
								0  - gives minimal output (just a progress bar by default, and a final report)
								1  - gives some more details, printing at the start of each step
								2  - as 1, but also printing the current worst residual at each iteration
								3  - as 1, but prints a table of all non-converged residuals at each iteration
								4  - as 3, but all residuals are printed (even converged values)
								-1 - disables output. """,
		),
		"DebugLevel" => Dict(
			"type" => Int,
			"variable_name" => "debug_level",
			"min_value" => 0,
			"max_value" => 10,
			"category" => "SolverSettings",
			"description" => "Define the amount of debug output in the reports. Higher values means more output.",
		),
		"EndReport" => Dict(
			"type" => Nothing,
			"variable_name" => "end_report",
			"category" => "SolverSettings",
			"description" => "Output a final report that includes timings etc. If nothing, depends on info_level instead.",
		),
		"ASCIITerminal" => Dict(
			"type" => Bool,
			"variable_name" => "ascii_terminal",
			"category" => "SolverSettings",
			"description" => "Avoid unicode (if possible) in terminal output.",
		),
		"ID" => Dict(
			"type" => String,
			"variable_name" => "id",
			"category" => "SolverSettings",
			"description" => "String identifier for simulator that is prefixed to some verbose output.",
		),
		"ProgressColor" => Dict(
			"type" => String,
			"variable_name" => "progress_color",
			"category" => "SolverSettings",
			"description" => "Color for progress meter.",
		),
		"progress_glyphs" => Dict(
			"type" => String,
			"variable_name" => "progress_glyphs",
			"options" => ["default"],
			"category" => "SolverSettings",
			"description" => "Glyphs",
		),
		"OutputStates" => Dict(
			"type" => Bool,
			"variable_name" => "output_states",
			"category" => "SolverSettings",
			"description" => "Return states in-memory as output.",
		),
		"OutputReports" => Dict(
			"type" => Bool,
			"variable_name" => "output_reports",
			"category" => "SolverSettings",
			"description" => "Return reports in-memory as output.",
		),
		"OutputPath" => Dict(
			"type" => String,
			"variable_name" => "output_path",
			"category" => "SolverSettings",
			"description" => "Path to write output. If nothing, output is not written to disk.",
		),
		"InMemoryReports" => Dict(
			"type" => Int,
			"variable_name" => "in_memory_reports",
			"min_value" => 0,
			"max_value" => 10,
			"category" => "SolverSettings",
			"description" => "Limit for number of reports kept in memory if output_path is provided.",
		),
		"ReportLevel" => Dict(
			"type" => Int,
			"variable_name" => "report_level",
			"min_value" => 0,
			"max_value" => 10,
			"category" => "SolverSettings",
			"description" => "Level of information stored in reports when written to disk.",
		),
		"OutputSubstrates" => Dict(
			"type" => Bool,
			"variable_name" => "output_substates",
			"category" => "SolverSettings",
			"description" => "Store substates (between report steps) as field on each state.",
		),
	)

	return meta_data
end
