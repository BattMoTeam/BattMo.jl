import{_ as a,c as n,o as i,aA as t}from"./chunks/framework.CnAGR-1U.js";const c=JSON.parse('{"title":"Handling simulation outputs","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/3_handle_outputs.md","filePath":"tutorials/3_handle_outputs.md","lastUpdated":null}'),e={name:"tutorials/3_handle_outputs.md"};function l(p,s,o,r,h,u){return i(),n("div",null,s[0]||(s[0]=[t(`<h1 id="Handling-simulation-outputs" tabindex="-1">Handling simulation outputs <a class="header-anchor" href="#Handling-simulation-outputs" aria-label="Permalink to &quot;Handling simulation outputs {#Handling-simulation-outputs}&quot;">​</a></h1><p>In this tutorial we will explore the outputs of a simulation for interesting tasks:</p><ul><li><p>Plot voltage and current curves</p></li><li><p>Plot overpotentials</p></li><li><p>Plot cell states in space and time</p></li><li><p>Save outputs</p></li><li><p>Load outputs.</p></li></ul><p>Lets start with loading some pre-defined cell parameters, cycling protocols, and running a simulation.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BattMo, GLMakie</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cell_parameters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> load_cell_parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; from_default_set </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Chen2020_calibrated&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cycling_protocol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> load_cycling_protocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; from_default_set </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;CCDischarge&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model_setup </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LithiumIonBattery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sim </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model_setup, cell_parameters, cycling_protocol);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sim)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>✔️ Validation of ModelSettings passed: No issues found.</span></span>
<span class="line"><span>──────────────────────────────────────────────────</span></span>
<span class="line"><span>✔️ Validation of CellParameters passed: No issues found.</span></span>
<span class="line"><span>──────────────────────────────────────────────────</span></span>
<span class="line"><span>✔️ Validation of CyclingProtocol passed: No issues found.</span></span>
<span class="line"><span>──────────────────────────────────────────────────</span></span>
<span class="line"><span>✔️ Validation of SimulationSettings passed: No issues found.</span></span>
<span class="line"><span>──────────────────────────────────────────────────</span></span>
<span class="line"><span>Jutul: Simulating 2 hours, 12 minutes as 163 report steps</span></span>
<span class="line"><span>╭────────────────┬───────────┬───────────────┬──────────╮</span></span>
<span class="line"><span>│ Iteration type │  Avg/step │  Avg/ministep │    Total │</span></span>
<span class="line"><span>│                │ 146 steps │ 146 ministeps │ (wasted) │</span></span>
<span class="line"><span>├────────────────┼───────────┼───────────────┼──────────┤</span></span>
<span class="line"><span>│ Newton         │   2.32877 │       2.32877 │  340 (0) │</span></span>
<span class="line"><span>│ Linearization  │   3.32877 │       3.32877 │  486 (0) │</span></span>
<span class="line"><span>│ Linear solver  │   2.32877 │       2.32877 │  340 (0) │</span></span>
<span class="line"><span>│ Precond apply  │       0.0 │           0.0 │    0 (0) │</span></span>
<span class="line"><span>╰────────────────┴───────────┴───────────────┴──────────╯</span></span>
<span class="line"><span>╭───────────────┬──────────┬────────────┬──────────╮</span></span>
<span class="line"><span>│ Timing type   │     Each │   Relative │    Total │</span></span>
<span class="line"><span>│               │       μs │ Percentage │       ms │</span></span>
<span class="line"><span>├───────────────┼──────────┼────────────┼──────────┤</span></span>
<span class="line"><span>│ Properties    │  33.3511 │     3.57 % │  11.3394 │</span></span>
<span class="line"><span>│ Equations     │ 173.4577 │    26.55 % │  84.3004 │</span></span>
<span class="line"><span>│ Assembly      │  69.9341 │    10.70 % │  33.9880 │</span></span>
<span class="line"><span>│ Linear solve  │ 370.8053 │    39.70 % │ 126.0738 │</span></span>
<span class="line"><span>│ Linear setup  │   0.0000 │     0.00 % │   0.0000 │</span></span>
<span class="line"><span>│ Precond apply │   0.0000 │     0.00 % │   0.0000 │</span></span>
<span class="line"><span>│ Update        │  47.3262 │     5.07 % │  16.0909 │</span></span>
<span class="line"><span>│ Convergence   │  63.4263 │     9.71 % │  30.8252 │</span></span>
<span class="line"><span>│ Input/Output  │  26.7276 │     1.23 % │   3.9022 │</span></span>
<span class="line"><span>│ Other         │  32.4642 │     3.48 % │  11.0378 │</span></span>
<span class="line"><span>├───────────────┼──────────┼────────────┼──────────┤</span></span>
<span class="line"><span>│ Total         │ 933.9933 │   100.00 % │ 317.5577 │</span></span>
<span class="line"><span>╰───────────────┴──────────┴────────────┴──────────╯</span></span></code></pre></div><p>UPDATE WITH NEW OUTPUT API</p><h3 id="The-simulation-output" tabindex="-1">The simulation output <a class="header-anchor" href="#The-simulation-output" aria-label="Permalink to &quot;The simulation output {#The-simulation-output}&quot;">​</a></h3><h3 id="Access-overpotentials" tabindex="-1">Access overpotentials <a class="header-anchor" href="#Access-overpotentials" aria-label="Permalink to &quot;Access overpotentials {#Access-overpotentials}&quot;">​</a></h3><h3 id="Plot-cell-states" tabindex="-1">Plot cell states <a class="header-anchor" href="#Plot-cell-states" aria-label="Permalink to &quot;Plot cell states {#Plot-cell-states}&quot;">​</a></h3><h3 id="Save-and-load-outputs" tabindex="-1">Save and load outputs <a class="header-anchor" href="#Save-and-load-outputs" aria-label="Permalink to &quot;Save and load outputs {#Save-and-load-outputs}&quot;">​</a></h3><h2 id="Example-on-GitHub" tabindex="-1">Example on GitHub <a class="header-anchor" href="#Example-on-GitHub" aria-label="Permalink to &quot;Example on GitHub {#Example-on-GitHub}&quot;">​</a></h2><p>If you would like to run this example yourself, it can be downloaded from the BattMo.jl GitHub repository <a href="https://github.com/BattMoTeam/BattMo.jl/blob/main/examples/3_handle_outputs.jl" target="_blank" rel="noreferrer">as a script</a>, or as a <a href="https://github.com/BattMoTeam/BattMo.jl/blob/gh-pages/dev/final_site/notebooks/3_handle_outputs.ipynb" target="_blank" rel="noreferrer">Jupyter Notebook</a></p><hr><p><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl" target="_blank" rel="noreferrer">Literate.jl</a>.</em></p>`,15)]))}const k=a(e,[["render",l]]);export{c as __pageData,k as default};
