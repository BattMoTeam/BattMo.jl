import{_ as e,c as a,o as i,aA as n}from"./chunks/framework.05M4Tn0T.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{"layout":"home","hero":{"name":"BattMo.jl","text":"Fast open-source battery simulation","image":{"src":"battmologo_stacked.png","alt":"BattMo"},"tagline":"1D, 2D and 3D open-source P2D/PXD Lithium-Ion battery simulation","actions":[{"theme":"brand","text":"Install","link":"manuals/user_guide/installation"},{"theme":"brand","text":"Getting started","link":"manuals/user_guide/getting_started"},{"theme":"alt","text":"BattMo Web App","link":"https://app.batterymodel.com/"},{"theme":"alt","text":"Github","link":"https://github.com/sintefmath/BattMo.jl"},{"theme":"alt","text":"Simulate a battery","link":"/examples/example_cycle"},{"theme":"alt","text":"About","link":"https://batterymodel.com/"}]},"features":[{"icon":"ðŸ”‹","title":"Accurate and open","details":"Validated on standard benchmarks. Automatic differentiation and Julia syntax means that the code is easy to read and edit. Based on proven computational core for other multiphysics domains.","link":"manuals/user_guide/public_api"},{"icon":"âš¡","title":"Fast and flexible","details":"Written in Julia, simulate with scripting syntax without sacrificing performance. Extensible with new features.","link":"manuals/user_guide/public_api"},{"icon":{"src":"battmologo_stacked.png","height":"10pt"},"title":"BattMo Web App","details":"A BattMo web application is available to run the simulation online without any further installation steps.","link":"https://app.batterymodel.com"},{"icon":"ðŸ§±","title":"1D, 2D and 3D","details":"One code handles both 1D models and complex 3D grids, with support for high-performance linear solvers for bigger models.","link":"manuals/user_guide/public_api"}]},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":null}'),o={name:"index.md"};function l(r,t,s,p,m,d){return i(),a("div",null,[...t[0]||(t[0]=[n('<p>The Battery Modelling Toolbox (<strong>BattMo</strong>) is a resource for continuum modelling of electrochemical devices in MATLAB. The code features a pseudo X-dimensional (PXD) framework for the Doyle-Fuller-Newman model of lithium-ion battery cells. The code implements a subset of features from the <a href="https://github.com/BattMoTeam/BattMo" target="_blank" rel="noreferrer">MATLAB version of BattMo</a> with improved numerical performance. <strong>BattMo.jl</strong> is based on <a href="https://github.com/sintefmath/Jutul.jl" target="_blank" rel="noreferrer">Jutul.jl</a> and uses finite-volume discretizations and automatic differentiation to simulate models in 1D, 2D and 3D.</p><p>The current implementation has many options for setting up simulation cases:</p><ul><li><p>Set up 1D, 2D and 3D grids using scripting syntax</p></li><li><p>Templates for different types of battery chemistry parameters in JSON format</p></li><li><p>Support for a variety of open formats</p></li><li><p>Read in input data prepared in the MATLAB version of BattMo (coin-cell, jellyroll, pouch)</p></li><li><p>Make use of common BattMo JSON format to run cases</p></li></ul><h2 id="Acknowledgements" tabindex="-1">Acknowledgements <a class="header-anchor" href="#Acknowledgements" aria-label="Permalink to &quot;Acknowledgements {#Acknowledgements}&quot;">â€‹</a></h2><p>BattMo has received funding from the European Unionâ€™s Horizon 2020 innovation program under grant agreement numbers:</p><ul><li><p>875527 HYDRA</p></li><li><p>957189 BIG-MAP</p></li><li><p>101104013 BATMAX</p></li><li><p>101103997 DigiBatt</p></li></ul>',6)])])}const h=e(o,[["render",l]]);export{c as __pageData,h as default};
