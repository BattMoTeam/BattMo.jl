import{_ as e,c as a,o as i,aA as s}from"./chunks/framework.9kpAX2_j.js";const u=JSON.parse('{"title":"Simulation-Dependent Input Parameters","description":"","frontmatter":{},"headers":[],"relativePath":"manuals/user_guide/simulation_dependent_input.md","filePath":"manuals/user_guide/simulation_dependent_input.md","lastUpdated":null}'),n={name:"manuals/user_guide/simulation_dependent_input.md"};function r(o,t,l,d,p,h){return i(),a("div",null,[...t[0]||(t[0]=[s('<h1 id="Simulation-Dependent-Input-Parameters" tabindex="-1">Simulation-Dependent Input Parameters <a class="header-anchor" href="#Simulation-Dependent-Input-Parameters" aria-label="Permalink to &quot;Simulation-Dependent Input Parameters {#Simulation-Dependent-Input-Parameters}&quot;">​</a></h1><h2 id="Overview" tabindex="-1">Overview <a class="header-anchor" href="#Overview" aria-label="Permalink to &quot;Overview {#Overview}&quot;">​</a></h2><p>In BattMo, several key input parameters—such as <strong>open-circuit voltage (OCV) curves</strong>, <strong>electrolyte diffusivity</strong>, and <strong>conductivity</strong>—can vary based on material properties and operating conditions like concentration and temperature. To allow flexibility, these parameters can be specified in one of three supported formats: <strong>real number</strong>, <strong>string-based expression</strong>, or <strong>dictionary-based arrays</strong>.</p><p>This page outlines how each type is used and can be specified within a JSON cell parameter set using the diffusion coefficient of the electrolyte as an example.</p><hr><h2 id="Supported-Parameter-Types" tabindex="-1">Supported Parameter Types <a class="header-anchor" href="#Supported-Parameter-Types" aria-label="Permalink to &quot;Supported Parameter Types {#Supported-Parameter-Types}&quot;">​</a></h2><h3 id="1.-Real-—-Constant-Value" tabindex="-1">1. <code>Real</code> — Constant Value <a class="header-anchor" href="#1.-Real-—-Constant-Value" aria-label="Permalink to &quot;1. `Real` — Constant Value {#1.-Real-—-Constant-Value}&quot;">​</a></h3><p>A single numeric value is interpreted as a constant, independent of state-of-charge (SOC), concentration (<code>c</code>), temperature (<code>T</code>), etc.</p><p><strong>Example:</strong></p><div class="language-JSON vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JSON</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DiffusionCoefficient&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.5e-10</span></span></code></pre></div><h3 id="2.-String-—-Expression-Based-Function" tabindex="-1">2. <code>String</code> — Expression-Based Function <a class="header-anchor" href="#2.-String-—-Expression-Based-Function" aria-label="Permalink to &quot;2. `String` — Expression-Based Function {#2.-String-—-Expression-Based-Function}&quot;">​</a></h3><p>String parameters represent mathematical expressions that may depend on:</p><ul><li><p><code>c</code> – Local concentration</p></li><li><p><code>cmax</code> – Maximum concentration</p></li><li><p><code>T</code> – Temperature (K)</p></li><li><p><code>refT</code> – Reference temperature (K)</p></li></ul><p>The string is parsed into a function during initialization and can be evaluated dynamically.</p><p><strong>Example:</strong></p><div class="language-JSON vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JSON</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DiffusionCoefficient&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8.794*10^(-11)*(c/1000)^2 - 3.972*10^(-10)*(c/1000) + 4.862*10^(-10)&quot;</span></span></code></pre></div><p><strong>Supported variables:</strong></p><table tabindex="0"><thead><tr><th style="text-align:right;">Parameter</th><th style="text-align:right;">Supported variables</th><th style="text-align:right;">Battery component</th></tr></thead><tbody><tr><td style="text-align:right;"><code>OpenCircuitPotential</code></td><td style="text-align:right;"><code>c,cmax,T,refT</code></td><td style="text-align:right;"><code>ActiveMaterial</code></td></tr><tr><td style="text-align:right;"><code>IonicConductivity</code></td><td style="text-align:right;"><code>c,T</code></td><td style="text-align:right;"><code>Electrolyte</code></td></tr><tr><td style="text-align:right;"><code>DiffusionCoefficient</code></td><td style="text-align:right;"><code>c,T</code></td><td style="text-align:right;"><code>Electrolyte</code></td></tr></tbody></table><h3 id="3.-Dict-—-Tabular-data" tabindex="-1">3. <code>Dict</code> — Tabular data <a class="header-anchor" href="#3.-Dict-—-Tabular-data" aria-label="Permalink to &quot;3. `Dict` — Tabular data {#3.-Dict-—-Tabular-data}&quot;">​</a></h3><p>For parameters like OCV curves, a dictionary with pre-tabulated data can be used. The dictionary must contain two keys:</p><ul><li><p><code>x</code> – Representing the data of the dependent variable</p></li><li><p><code>y</code> – Representing the data of the input parameter</p></li></ul><p><strong>Example:</strong></p><div class="language-JSON vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JSON</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DiffusionCoefficient&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.05</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;y&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.75</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]}</span></span></code></pre></div><p>The simulation uses interpolation to evaluate the y-quantity at any given x during the run.</p><blockquote><p><strong>Note:</strong> Ensure that both arrays are of equal length.</p></blockquote><p><strong>Supported data:</strong></p><table tabindex="0"><thead><tr><th style="text-align:right;">Parameter</th><th style="text-align:right;">Supported x data</th><th style="text-align:right;">Battery component</th></tr></thead><tbody><tr><td style="text-align:right;"><code>OpenCircuitPotential</code></td><td style="text-align:right;"><code>StoichiometricCoefficient</code></td><td style="text-align:right;"><code>ActiveMaterial</code></td></tr><tr><td style="text-align:right;"><code>IonicConductivity</code></td><td style="text-align:right;"><code>Concentration</code></td><td style="text-align:right;"><code>Electrolyte</code></td></tr><tr><td style="text-align:right;"><code>DiffusionCoefficient</code></td><td style="text-align:right;"><code>Concentration</code></td><td style="text-align:right;"><code>Electrolyte</code></td></tr></tbody></table>',27)])])}const g=e(n,[["render",r]]);export{u as __pageData,g as default};
