import{_ as o,C as p,c as r,o as d,j as s,a,aA as n,G as e,w as l}from"./chunks/framework.BPWE_kfU.js";const Y=JSON.parse('{"title":"High level interface","description":"","frontmatter":{},"headers":[],"relativePath":"manuals/api_documentation/highlevel.md","filePath":"manuals/api_documentation/highlevel.md","lastUpdated":null}'),h={name:"manuals/api_documentation/highlevel.md"},u={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},q={class:"jldocstring custom-block",open:""},I={class:"jldocstring custom-block",open:""},V={class:"jldocstring custom-block",open:""},L={class:"jldocstring custom-block",open:""},N={class:"jldocstring custom-block",open:""},O={class:"jldocstring custom-block",open:""},R={class:"jldocstring custom-block",open:""},z={class:"jldocstring custom-block",open:""},U={class:"jldocstring custom-block",open:""},J={class:"jldocstring custom-block",open:""};function G(H,i,W,$,K,Q){const t=p("Badge");return d(),r("div",null,[i[133]||(i[133]=s("h1",{id:"High-level-interface",tabindex:"-1"},[a("High level interface "),s("a",{class:"header-anchor",href:"#High-level-interface","aria-label":'Permalink to "High level interface {#High-level-interface}"'},"​")],-1)),i[134]||(i[134]=s("h2",{id:"Input-types",tabindex:"-1"},[a("Input types "),s("a",{class:"header-anchor",href:"#Input-types","aria-label":'Permalink to "Input types {#Input-types}"'},"​")],-1)),s("details",u,[s("summary",null,[i[0]||(i[0]=s("a",{id:"BattMo.AbstractInput",href:"#BattMo.AbstractInput"},[s("span",{class:"jlbinding"},"BattMo.AbstractInput")],-1)),i[1]||(i[1]=a()),e(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[3]||(i[3]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AbstractInput</span></span></code></pre></div><p>Abstract type for all parameter sets that can be given as an input to BattMo.</p><p>For any structure of this type, it is possible to access and set the values of the object using the same syntax as a standard Julia <a href="https://docs.julialang.org/en/v1/base/collections/#Dictionaries" target="_blank" rel="noreferrer">dictionary</a>.</p>',3)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[2]||(i[2]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/input/input_types.jl#L11-L18",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",c,[s("summary",null,[i[4]||(i[4]=s("a",{id:"BattMo.ParameterSet",href:"#BattMo.ParameterSet"},[s("span",{class:"jlbinding"},"BattMo.ParameterSet")],-1)),i[5]||(i[5]=a()),e(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[7]||(i[7]=s("p",null,"Abstract type for parameter sets that are part of the user API.",-1)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[6]||(i[6]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/input/input_types.jl#L146-L148",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",k,[s("summary",null,[i[8]||(i[8]=s("a",{id:"BattMo.CellParameters",href:"#BattMo.CellParameters"},[s("span",{class:"jlbinding"},"BattMo.CellParameters")],-1)),i[9]||(i[9]=a()),e(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[11]||(i[11]=s("p",null,"Cell parameter set type that represents the cell parameters",-1)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[10]||(i[10]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/input/input_types.jl#L194",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",g,[s("summary",null,[i[12]||(i[12]=s("a",{id:"BattMo.CyclingProtocol",href:"#BattMo.CyclingProtocol"},[s("span",{class:"jlbinding"},"BattMo.CyclingProtocol")],-1)),i[13]||(i[13]=a()),e(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[15]||(i[15]=s("p",null,"Parameter set type that represents the cycling protocol related parameters",-1)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[14]||(i[14]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/input/input_types.jl#L204",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",m,[s("summary",null,[i[16]||(i[16]=s("a",{id:"BattMo.ModelSettings",href:"#BattMo.ModelSettings"},[s("span",{class:"jlbinding"},"BattMo.ModelSettings")],-1)),i[17]||(i[17]=a()),e(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[19]||(i[19]=s("p",null,"Parameter set type that represents the model related settings",-1)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[18]||(i[18]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/input/input_types.jl#L213",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",y,[s("summary",null,[i[20]||(i[20]=s("a",{id:"BattMo.SimulationSettings",href:"#BattMo.SimulationSettings"},[s("span",{class:"jlbinding"},"BattMo.SimulationSettings")],-1)),i[21]||(i[21]=a()),e(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[23]||(i[23]=s("p",null,"Parameter set type that represents the simulation related settings",-1)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[22]||(i[22]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/input/input_types.jl#L223",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i[135]||(i[135]=s("h2",{id:"Read-input",tabindex:"-1"},[a("Read input "),s("a",{class:"header-anchor",href:"#Read-input","aria-label":'Permalink to "Read input {#Read-input}"'},"​")],-1)),s("details",E,[s("summary",null,[i[24]||(i[24]=s("a",{id:"BattMo.load_cell_parameters",href:"#BattMo.load_cell_parameters"},[s("span",{class:"jlbinding"},"BattMo.load_cell_parameters")],-1)),i[25]||(i[25]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[27]||(i[27]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load_cell_parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; from_file_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from_default_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from_model_template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ModelConfigured</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reads and loads cell parameters either from a JSON file, a default set, or a model template.</p><p><strong>Arguments</strong></p><ul><li><p><code>from_file_path ::String</code> : (Optional) Path to the JSON file containing cell parameters.</p></li><li><p><code>from_default_set ::String</code> : (Optional) The name of the default set to load cell parameters from.</p></li><li><p><code>from_model_template ::ModelConfigured</code> : (Optional) A <code>ModelConfigured</code> instance used to load an empty set of cell parameters required for the concerning model.</p></li></ul><p><strong>Returns</strong></p><p>An instance of <code>CellParameters</code>.</p><p><strong>Errors</strong></p><p>Throws an <code>ArgumentError</code> if none of the arguments are provided.</p>',8)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[26]||(i[26]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/input/loader.jl#L35-L50",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",b,[s("summary",null,[i[28]||(i[28]=s("a",{id:"BattMo.load_cycling_protocol",href:"#BattMo.load_cycling_protocol"},[s("span",{class:"jlbinding"},"BattMo.load_cycling_protocol")],-1)),i[29]||(i[29]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[31]||(i[31]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load_cycling_protocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; from_file_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from_default_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reads and loads cycling protocol either from a JSON file or a default set.</p><p><strong>Arguments</strong></p><ul><li><p><code>from_file_path ::String</code> : (Optional) Path to the JSON file containing cycling protocol.</p></li><li><p><code>from_default_set ::String</code> : (Optional) The name of the default set to load cycling protocol from.</p></li></ul><p><strong>Returns</strong></p><p>An instance of <code>CyclingProtocol</code>.</p><p><strong>Errors</strong></p><p>Throws an <code>ArgumentError</code> if neither <code>from_file_path</code> nor <code>from_default_set</code> is provided.</p>',8)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[30]||(i[30]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/input/loader.jl#L72-L86",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",f,[s("summary",null,[i[32]||(i[32]=s("a",{id:"BattMo.load_model_settings",href:"#BattMo.load_model_settings"},[s("span",{class:"jlbinding"},"BattMo.load_model_settings")],-1)),i[33]||(i[33]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[35]||(i[35]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load_model_settings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; from_file_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from_default_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reads and loads model settings either from a JSON file or a default set.</p><p><strong>Arguments</strong></p><ul><li><p><code>from_file_path ::String</code> : (Optional) Path to the JSON file containing model settings.</p></li><li><p><code>from_default_set ::String</code> : (Optional) The name of the default set to load model settings from.</p></li></ul><p><strong>Returns</strong></p><p>An instance of <code>ModelSettings</code>.</p><p><strong>Errors</strong></p><p>Throws an <code>ArgumentError</code> if neither <code>from_file_path</code> nor <code>from_default_set</code> is provided.</p>',8)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[34]||(i[34]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/input/loader.jl#L5-L19",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",_,[s("summary",null,[i[36]||(i[36]=s("a",{id:"BattMo.load_simulation_settings",href:"#BattMo.load_simulation_settings"},[s("span",{class:"jlbinding"},"BattMo.load_simulation_settings")],-1)),i[37]||(i[37]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[39]||(i[39]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load_simulation_settings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; from_file_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from_default_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from_model_template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ModelConfigured</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reads and loads simulation settings either from a JSON file, a default set, or a model template.</p><p><strong>Arguments</strong></p><ul><li><p><code>from_file_path ::String</code> : (Optional) Path to the JSON file containing simulation settings.</p></li><li><p><code>from_default_set ::String</code> : (Optional) The name of the default set to load simulation settings from.</p></li><li><p><code>from_model_template ::ModelConfigured</code> : (Optional) A <code>ModelConfigured</code> instance used to load an empty set of simulation settings required for the concerning model.</p></li></ul><p><strong>Returns</strong></p><p>An instance of <code>SimulationSettings</code>.</p><p><strong>Errors</strong></p><p>Throws an <code>ArgumentError</code> if none of the arguments are provided.</p>',8)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[38]||(i[38]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/input/loader.jl#L102-L117",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i[136]||(i[136]=s("h2",{id:"Model-types",tabindex:"-1"},[a("Model types "),s("a",{class:"header-anchor",href:"#Model-types","aria-label":'Permalink to "Model types {#Model-types}"'},"​")],-1)),s("details",C,[s("summary",null,[i[40]||(i[40]=s("a",{id:"BattMo.ModelConfigured",href:"#BattMo.ModelConfigured"},[s("span",{class:"jlbinding"},"BattMo.ModelConfigured")],-1)),i[41]||(i[41]=a()),e(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[43]||(i[43]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ModelConfigured</span></span></code></pre></div><p>Abstract type representing a model. All models should inherit from this type.</p>',2)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[42]||(i[42]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/models/full_battery_models/battery.jl#L4-L9",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",F,[s("summary",null,[i[44]||(i[44]=s("a",{id:"BattMo.LithiumIonBattery",href:"#BattMo.LithiumIonBattery"},[s("span",{class:"jlbinding"},"BattMo.LithiumIonBattery")],-1)),i[45]||(i[45]=a()),e(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[47]||(i[47]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LithiumIonBattery </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Battery</span></span></code></pre></div><p>Represents a lithium-ion battery model based on the Doyle-Fuller-Newman approach.</p><p><strong>Fields</strong></p><ul><li><p><code>name ::String</code> : A descriptive name for the model.</p></li><li><p><code>model_settings ::ModelSettings</code> : Settings specific to the model.</p></li></ul><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>LithiumIonBattery(; model_settings = get_default_model_settings(LithiumIonBattery))</span></span></code></pre></div><p>Creates an instance of <code>LithiumIonBattery</code> with the specified or default model settings. The model name is automatically generated based on the model geometry.</p>',7)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[46]||(i[46]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/models/full_battery_models/lithium_ion.jl#L7-L21",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i[137]||(i[137]=s("h2",{id:"Forward-simulation",tabindex:"-1"},[a("Forward simulation "),s("a",{class:"header-anchor",href:"#Forward-simulation","aria-label":'Permalink to "Forward simulation {#Forward-simulation}"'},"​")],-1)),s("details",v,[s("summary",null,[i[48]||(i[48]=s("a",{id:"BattMo.Simulation",href:"#BattMo.Simulation"},[s("span",{class:"jlbinding"},"BattMo.Simulation")],-1)),i[49]||(i[49]=a()),e(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[51]||(i[51]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ModelConfigured</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cell_parameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CellParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cycling_protocol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CyclingProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; simulation_settings</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SimulationSettings</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> get_default_simulation_settings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model))</span></span></code></pre></div><p>Constructs a <code>Simulation</code> object that sets up and validates all necessary components for simulating a battery model.</p><p><strong>Arguments</strong></p><ul><li><p><code>model::ModelConfigured</code>: A fully configured model object that includes the physical and numerical setup.</p></li><li><p><code>cell_parameters::CellParameters</code>: Parameters defining the physical characteristics of the battery cell.</p></li><li><p><code>cycling_protocol::CyclingProtocol</code>: The protocol specifying the charging/discharging cycles for the simulation.</p></li><li><p><code>simulation_settings::SimulationSettings</code> (optional): Configuration settings controlling solver behavior, time stepping, etc. If not provided, default settings are generated based on the model.</p></li></ul><p><strong>Behavior</strong></p><ul><li><p>Validates <code>model</code>, <code>cell_parameters</code>, <code>cycling_protocol</code>, and <code>simulation_settings</code>.</p></li><li><p>Sets up default solver options if not explicitly defined.</p></li><li><p>Initializes computational grids and couplings.</p></li><li><p>Configures the physical model and parameters.</p></li><li><p>Prepares the initial simulation state and external forcing functions.</p></li><li><p>Instantiates a <code>Simulator</code> from the Jutul framework with the prepared state and parameters.</p></li><li><p>Defines the time-stepping strategy for the simulation.</p></li><li><p>Assembles a simulation configuration object used to control execution.</p></li></ul><p><strong>Returns</strong></p><p>A <code>Simulation</code> struct instance that includes:</p><ul><li><p>Validation flag (<code>is_valid</code>)</p></li><li><p>Prepared simulation components: model, grids, couplings, parameters, initial state, forces, time steps, and simulator instance.</p></li></ul><p><strong>Throws</strong></p><ul><li>An error if <code>model.is_valid == false</code>, halting construction with a helpful message.</li></ul>',11)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[50]||(i[50]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/simulation/simulation.jl#L13-L42",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",B,[s("summary",null,[i[52]||(i[52]=s("a",{id:"BattMo.solve-Tuple{Simulation}",href:"#BattMo.solve-Tuple{Simulation}"},[s("span",{class:"jlbinding"},"BattMo.solve")],-1)),i[53]||(i[53]=a()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[55]||(i[55]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">solve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(problem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; accept_invalid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hook </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, info_level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, end_report </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> info_level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Solves a battery <code>Simulation</code> problem by executing the simulation workflow defined in <code>solve_simulation</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>problem::Simulation</code>: A fully constructed <code>Simulation</code> object, containing all model parameters, solver settings, and initial conditions.</p></li><li><p><code>accept_invalid::Bool</code> (optional): If <code>true</code>, bypasses the internal validation check on the <code>Simulation</code> object. Use with caution. Default is <code>false</code>.</p></li><li><p><code>hook</code> (optional): A user-defined callback or observer function that can be inserted into the simulation loop.</p></li><li><p><code>info_level::Int</code> (optional): Controls verbosity of simulation logging and output. Default is <code>0</code>.</p></li><li><p><code>end_report::Bool</code> (optional): Whether to print a summary report after simulation. Defaults to <code>true</code> if <code>info_level &gt; -1</code>.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments forwarded to <code>solve_simulation</code>.</p></li></ul><p><strong>Behavior</strong></p><ul><li><p>Validates the <code>Simulation</code> object unless <code>accept_invalid</code> is <code>true</code>.</p></li><li><p>Prepares simulation configuration options, including verbosity and report behavior.</p></li><li><p>Calls <code>solve_simulation</code>, passing in the simulation problem and configuration.</p></li></ul><p><strong>Returns</strong></p><ul><li>The result of <code>solve_simulation</code>, typically containing simulation outputs such as state trajectories, solver diagnostics, and performance metrics.</li></ul><p><strong>Throws</strong></p><ul><li>An error if the <code>Simulation</code> object is invalid and <code>accept_invalid</code> is not set to <code>true</code>.</li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sim </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, cell_parameters, cycling_protocol)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sim; info_level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,12)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[54]||(i[54]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/simulation/simulation.jl#L151-L180",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",j,[s("summary",null,[i[56]||(i[56]=s("a",{id:"BattMo.solve_simulation",href:"#BattMo.solve_simulation"},[s("span",{class:"jlbinding"},"BattMo.solve_simulation")],-1)),i[57]||(i[57]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[59]||(i[59]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">solve_simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; hook </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, use_p2d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Executes the simulation workflow for a battery <code>Simulation</code> object by advancing the system state over the defined time steps using the configured solver and model.</p><p><strong>Arguments</strong></p><ul><li><p><code>sim::Simulation</code>: A <code>Simulation</code> instance containing all preconfigured simulation components including model, state, solver, time steps, and settings.</p></li><li><p><code>hook</code> (optional): A user-supplied callback function to be invoked <em>before</em> the simulation begins. Useful for modifying or logging internal simulation structures (e.g., for debugging, monitoring, or visualization).</p></li><li><p><code>use_p2d::Bool</code> (optional): Currently unused placeholder; included for compatibility or future extensions. Default is <code>true</code>.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments passed to the lower-level solver configuration.</p></li></ul><p><strong>Behavior</strong></p><ul><li><p>Extracts all relevant simulation components from the <code>Simulation</code> object.</p></li><li><p>Optionally invokes a user-defined <code>hook</code> function with simulation internals.</p></li><li><p>Calls the <code>simulate</code> function to perform time integration across defined time steps.</p></li><li><p>Constructs a set of metadata dictionaries for downstream analysis or inspection.</p></li></ul><p><strong>Returns</strong></p><p>A named tuple with the following fields:</p><ul><li><p><code>states</code>: The computed simulation states over all time steps.</p></li><li><p><code>cellSpecifications</code>: Cell-level metrics computed from the final model state.</p></li><li><p><code>reports</code>: Simulation logs and diagnostics generated during execution.</p></li><li><p><code>input</code>: A dictionary of the original input settings used in the simulation.</p></li><li><p><code>extra</code>: A dictionary containing internal simulation structures such as:</p><ul><li><p>Simulator, initial state, parameters</p></li><li><p>Grids and couplings</p></li><li><p>Time steps and configuration</p></li><li><p>Model, cell parameters, cycling protocol</p></li></ul></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solve_simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sim)</span></span></code></pre></div>',11)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[58]||(i[58]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/simulation/simulation.jl#L213-L246",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i[138]||(i[138]=s("h2",{id:"Retrieve-output-variables",tabindex:"-1"},[a("Retrieve output variables "),s("a",{class:"header-anchor",href:"#Retrieve-output-variables","aria-label":'Permalink to "Retrieve output variables {#Retrieve-output-variables}"'},"​")],-1)),s("details",T,[s("summary",null,[i[60]||(i[60]=s("a",{id:"BattMo.get_output_time_series",href:"#BattMo.get_output_time_series"},[s("span",{class:"jlbinding"},"BattMo.get_output_time_series")],-1)),i[61]||(i[61]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[63]||(i[63]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get_output_time_series</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; quantities</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing, Vector{String}}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Extracts selected time-series data (e.g., voltage, current, time) from a simulation output.</p><p><strong>Arguments</strong></p><ul><li><p><code>output::NamedTuple</code>: The simulation result, typically produced by <code>solve_simulation</code>, containing computed states and metadata.</p></li><li><p><code>quantities::Union{Nothing, Vector{String}}</code> (optional): A list of quantity names to extract from the output. Supported values include <code>&quot;Time&quot;</code>, <code>&quot;Voltage&quot;</code>, and <code>&quot;Current&quot;</code>. If <code>nothing</code> (default), all available quantities are returned.</p></li></ul><p><strong>Behavior</strong></p><ul><li><p>Extracts time, voltage, and current data from the simulation output.</p></li><li><p>If specific quantities are requested, filters and returns only those.</p></li><li><p>Validates requested quantity names against the list of available quantities.</p></li><li><p>Returns the selected data as a named tuple of vectors, keyed by quantity name.</p></li></ul><p><strong>Returns</strong></p><p>A <code>NamedTuple</code> of selected time-series data, where each entry is a vector of values over time. Possible keys include:</p><ul><li><p><code>:Time</code></p></li><li><p><code>:Voltage</code></p></li><li><p><code>:Current</code></p></li></ul><p><strong>Throws</strong></p><ul><li>An error if an unsupported or unknown quantity name is provided in <code>quantities</code>.</li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solve_simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sim)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> get_output_time_series</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output; quantities</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Time&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Voltage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Time, ts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Voltage)</span></span></code></pre></div>`,13)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[62]||(i[62]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/output/output_format.jl#L6-L36",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",A,[s("summary",null,[i[64]||(i[64]=s("a",{id:"BattMo.get_output_states",href:"#BattMo.get_output_states"},[s("span",{class:"jlbinding"},"BattMo.get_output_states")],-1)),i[65]||(i[65]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[67]||(i[67]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get_output_states</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; quantities</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing, Vector{String}}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Extracts spatially resolved state variables and associated coordinates from a battery simulation <code>output</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>output::NamedTuple</code>: The simulation result returned from <code>solve_simulation</code>, containing time series, model metadata, and padded states.</p></li><li><p><code>quantities::Union{Nothing, Vector{String}}</code> (optional): A list of quantity names to extract. If <code>nothing</code> (default), all available spatial and coordinate data is returned.</p></li></ul><p><strong>Behavior</strong></p><ul><li><p>Retrieves simulation time points and spatial coordinates:</p><ul><li><p><code>:Time</code>: Simulation time vector</p></li><li><p><code>:Position</code>: 1D spatial grid along the cell (x-direction)</p></li><li><p><code>:NegativeElectrodeActiveMaterialRadius</code>: Radial coordinate for the negative electrode active material</p></li><li><p><code>:PositiveElectrodeActiveMaterialRadius</code>: Radial coordinate for the positive electrode active material</p></li></ul></li><li><p>Extracts spatially resolved state data (e.g., concentration, potential) using <code>extract_spatial_data</code>.</p></li><li><p>Filters and returns only requested quantities if <code>quantities</code> is specified.</p></li><li><p>Ensures returned data is not <code>nothing</code>; raises an error if a requested quantity is missing or unavailable.</p></li></ul><p><strong>Returns</strong></p><p>A <code>NamedTuple</code> containing the selected spatial quantities and coordinates. Possible keys include:</p><ul><li><p><code>:Time</code></p></li><li><p><code>:Position</code></p></li><li><p><code>:NegativeElectrodeActiveMaterialRadius</code></p></li><li><p><code>:PositiveElectrodeActiveMaterialRadius</code></p></li><li><p>Additional quantities from <code>extract_spatial_data</code>, such as:</p><ul><li><p>Concentration profiles</p></li><li><p>Potential distributions</p></li><li><p>Temperature fields, etc.</p></li></ul></li></ul><p><strong>Throws</strong></p><ul><li>An error if a requested quantity is unavailable or not present in the extracted state data.</li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solve_simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sim)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">states </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> get_output_states</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output; quantities</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Time&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Position&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ElectrolyteConcentration&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">heatmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(states</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Position, states</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Time, states</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ElectrolyteConcentration)</span></span></code></pre></div>`,13)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[66]||(i[66]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/output/output_format.jl#L171-L210",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",M,[s("summary",null,[i[68]||(i[68]=s("a",{id:"BattMo.get_output_metrics",href:"#BattMo.get_output_metrics"},[s("span",{class:"jlbinding"},"BattMo.get_output_metrics")],-1)),i[69]||(i[69]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[71]||(i[71]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get_output_metrics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; metrics</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing, Vector{String}}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes key performance metrics from a battery simulation output, either globally or per cycle, and returns them as a named tuple.</p><p><strong>Arguments</strong></p><ul><li><p><code>output::NamedTuple</code>: The result of a simulation, typically returned from <code>solve_simulation</code>, containing time-series states and metadata.</p></li><li><p><code>metrics::Union{Nothing, Vector{String}}</code> (optional): A list of metric names to extract. If <code>nothing</code> (default), all available metrics are returned.</p></li></ul><p><strong>Behavior</strong></p><ul><li><p>Extracts the model and state history from the output.</p></li><li><p>Detects the number of cycles in the simulation via the controller state.</p></li><li><p>Computes the following metrics, either globally or per cycle:</p><ul><li><p><code>DischargeCapacity</code> (Ah)</p></li><li><p><code>ChargeCapacity</code> (Ah)</p></li><li><p><code>DischargeEnergy</code> (Wh)</p></li><li><p><code>ChargeEnergy</code> (Wh)</p></li><li><p><code>RoundTripEfficiency</code> (%)</p></li></ul></li><li><p>Constructs and returns a dictionary of requested metrics (or all metrics by default).</p></li></ul><p><strong>Returns</strong></p><p>A <code>NamedTuple</code> where each field is a vector containing the computed metric values (one value per cycle, or globally if no cycles are detected). Possible fields include:</p><ul><li><p><code>:CycleIndex</code></p></li><li><p><code>:DischargeCapacity</code></p></li><li><p><code>:ChargeCapacity</code></p></li><li><p><code>:DischargeEnergy</code></p></li><li><p><code>:ChargeEnergy</code></p></li><li><p><code>:RoundTripEfficiency</code></p></li></ul><p><strong>Throws</strong></p><ul><li><p>An error if a requested metric is not recognized or unavailable.</p></li><li><p>Errors include a helpful message listing all valid metric names.</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solve_simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sim)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">metrics </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> get_output_metrics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output; metrics</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DischargeCapacity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;RoundTripEfficiency&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(metrics</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CycleNumber, metrics</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DischargeCapacity)</span></span></code></pre></div>`,13)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[70]||(i[70]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/output/output_format.jl#L69-L108",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i[139]||(i[139]=s("h2",{id:"Plotting",tabindex:"-1"},[a("Plotting "),s("a",{class:"header-anchor",href:"#Plotting","aria-label":'Permalink to "Plotting {#Plotting}"'},"​")],-1)),s("details",S,[s("summary",null,[i[72]||(i[72]=s("a",{id:"BattMo.plot_dashboard",href:"#BattMo.plot_dashboard"},[s("span",{class:"jlbinding"},"BattMo.plot_dashboard")],-1)),i[73]||(i[73]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[75]||(i[75]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BattMo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">plot_dashboard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output; plot_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;simple&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Plot a dashboard summarizing simulation output with selectable styles.</p><p><strong>Arguments</strong></p><ul><li><p><code>output</code>: Simulation output NamedTuple.</p></li><li><p><code>plot_type</code>: One of <code>&quot;simple&quot;</code>, <code>&quot;line&quot;</code>, or <code>&quot;contour&quot;</code> (default <code>&quot;simple&quot;</code>).</p></li></ul><p><strong>Description</strong></p><ul><li><p><code>&quot;simple&quot;</code>: Shows time series of current and voltage.</p></li><li><p><code>&quot;line&quot;</code>: Adds interactive line plots of concentrations and potentials with a time slider.</p></li><li><p><code>&quot;contour&quot;</code>: Shows contour plots of concentrations and potentials over time and position.</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLMakie</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BattMo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">plot_dashboard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output; plot_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;line&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,8)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[74]||(i[74]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/plotting/1d.jl#L48-L67",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",D,[s("summary",null,[i[76]||(i[76]=s("a",{id:"BattMo.plot_output",href:"#BattMo.plot_output"},[s("span",{class:"jlbinding"},"BattMo.plot_output")],-1)),i[77]||(i[77]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[79]||(i[79]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BattMo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">plot_output</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output, output_variables; layout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Plot specified variables from simulation output using GLMakie.</p><p><strong>Arguments</strong></p><ul><li><p><code>output</code>: NamedTuple with simulation data.</p></li><li><p><code>output_variables</code>: Vector of variable names or groups of names to plot.</p></li><li><p><code>layout</code>: Optional (nrows, ncols) tuple to set subplot arrangement.</p></li></ul><p><strong>Notes</strong></p><ul><li><p>Requires GLMakie to be imported beforehand.</p></li><li><p>Automatically chooses layout if none provided.</p></li><li><p>Supports line plots (1D data) and contour plots (2D data).</p></li><li><p>Displays units and metadata in labels.</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLMakie</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BattMo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">plot_output</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Voltage vs Time&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;NegativeElectrodeActiveMaterialSurfaceConcentration vs Time at Position index 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;NegativeElectrodeActiveMaterialSurfaceConcentration vs Time at Position index 10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">				&quot;ElectrolytePotential vs time and Position&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				]; layout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div>`,8)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[78]||(i[78]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/plotting/1d.jl#L15-L40",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",x,[s("summary",null,[i[80]||(i[80]=s("a",{id:"BattMo.plot_interactive_3d",href:"#BattMo.plot_interactive_3d"},[s("span",{class:"jlbinding"},"BattMo.plot_interactive_3d")],-1)),i[81]||(i[81]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[83]||(i[83]=s("p",null,"plot_interactive_3d",-1)),i[84]||(i[84]=s("p",null,"Launch an interactive plot for visualizing simulation results of 3D geometries.",-1)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[82]||(i[82]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/plotting/3d.jl#L3-L7",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i[140]||(i[140]=s("h2",{id:"Tools-that-print-information",tabindex:"-1"},[a("Tools that print information "),s("a",{class:"header-anchor",href:"#Tools-that-print-information","aria-label":'Permalink to "Tools that print information {#Tools-that-print-information}"'},"​")],-1)),s("details",P,[s("summary",null,[i[85]||(i[85]=s("a",{id:"BattMo.print_submodels_info",href:"#BattMo.print_submodels_info"},[s("span",{class:"jlbinding"},"BattMo.print_submodels_info")],-1)),i[86]||(i[86]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[88]||(i[88]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print_submodels_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Prints an overview of configurable submodels available within the simulation framework, including valid options and documentation links.</p><p><strong>Behavior</strong></p><ul><li><p>Retrieves model configuration metadata using <code>get_setting_meta_data()</code>.</p></li><li><p>Filters the metadata to include only entries marked with <code>&quot;is_sub_model&quot; =&gt; true</code>.</p></li><li><p>Extracts:</p><ul><li><p>The submodel parameter name</p></li><li><p>The list of valid options (or <code>&quot;N/A&quot;</code> if not specified)</p></li><li><p>A documentation link (if available)</p></li></ul></li><li><p>Prints a well-formatted table summarizing each submodel, with aligned columns:</p><ul><li><p><strong>Parameter</strong> – the submodel key name (e.g., <code>&quot;electrolyte_transport&quot;</code>)</p></li><li><p><strong>Options</strong> – available values that can be assigned to the parameter</p></li><li><p><strong>Documentation</strong> – a URL (formatted with <code>format_link</code>) or <code>-</code> if missing</p></li></ul></li></ul><p><strong>Output</strong></p><ul><li><p>Directly prints a structured table to the console.</p></li><li><p>Uses consistent width formatting for readability.</p></li><li><p>Includes Unicode symbols and horizontal lines for visual structure.</p></li></ul><p><strong>Use Case</strong></p><ul><li><p>Helps users understand which submodels are configurable and how to select between them.</p></li><li><p>Useful for exploring model flexibility and guiding configuration in notebooks, scripts, or GUIs.</p></li></ul>',8)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[87]||(i[87]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/input/printer.jl#L326-L351",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",w,[s("summary",null,[i[89]||(i[89]=s("a",{id:"BattMo.print_default_input_sets_info",href:"#BattMo.print_default_input_sets_info"},[s("span",{class:"jlbinding"},"BattMo.print_default_input_sets_info")],-1)),i[90]||(i[90]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[92]||(i[92]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print_default_input_sets_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Prints a structured overview of all available default input sets for battery simulations, including high-level summaries and detailed metadata for each set.</p><p><strong>Behavior</strong></p><ul><li><p>Scans the <code>defaults/</code> directory (located relative to the script file) for available JSON input sets organized by category (subfolders).</p></li><li><p>Prints:</p><ol><li><p>📋 A concise aligned list of categories and their corresponding default set names.</p></li><li><p>📖 A detailed description for each default set, including:</p></li></ol></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> - Cell name and case</span></span>
<span class="line"><span> - Source (with optional formatted link)</span></span>
<span class="line"><span> - Supported models</span></span>
<span class="line"><span> - Set description</span></span></code></pre></div><ul><li>Metadata is extracted using helper functions such as <code>read_meta_data</code> and <code>read_source_from_meta_data</code>, which pull structured data (e.g., description, model support) from the JSON files.</li></ul><p><strong>Output</strong></p><ul><li><p>Prints directly to the console using <code>println</code>, formatted for clarity with Unicode symbols and horizontal dividers.</p></li><li><p>Output includes:</p><ul><li><p>Folder/category names (e.g., <code>CellParameters&quot;</code>)</p></li><li><p>Available JSON set names (e.g., <code>&quot;Chen2020&quot;</code>)</p></li><li><p>Descriptions and intended use cases for each set</p></li></ul></li></ul><p><strong>Use Case</strong></p><ul><li><p>Helps users quickly understand what predefined inputs are available for simulation without needing to inspect the files manually.</p></li><li><p>Useful for educational purposes, rapid prototyping, or configuration setup.</p></li></ul><p><strong>Notes</strong></p><ul><li><p>Only <code>.json</code> files are considered valid input sets.</p></li><li><p>Requires that the <code>defaults/</code> directory structure and expected metadata fields are present and correctly formatted.</p></li></ul>`,12)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[91]||(i[91]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/input/printer.jl#L110-L141",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",q,[s("summary",null,[i[93]||(i[93]=s("a",{id:"BattMo.print_parameter_info",href:"#BattMo.print_parameter_info"},[s("span",{class:"jlbinding"},"BattMo.print_parameter_info")],-1)),i[94]||(i[94]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[96]||(i[96]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print_parameter_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(from_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Prints detailed metadata for physical or model parameters whose names match (fully or partially) the provided <code>from_name</code> string.</p><p><strong>Arguments</strong></p><ul><li><code>from_name::String</code>: A case-insensitive search term used to match parameter names from the metadata registry.</li></ul><p><strong>Behavior</strong></p><ul><li><p>Loads parameter metadata using <code>get_parameter_meta_data()</code>.</p></li><li><p>Performs a fuzzy search for parameter names containing the given <code>from_name</code> string.</p></li><li><p>For each matched parameter, prints:</p><ul><li><p>Parameter name</p></li><li><p>Description (if available)</p></li><li><p>Accepted types</p></li><li><p>Units</p></li><li><p>List of allowed options (if any)</p></li><li><p>Minimum and maximum bounds (if defined)</p></li><li><p>Documentation URL (formatted using <code>format_link</code>)</p></li><li><p>Ontology/context type IRI link (if provided)</p></li></ul></li></ul><p><strong>Output</strong></p><ul><li><p>Prints the information directly to the console in a structured, readable format with aligned labels and Unicode icons.</p></li><li><p>If no parameters match the search, a ❌ warning message is printed.</p></li></ul><p><strong>Returns</strong></p><ul><li>Nothing (side-effect only: prints to console).</li></ul>',10)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[95]||(i[95]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/input/printer.jl#L530-L557",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",I,[s("summary",null,[i[97]||(i[97]=s("a",{id:"BattMo.print_setting_info",href:"#BattMo.print_setting_info"},[s("span",{class:"jlbinding"},"BattMo.print_setting_info")],-1)),i[98]||(i[98]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[100]||(i[100]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print_setting_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(from_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Displays detailed metadata for any model or simulation setting whose name matches (fully or partially) the provided <code>from_name</code> string.</p><p><strong>Arguments</strong></p><ul><li><code>from_name::String</code>: A (partial or full) string used to search for matching parameter names in the settings metadata.</li></ul><p><strong>Behavior</strong></p><ul><li><p>Performs a case-insensitive fuzzy match across all available setting keys.</p></li><li><p>For each matching setting, prints detailed metadata including:</p><ul><li><p>Name</p></li><li><p>Description</p></li><li><p>Allowed types</p></li><li><p>Units (if specified)</p></li><li><p>Valid options</p></li><li><p>Validation bounds (min/max values)</p></li><li><p>Documentation links</p></li><li><p>Ontology (context IRI) links</p></li></ul></li><li><p>Uses Unicode symbols and structured formatting to produce readable output.</p></li><li><p>Uses helper functions like <code>get_setting_meta_data()</code> and <code>format_link()</code> to retrieve metadata and produce clickable/documented links depending on output format.</p></li></ul><p><strong>Output</strong></p><ul><li><p>If no matches are found: prints a ❌ message indicating no results.</p></li><li><p>If matches are found: prints a block of detailed metadata for each, separated by horizontal lines.</p></li></ul>',8)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[99]||(i[99]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/input/printer.jl#L402-L428",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",V,[s("summary",null,[i[101]||(i[101]=s("a",{id:"BattMo.print_output_variable_info",href:"#BattMo.print_output_variable_info"},[s("span",{class:"jlbinding"},"BattMo.print_output_variable_info")],-1)),i[102]||(i[102]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[104]||(i[104]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print_output_variable_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(from_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Print detailed metadata for output variables that match the given name.</p><p><strong>Description</strong></p><p>Performs a case-insensitive search for variable names containing <code>from_name</code> and prints information such as description, type, unit, and documentation links.</p><p><strong>Arguments</strong></p><ul><li><code>from_name</code>: Partial or full name of the variable to search for.</li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print_output_variable_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;voltage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>',8)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[103]||(i[103]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/output/printer.jl#L111-L126",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i[141]||(i[141]=s("h2",{id:"Tools-that-write-files",tabindex:"-1"},[a("Tools that write files "),s("a",{class:"header-anchor",href:"#Tools-that-write-files","aria-label":'Permalink to "Tools that write files {#Tools-that-write-files}"'},"​")],-1)),s("details",L,[s("summary",null,[i[105]||(i[105]=s("a",{id:"BattMo.generate_default_parameter_files",href:"#BattMo.generate_default_parameter_files"},[s("span",{class:"jlbinding"},"BattMo.generate_default_parameter_files")],-1)),i[106]||(i[106]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[108]||(i[108]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">generate_default_parameter_files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">generate_default_parameter_files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/some/path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, force </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">generate_default_parameter_files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/some/path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my_json_files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Make a local copy of the default JSON parameter files in the specified directory. The default name is &quot;battmo_json&quot;. If the directory already exists, an error is thrown unless <code>force</code> is set to true. The default path is the current working directory.</p>`,2)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[107]||(i[107]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/input/defaults.jl#L49-L57",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",N,[s("summary",null,[i[109]||(i[109]=s("a",{id:"BattMo.write_to_json_file",href:"#BattMo.write_to_json_file"},[s("span",{class:"jlbinding"},"BattMo.write_to_json_file")],-1)),i[110]||(i[110]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[112]||(i[112]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">write_to_json_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Writes the contents of <code>data</code> to a JSON file at the specified <code>file_path</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>file_path::String</code>: The path (including filename) where the JSON file will be saved.</p></li><li><p><code>data::AbstractInput</code>: An object containing the data to serialize. The function accesses the <code>.all</code> field/property of <code>data</code> to retrieve the content to write.</p></li></ul><p><strong>Behavior</strong></p><ul><li><p>Opens the file at <code>file_path</code> in write mode.</p></li><li><p>Serializes the <code>data.all</code> object to JSON format with indentation of 4 spaces.</p></li><li><p>Writes the JSON data to the file.</p></li><li><p>Prints a success message upon completion.</p></li><li><p>If an error occurs (e.g., file system permission issues), catches the exception and prints an error message.</p></li></ul><p><strong>Returns</strong></p><ul><li>Nothing (side-effect only: writes file and prints status messages).</li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">write_to_json_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;output/config.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sim_input)</span></span></code></pre></div>',10)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[111]||(i[111]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/input/writer.jl#L4-L27",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i[142]||(i[142]=s("h2",{id:"Calibration",tabindex:"-1"},[a("Calibration "),s("a",{class:"header-anchor",href:"#Calibration","aria-label":'Permalink to "Calibration {#Calibration}"'},"​")],-1)),s("details",O,[s("summary",null,[i[113]||(i[113]=s("a",{id:"BattMo.AbstractCalibration",href:"#BattMo.AbstractCalibration"},[s("span",{class:"jlbinding"},"BattMo.AbstractCalibration")],-1)),i[114]||(i[114]=a()),e(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[116]||(i[116]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AbstractCalibration</span></span></code></pre></div><p>Abstract type for calibration objects.</p>',2)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[115]||(i[115]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/calibration/calibration.jl#L6-L10",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",R,[s("summary",null,[i[117]||(i[117]=s("a",{id:"BattMo.VoltageCalibration",href:"#BattMo.VoltageCalibration"},[s("span",{class:"jlbinding"},"BattMo.VoltageCalibration")],-1)),i[118]||(i[118]=a()),e(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[120]||(i[120]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mutable struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> VoltageCalibration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractCalibration</span></span></code></pre></div><p>Represents a voltage calibration problem for a battery simulation.</p><p><strong>Fields</strong></p><ul><li><p><code>t::Any</code> Time vector corresponding to the calibration voltage data points.</p></li><li><p><code>v::Any</code> Voltage vector containing calibration voltage data.</p></li><li><p><code>sim::Any</code> A deep copy of the <code>Simulation</code> object used for calibration, allowing reuse of the original simulation.</p></li><li><p><code>parameter_targets::Any</code> Dictionary mapping parameter name vectors (keys) to tuples <code>(initial_value, lower_bound, upper_bound)</code> specifying calibration targets.</p></li><li><p><code>calibrated_cell_parameters::Any</code> Holds the cell parameters obtained after calibration is solved.</p></li><li><p><code>history::Any</code> Stores the optimization process history, including iteration details and convergence info.</p></li></ul><p><strong>Constructors</strong></p><ul><li><p><code>VoltageCalibration(t, v, sim)</code> Creates a new calibration object from time vector <code>t</code>, voltage vector <code>v</code>, and a simulation <code>sim</code>. Ensures time vector <code>t</code> is strictly increasing and matches length of <code>v</code>.</p></li><li><p><code>VoltageCalibration(t_and_v, sim; normalize_time = false)</code> Alternative constructor that takes a 2D array <code>t_and_v</code> where the first column is time and the second is voltage. Optionally normalizes the time vector to start at zero if <code>normalize_time</code> is true.</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sim </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">calib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> VoltageCalibration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t, v, sim)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or with combined data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">calib2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> VoltageCalibration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data, sim, normalize_time</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,8)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[119]||(i[119]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/calibration/calibration.jl#L14-L61",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",z,[s("summary",null,[i[121]||(i[121]=s("a",{id:"BattMo.solve-Tuple{AbstractCalibration}",href:"#BattMo.solve-Tuple{AbstractCalibration}"},[s("span",{class:"jlbinding"},"BattMo.solve")],-1)),i[122]||(i[122]=a()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[124]||(i[124]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">solve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractCalibration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (calibrated_parameters, history)</span></span></code></pre></div><p>Solve the calibration problem by optimizing model parameters to fit target data.</p><p><strong>Description</strong></p><p>Performs parameter calibration for a model using the LBFGS optimizer (or a user-supplied optimizer). The method minimizes an objective function derived from the discrepancy between simulation output and calibration targets.</p><p><strong>Keyword Arguments</strong></p><ul><li><p><code>grad_tol</code>: Gradient norm stopping tolerance (default: <code>1e-6</code>)</p></li><li><p><code>obj_change_tol</code>: Objective change tolerance (default: <code>1e-6</code>)</p></li><li><p><code>opt_fun</code>: Optional custom optimization function</p></li><li><p><code>backend_arg</code>: Tuple controlling sparsity and preprocessing (default settings shown in source)</p></li><li><p>Other keyword arguments are passed to the optimizer.</p></li></ul><p><strong>Returns</strong></p><p>A tuple <code>(calibrated_cell_parameters, optimization_history)</code>.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">calibrated_params, history </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc; grad_tol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e-7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>',10)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[123]||(i[123]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/calibration/calibration.jl#L233-L255",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",U,[s("summary",null,[i[125]||(i[125]=s("a",{id:"BattMo.free_calibration_parameter!",href:"#BattMo.free_calibration_parameter!"},[s("span",{class:"jlbinding"},"BattMo.free_calibration_parameter!")],-1)),i[126]||(i[126]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[128]||(i[128]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">free_calibration_parameter!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractCalibration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, parameter_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{String}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		initial_value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> missing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		lower_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> missing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		upper_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> missing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	)</span></span></code></pre></div><p>Set a calibration parameter to be free for optimization. The parameter is specified by <code>parameter_name</code>, which is a vector of strings representing the nested structure of the parameter in the simulation&#39;s cell parameters.</p><p><strong>Notes</strong></p><ul><li><p>The <code>initial_value</code> is optional and can be set to <code>missing</code> if not provided.</p></li><li><p>The <code>lower_bound</code> and <code>upper_bound</code> must be provided and cannot be <code>missing</code>.</p></li></ul>`,4)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[127]||(i[127]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/calibration/calibration.jl#L99-L113",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",J,[s("summary",null,[i[129]||(i[129]=s("a",{id:"BattMo.print_calibration_overview",href:"#BattMo.print_calibration_overview"},[s("span",{class:"jlbinding"},"BattMo.print_calibration_overview")],-1)),i[130]||(i[130]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[132]||(i[132]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print_calibration_overview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractCalibration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Print an overview of the calibration parameters and their current values. If the calibration has been performed, the table will also include the optimized values and the percentage change from the initial values.</p>',2)),e(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[131]||(i[131]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/35281470062e2f06c6c56eaab0b8ae5dc083ce8c/src/calibration/calibration.jl#L150-L156",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const Z=o(h,[["render",G]]);export{Y as __pageData,Z as default};
