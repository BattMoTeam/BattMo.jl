import{_ as n,c as t,o as l,aA as s,j as e,a as i}from"./chunks/framework.Dwoe80-h.js";const o="/BattMo.jl/previews/PR72/assets/ldmudbj.Pfy_axuX.jpeg",r="/BattMo.jl/previews/PR72/assets/falbekk.-_AwG_fs.jpeg",u="/BattMo.jl/previews/PR72/assets/kgkqxba.D6e3qxD3.jpeg",p="/BattMo.jl/previews/PR72/assets/lmsbcmg.DuuWiUc2.jpeg",b=JSON.parse('{"title":"Gradient-based parameter calibration of a lithium-ion battery model","description":"","frontmatter":{},"headers":[],"relativePath":"examples/example_calibration.md","filePath":"examples/example_calibration.md","lastUpdated":null}'),c={name:"examples/example_calibration.md"},h={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},d={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.663ex"},xmlns:"http://www.w3.org/2000/svg",width:"15.67ex",height:"2.55ex",role:"img",focusable:"false",viewBox:"0 -833.9 6926.1 1127.1","aria-hidden":"true"},g={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},k={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.357ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.059ex",height:"1.902ex",role:"img",focusable:"false",viewBox:"0 -683 910 840.8","aria-hidden":"true"},C={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},F={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.65ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.969ex",height:"2.195ex",role:"img",focusable:"false",viewBox:"0 -683 2196.2 970.2","aria-hidden":"true"},f={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},D={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"0.781ex",height:"1.52ex",role:"img",focusable:"false",viewBox:"0 -661 345 672","aria-hidden":"true"};function y(m,a,V,T,I,_){return l(),t("div",null,[a[13]||(a[13]=s(`<h1 id="Gradient-based-parameter-calibration-of-a-lithium-ion-battery-model" tabindex="-1">Gradient-based parameter calibration of a lithium-ion battery model <a class="header-anchor" href="#Gradient-based-parameter-calibration-of-a-lithium-ion-battery-model" aria-label="Permalink to &quot;Gradient-based parameter calibration of a lithium-ion battery model {#Gradient-based-parameter-calibration-of-a-lithium-ion-battery-model}&quot;">​</a></h1><p>This example demonstrates how to calibrate a lithium-ion battery against data model using BattMo.jl. The example uses a two-step calibration process:</p><ol><li><p>We first calibrate the model against a 0.5C discharge curve (adjusting stoichiometric coefficients and maximum concentration in the active material)</p></li><li><p>We then calibrate the model against a 2.0C discharge curve (adjusting reaction rate constants and diffusion coefficients in the active material)</p></li></ol><p>Finally, we compare the results of the calibrated model against the experimental data for discharge rates of 0.5C, 1.0C, and 2.0C.</p><h2 id="Load-packages-and-set-up-helper-functions" tabindex="-1">Load packages and set up helper functions <a class="header-anchor" href="#Load-packages-and-set-up-helper-functions" aria-label="Permalink to &quot;Load packages and set up helper functions {#Load-packages-and-set-up-helper-functions}&quot;">​</a></h2><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BattMo, Jutul</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CSV</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrames</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLMakie</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_tV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [state[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:Control</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:Controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:states</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	V </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [state[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:Control</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:Voltage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:states</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (t, V)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_tV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x[:, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], x[:, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">get_tV (generic function with 2 methods)</span></span></code></pre></div><h2 id="Load-the-experimental-data-and-set-up-a-base-case" tabindex="-1">Load the experimental data and set up a base case <a class="header-anchor" href="#Load-the-experimental-data-and-set-up-a-base-case" aria-label="Permalink to &quot;Load the experimental data and set up a base case {#Load-the-experimental-data-and-set-up-a-base-case}&quot;">​</a></h2><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">battmo_base </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> normpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">joinpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pathof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BattMo) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> splitdir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> first, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;..&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exdata </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> joinpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(battmo_base, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;examples&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example_data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df_05 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CSV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">joinpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(exdata, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Xu_2015_voltageCurve_05C.csv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), DataFrame)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df_1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CSV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">joinpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(exdata, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Xu_2015_voltageCurve_1C.csv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), DataFrame)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df_2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CSV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">joinpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(exdata, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Xu_2015_voltageCurve_2C.csv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), DataFrame)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dfs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [df_05, df_1, df_2]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cell_parameters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> load_cell_parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; from_default_set </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Xu2015&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cycling_protocol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> load_cycling_protocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; from_default_set </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;CCDischarge&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cycling_protocol[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;LowerVoltageLimit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.25</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LithiumIonBattery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cycling_protocol[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DRate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sim </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, cell_parameters, cycling_protocol)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">output0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sim)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t0, V0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> get_tV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output0)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t_exp_05, V_exp_05 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> get_tV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df_05)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t_exp_1, V_exp_1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> get_tV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df_1)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Figure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ax </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Axis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fig[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;CRate = 0.5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, xlabel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Time / s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ylabel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Voltage / V&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lines!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ax, t0, V0, label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Base case&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lines!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ax, t_exp_05, V_exp_05, label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Experimental data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">axislegend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :lb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig</span></span></code></pre></div><p><img src="`+o+'" alt=""></p><h2 id="Set-up-the-first-calibration" tabindex="-1">Set up the first calibration <a class="header-anchor" href="#Set-up-the-first-calibration" aria-label="Permalink to &quot;Set up the first calibration {#Set-up-the-first-calibration}&quot;">​</a></h2><p>We select the following parameters to calibrate:</p><ul><li><p>&quot;StoichiometricCoefficientAtSOC100&quot; at both electrodes</p></li><li><p>&quot;StoichiometricCoefficientAtSOC0&quot; at both electrodes</p></li><li><p>&quot;MaximumConcentration&quot; of both electrodes</p></li></ul>',13)),e("p",null,[a[8]||(a[8]=i("We also set bounds for these parameters to ensure they remain physically meaningful and possible to simulate. The objective function is the sum of squares: ",-1)),e("mjx-container",h,[(l(),t("svg",d,[...a[0]||(a[0]=[s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munder"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1089,-285.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(1383,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(1772,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(2904.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(3904.3,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(616,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1038,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1541,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1819,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="msup" transform="translate(6100.5,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(422,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g></g></g></g>',1)])])),a[1]||(a[1]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("munder",null,[e("mo",{"data-mjx-texclass":"OP"},"∑"),e("mi",null,"i")]),e("mo",{stretchy:"false"},"("),e("msub",null,[e("mi",null,"V"),e("mi",null,"i")]),e("mo",null,"−"),e("msub",null,[e("mi",null,"V"),e("mrow",{"data-mjx-texclass":"ORD"},[e("mi",null,"e"),e("mi",null,"x"),e("mi",null,"p"),e("mo",null,","),e("mi",null,"i")])]),e("msup",null,[e("mo",{stretchy:"false"},")"),e("mn",null,"2")])])],-1))]),a[9]||(a[9]=i(", where ",-1)),e("mjx-container",g,[(l(),t("svg",k,[...a[2]||(a[2]=[s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g></g></g>',1)])])),a[3]||(a[3]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("msub",null,[e("mi",null,"V"),e("mi",null,"i")])])],-1))]),a[10]||(a[10]=i(" is the voltage from the model and ",-1)),e("mjx-container",C,[(l(),t("svg",F,[...a[4]||(a[4]=[s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(616,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1038,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1541,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1819,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g></g></g></g>',1)])])),a[5]||(a[5]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("msub",null,[e("mi",null,"V"),e("mrow",{"data-mjx-texclass":"ORD"},[e("mi",null,"e"),e("mi",null,"x"),e("mi",null,"p"),e("mo",null,","),e("mi",null,"i")])])])],-1))]),a[11]||(a[11]=i(" is the voltage from the experimental data at step ",-1)),e("mjx-container",f,[(l(),t("svg",D,[...a[6]||(a[6]=[e("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[e("g",{"data-mml-node":"math"},[e("g",{"data-mml-node":"mi"},[e("path",{"data-c":"1D456",d:"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])],-1)])])),a[7]||(a[7]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("mi",null,"i")])],-1))]),a[12]||(a[12]=i(".",-1))]),a[14]||(a[14]=s(`<p>We print the setup as a table to give the user the opportunity to review the setup before calibration starts.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vc05 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> VoltageCalibration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t_exp_05, V_exp_05, sim)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">free_calibration_parameter!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc05,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;NegativeElectrode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ActiveMaterial&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;StoichiometricCoefficientAtSOC100&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	lower_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, upper_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">free_calibration_parameter!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc05,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PositiveElectrode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ActiveMaterial&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;StoichiometricCoefficientAtSOC100&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	lower_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, upper_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">VoltageCalibration([357.76627218934914, 715.9763313609469, 1074.1863905325445, 1432.396449704142, 1790.6065088757396, 2148.816568047337, 2507.0266272189347, 2877.5887573964496, 3223.44674556213, 3594.0088757396447, 3952.2189349112427, 4310.42899408284, 4668.639053254437, 5026.8491124260345, 5385.059171597633, 5743.2692307692305, 6101.479289940828, 6472.041420118343, 6817.899408284024, 7188.461538461537], [3.2943262673632967, 3.2638600156322126, 3.2518999695748874, 3.2446281622882482, 3.246486083133996, 3.245753135185418, 3.246253934281757, 3.2472569925301102, 3.2356583102522136, 3.2351808720466657, 3.2359284205519883, 3.237169467875278, 3.227800290612279, 3.2273140920726844, 3.2184384136276525, 3.217458716270091, 3.1992065602836877, 3.177878797019038, 2.8807910485472883, 2.179051790010771], Simulation(true, LithiumIonBattery(&quot;Setup object for a P2D lithium-ion model&quot;, {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;ButlerVolmer&quot; =&gt; &quot;Standard&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;RampUp&quot; =&gt; &quot;Sinusoidal&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Metadata&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Description&quot; =&gt; &quot;Default model settings for a P2D simulation including a current ramp up, excluding current collectors and SEI effects.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Title&quot; =&gt; &quot;P2D&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;PotentialFlowDiscretization&quot; =&gt; &quot;GeneralAD&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;TransportInSolid&quot; =&gt; &quot;FullDiffusion&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;ModelFramework&quot; =&gt; &quot;P2D&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, true, MultiModel{:IntercalationBattery, JutulStorage{Nothing}, Vector{Jutul.CrossTermPair}, Nothing, DefaultContext, Dict{Symbol, Int64}}(JutulStorage{Nothing}(OrderedCollections.OrderedDict{Symbol, Any}(:NeAm =&gt; SimulationModel{DiscretizedDomain{DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}, @NamedTuple{flow::PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}}, Dict{JutulEntity, Int64}, Jutul.TrivialGlobalMap}, ActiveMaterial{nothing, BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}, JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Int64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_graphite_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}, Dict{Any, Any}}, FullyImplicitFormulation, DefaultContext}(DiscretizedDomain with DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19]), Jutul.IndirectionMap{Int64}([2, 13, 35, 24, 3, 14, 36, 25, 4, 15, 37, 26, 5, 16, 38, 27, 6, 17, 39, 28, 7, 18, 40, 29, 8, 19, 41, 30, 9, 20, 42, 31, 10, 21, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([2, 3, 4, 23, 24, 5, 6, 25, 26, 7, 8, 27, 28, 9, 10, 29, 30, 11, 12, 31, 32, 13, 14, 33, 34, 15, 16, 35, 36, 17, 18, 37, 38, 19, 20, 39, 40, 1, 21, 22, 41, 42], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 43]), Jutul.IndirectionMap{Int64}([11, 22, 44, 33, 23, 34, 12, 1, 1, 2, 24, 23, 34, 35, 13, 12, 2, 3, 25, 24, 35, 36, 14, 13, 3, 4, 26, 25, 36, 37, 15, 14, 4, 5, 27, 26, 37, 38, 16, 15, 5, 6, 28, 27, 38, 39, 17, 16, 6, 7, 29, 28, 39, 40, 18, 17, 7, 8, 30, 29, 40, 41, 19, 18, 8, 9, 31, 30, 41, 42, 20, 19, 9, 10, 32, 31, 42, 43, 21, 20, 10, 11, 33, 32, 43, 44, 22, 21, 1, 12, 13, 2, 24, 35, 34, 23, 2, 13, 14, 3, 25, 36, 35, 24, 3, 14, 15, 4, 26, 37, 36, 25, 4, 15, 16, 5, 27, 38, 37, 26, 5, 16, 17, 6, 28, 39, 38, 27, 6, 17, 18, 7, 29, 40, 39, 28, 7, 18, 19, 8, 30, 41, 40, 29, 8, 19, 20, 9, 31, 42, 41, 30, 9, 20, 21, 10, 32, 43, 42, 31, 10, 21, 22, 11, 33, 44, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169]), [10, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]), StaticArraysCore.SVector{3, Float64}[[0.0, 0.0, 0.0], [5.899999999999999e-6, 0.0, 0.0], [1.1799999999999999e-5, 0.0, 0.0], [1.7699999999999997e-5, 0.0, 0.0], [2.3599999999999998e-5, 0.0, 0.0], [2.95e-5, 0.0, 0.0], [3.54e-5, 0.0, 0.0], [4.13e-5, 0.0, 0.0], [4.72e-5, 0.0, 0.0], [5.31e-5, 0.0, 0.0], [5.9000000000000004e-5, 0.0, 0.0], [0.0, 0.007035, 0.0], [5.899999999999999e-6, 0.007035, 0.0], [1.1799999999999999e-5, 0.007035, 0.0], [1.7699999999999997e-5, 0.007035, 0.0], [2.3599999999999998e-5, 0.007035, 0.0], [2.95e-5, 0.007035, 0.0], [3.54e-5, 0.007035, 0.0], [4.13e-5, 0.007035, 0.0], [4.72e-5, 0.007035, 0.0], [5.31e-5, 0.007035, 0.0], [5.9000000000000004e-5, 0.007035, 0.0], [0.0, 0.0, 1.0], [5.899999999999999e-6, 0.0, 1.0], [1.1799999999999999e-5, 0.0, 1.0], [1.7699999999999997e-5, 0.0, 1.0], [2.3599999999999998e-5, 0.0, 1.0], [2.95e-5, 0.0, 1.0], [3.54e-5, 0.0, 1.0], [4.13e-5, 0.0, 1.0], [4.72e-5, 0.0, 1.0], [5.31e-5, 0.0, 1.0], [5.9000000000000004e-5, 0.0, 1.0], [0.0, 0.007035, 1.0], [5.899999999999999e-6, 0.007035, 1.0], [1.1799999999999999e-5, 0.007035, 1.0], [1.7699999999999997e-5, 0.007035, 1.0], [2.3599999999999998e-5, 0.007035, 1.0], [2.95e-5, 0.007035, 1.0], [3.54e-5, 0.007035, 1.0], [4.13e-5, 0.007035, 1.0], [4.72e-5, 0.007035, 1.0], [5.31e-5, 0.007035, 1.0], [5.9000000000000004e-5, 0.007035, 1.0]], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 42)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 18)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 10)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 9)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 42</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 18</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 9</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryDirichletFaces() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 3 4 5 6 7 8 9; 2 3 4 5 6 7 8 9 10], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0], Faces()), :face_centroids =&gt; ([5.8999999999999986e-6 1.1799999999999997e-5 1.7699999999999997e-5 2.3599999999999994e-5 2.95e-5 3.54e-5 4.13e-5 4.7199999999999995e-5 5.3099999999999996e-5; 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175; 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5], Faces()), :cell_centroids =&gt; ([2.9499999999999993e-6 8.849999999999998e-6 1.475e-5 2.0649999999999997e-5 2.6549999999999988e-5 3.2449999999999996e-5 3.834999999999999e-5 4.425000000000001e-5 5.014999999999999e-5 5.605000000000001e-5; 0.003517499999999998 0.0035174999999999985 0.003517499999999998 0.0035174999999999985 0.0035174999999999976 0.0035175 0.0035174999999999994 0.0035174999999999994 0.0035174999999999985 0.0035175; 0.5 0.5 0.49999999999999983 0.5 0.49999999999999983 0.5 0.5 0.5 0.5 0.5], Cells()), :volumes =&gt; ([4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999998e-6, 5.899999999999998e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.150649999999998e-8, 4.150649999999998e-8, 4.150650000000001e-8, 4.150650000000001e-8, 4.150650000000001e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8], BoundaryFaces()), :boundary_centroids =&gt; ([5.9000000000000004e-5 0.0 2.9499999999999993e-6 2.9499999999999993e-6 8.85e-6 8.85e-6 1.4749999999999996e-5 1.4749999999999996e-5 2.0649999999999997e-5 2.0649999999999997e-5 2.6549999999999995e-5 2.6549999999999995e-5 3.245e-5 3.245e-5 3.835e-5 3.835e-5 4.425e-5 4.425e-5 5.015e-5 5.015e-5 5.605000000000001e-5 5.605000000000001e-5 2.9499999999999997e-6 2.9499999999999997e-6 8.849999999999998e-6 8.849999999999998e-6 1.475e-5 1.4749999999999996e-5 2.0649999999999994e-5 2.0649999999999994e-5 2.6549999999999998e-5 2.655e-5 3.245e-5 3.245e-5 3.8350000000000004e-5 3.8350000000000004e-5 4.4250000000000005e-5 4.4250000000000005e-5 5.0150000000000006e-5 5.0150000000000006e-5 5.605000000000001e-5 5.605000000000001e-5; 0.0035175 0.0035175 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0035175 0.0035175 0.0035175 0.0035175 0.0035174999999999994 0.0035174999999999994 0.0035175 0.0035175 0.0035175 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175 0.0035175 0.0035175 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0], BoundaryFaces()), :boundary_normals =&gt; ([1.0 -1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0], BoundaryFaces()), :boundary_neighbors =&gt; ([10, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], BoundaryFaces()), :trans =&gt; ([1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294], Faces()), :halfTrans =&gt; ([2384.745762711865, 2384.7457627118647, 2384.745762711865, 2384.7457627118624, 2384.745762711866, 2384.745762711864, 2384.745762711866, 2384.7457627118692, 2384.7457627118556, 2384.745762711866, 2384.7457627118615, 2384.745762711872, 2384.7457627118556, 2384.7457627118556, 2384.745762711878, 2384.745762711866, 2384.7457627118615, 2384.7457627118556], HalfFaces()), :halftransfaces =&gt; ([2384.745762711865 2384.745762711865 2384.745762711866 2384.745762711866 2384.7457627118556 2384.7457627118615 2384.7457627118556 2384.745762711878 2384.7457627118615; 2384.7457627118647 2384.7457627118624 2384.745762711864 2384.7457627118692 2384.745762711866 2384.745762711872 2384.7457627118556 2384.745762711866 2384.7457627118556], Faces()), :bcTrans =&gt; ([2384.745762711866, 2384.745762711865, 0.0016773276474769021, 0.0016773276474769004, 0.0016773276474769017, 0.0016773276474769004, 0.0016773276474769015, 0.0016773276474769, 0.0016773276474769021, 0.0016773276474769006, 0.0016773276474769028, 0.0016773276474769002, 0.0016773276474769017, 0.001677327647476901, 0.001677327647476902, 0.001677327647476901, 0.001677327647476902, 0.001677327647476901, 0.0016773276474769021, 0.0016773276474769006, 0.0016773276474769017, 0.001677327647476901, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999992e-8, 8.301300000000002e-8, 8.301300000000002e-8, 8.301300000000004e-8, 8.301299999999996e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8], BoundaryFaces()), :bcDirHalfTrans =&gt; ([2384.745762711865], BoundaryDirichletFaces()), :bcDirCells =&gt; ([1], BoundaryDirichletFaces()), :bcDirInds =&gt; ([1], BoundaryDirichletFaces()), :volumeFraction =&gt; ([0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001], Cells()))) and discretizations for flow</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">, ActiveMaterial{nothing, BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}, JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Int64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_graphite_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}, Dict{Any, Any}}(JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Int64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_graphite_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}((volume_fraction = 0.7000000000000001, volume_fractions = [1.0, 0.0, 0.0], effective_density = 1862, n_charge_carriers = 1, maximum_concentration = 31540, volumetric_surface_area = 142373, theta0 = 0.001, theta100 = 0.51873811, activation_energy_of_reaction = 4000, setting_temperature_dependence = nothing, setting_butler_volmer = &quot;Standard&quot;, ecd_funcconstant = true, reaction_rate_constant_func = 1.764e-11, ocp_func = BattMo.open_circuit_potential_graphite_Xu_2015, diff_funcconstant = true, diff_func = 3.9e-14)), BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}((N = 10, rp = 1.475e-5, hT = [0.0, 3.707079331235956e-5, 0.00014828317324943824, 0.00033363713981123596, 0.0005931326929977529, 0.000926769832808989, 0.0013345485592449438, 0.001816468872305618, 0.0023725307719910118, 0.003002734258301124, 0.003707079331235956], D = 3.9e-14, div = [(1, 1, 1), (2, 1, -1), (2, 2, 1), (3, 2, -1), (3, 3, 1), (4, 3, -1), (4, 4, 1), (5, 4, -1), (5, 5, 1), (6, 5, -1), (6, 6, 1), (7, 6, -1), (7, 7, 1), (8, 7, -1), (8, 8, 1), (9, 8, -1), (9, 9, 1), (10, 9, -1)], vols = [1.3442024116700374e-17, 9.409416881690261e-17, 2.5539845821730693e-16, 4.973548923179139e-16, 8.19963471118723e-16, 1.2232241946197326e-15, 1.7071370628209474e-15, 2.2717020757223645e-15, 2.9169192333239812e-15, 3.642788535625803e-15])), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), DefaultContext(EquationMajorLayout(false), 9223372036854775807, 1), FullyImplicitFormulation(), DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19]), Jutul.IndirectionMap{Int64}([2, 13, 35, 24, 3, 14, 36, 25, 4, 15  …  41, 30, 9, 20, 42, 31, 10, 21, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([2, 3, 4, 23, 24, 5, 6, 25, 26, 7  …  38, 19, 20, 39, 40, 1, 21, 22, 41, 42], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 43]), Jutul.IndirectionMap{Int64}([11, 22, 44, 33, 23, 34, 12, 1, 1, 2  …  42, 31, 10, 21, 22, 11, 33, 44, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37  …  133, 137, 141, 145, 149, 153, 157, 161, 165, 169]), [10, 1, 1, 1, 2, 2, 3, 3, 4, 4  …  6, 6, 7, 7, 8, 8, 9, 9, 10, 10]), StaticArraysCore.SVector{3, Float64}[[0.0, 0.0, 0.0], [5.899999999999999e-6, 0.0, 0.0], [1.1799999999999999e-5, 0.0, 0.0], [1.7699999999999997e-5, 0.0, 0.0], [2.3599999999999998e-5, 0.0, 0.0], [2.95e-5, 0.0, 0.0], [3.54e-5, 0.0, 0.0], [4.13e-5, 0.0, 0.0], [4.72e-5, 0.0, 0.0], [5.31e-5, 0.0, 0.0]  …  [5.899999999999999e-6, 0.007035, 1.0], [1.1799999999999999e-5, 0.007035, 1.0], [1.7699999999999997e-5, 0.007035, 1.0], [2.3599999999999998e-5, 0.007035, 1.0], [2.95e-5, 0.007035, 1.0], [3.54e-5, 0.007035, 1.0], [4.13e-5, 0.007035, 1.0], [4.72e-5, 0.007035, 1.0], [5.31e-5, 0.007035, 1.0], [5.9000000000000004e-5, 0.007035, 1.0]], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, -1  …  -33, -34, -35, -36, -37, -38, -39, -40, -41, -42], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 42)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 18)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 10)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 9)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 42</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 18</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 9</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryDirichletFaces() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 … 8 9; 2 3 … 9 10], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 … 1.0 1.0; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0], Faces()), :face_centroids =&gt; ([5.8999999999999986e-6 1.1799999999999997e-5 … 4.7199999999999995e-5 5.3099999999999996e-5; 0.0035175 0.0035175 … 0.0035175 0.0035175; 0.5 0.5 … 0.5 0.5], Faces()), :cell_centroids =&gt; ([2.9499999999999993e-6 8.849999999999998e-6 … 5.014999999999999e-5 5.605000000000001e-5; 0.003517499999999998 0.0035174999999999985 … 0.0035174999999999985 0.0035175; 0.5 0.5 … 0.5 0.5], Cells()), :volumes =&gt; ([4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999998e-6, 5.899999999999998e-6, 5.900000000000001e-6, 5.900000000000001e-6  …  4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8], BoundaryFaces()), :boundary_centroids =&gt; ([5.9000000000000004e-5 0.0 … 5.605000000000001e-5 5.605000000000001e-5; 0.0035175 0.0035175 … 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 … 0.0 1.0], BoundaryFaces())…)), OrderedCollections.OrderedDict{Symbol, Any}(:Voltage =&gt; Voltage(), :ParticleConcentration =&gt; BattMo.ParticleConcentration(), :SurfaceConcentration =&gt; BattMo.SurfaceConcentration()), OrderedCollections.OrderedDict{Symbol, Any}(:Charge =&gt; Charge(), :OpenCircuitPotential =&gt; BattMo.OpenCircuitPotential(), :ReactionRateConstant =&gt; BattMo.ReactionRateConstant(), :SolidDiffFlux =&gt; BattMo.SolidDiffFlux(), :DiffusionCoefficient =&gt; BattMo.DiffusionCoefficient()), OrderedCollections.OrderedDict{Symbol, Any}(:ECTransmissibilities =&gt; BattMo.ECTransmissibilities(), :Volume =&gt; BattMo.Volume(), :Temperature =&gt; Temperature(), :Conductivity =&gt; BattMo.Conductivity(), :VolumeFraction =&gt; BattMo.VolumeFraction(), :BoundaryVoltage =&gt; BoundaryPotential{:Voltage}()), OrderedCollections.OrderedDict{Symbol, Any}(:charge_conservation =&gt; ConservationLaw{:Charge, PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}, Jutul.DefaultFlux, 1}(PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}(TPFA{Int64}[TPFA{Int64}(1, 2, 1), TPFA{Int64}(2, 3, 1), TPFA{Int64}(3, 4, 1), TPFA{Int64}(4, 5, 1), TPFA{Int64}(5, 6, 1), TPFA{Int64}(6, 7, 1), TPFA{Int64}(7, 8, 1), TPFA{Int64}(8, 9, 1), TPFA{Int64}(9, 10, 1)], SPU{Int64}[SPU{Int64}(1, 2), SPU{Int64}(2, 3), SPU{Int64}(3, 4), SPU{Int64}(4, 5), SPU{Int64}(5, 6), SPU{Int64}(6, 7), SPU{Int64}(7, 8), SPU{Int64}(8, 9), SPU{Int64}(9, 10)], (cells = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9], faces = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], face_pos = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19], face_sign = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1])), Jutul.DefaultFlux()), :mass_conservation =&gt; SolidMassCons(), :solid_diffusion_bc =&gt; BattMo.SolidDiffusionBc()), [:Voltage, :ParticleConcentration, :SurfaceConcentration, :Charge, :OpenCircuitPotential, :Temperature, :ReactionRateConstant, :DiffusionCoefficient], OrderedCollections.OrderedDict{Symbol, Any}()), :Elyte =&gt; SimulationModel{DiscretizedDomain{DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}, @NamedTuple{flow::PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}}, Dict{JutulEntity, Int64}, Jutul.TrivialGlobalMap}, Electrolyte{Dict{Any, Any}}, FullyImplicitFormulation, DefaultContext}(DiscretizedDomain with DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 45]), Jutul.IndirectionMap{Int64}([2, 26, 74, 50, 3, 27, 75, 51, 4, 28, 76, 52, 5, 29, 77, 53, 6, 30, 78, 54, 7, 31, 79, 55, 8, 32, 80, 56, 9, 33, 81, 57, 10, 34, 82, 58, 11, 35, 83, 59, 12, 36, 84, 60, 13, 37, 85, 61, 14, 38, 86, 62, 15, 39, 87, 63, 16, 40, 88, 64, 17, 41, 89, 65, 18, 42, 90, 66, 19, 43, 91, 67, 20, 44, 92, 68, 21, 45, 93, 69, 22, 46, 94, 70, 23, 47, 95, 71], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([1, 3, 4, 49, 50, 5, 6, 51, 52, 7, 8, 53, 54, 9, 10, 55, 56, 11, 12, 57, 58, 13, 14, 59, 60, 15, 16, 61, 62, 17, 18, 63, 64, 19, 20, 65, 66, 21, 22, 67, 68, 23, 24, 69, 70, 25, 26, 71, 72, 27, 28, 73, 74, 29, 30, 75, 76, 31, 32, 77, 78, 33, 34, 79, 80, 35, 36, 81, 82, 37, 38, 83, 84, 39, 40, 85, 86, 41, 42, 87, 88, 43, 44, 89, 90, 45, 46, 91, 92, 2, 47, 48, 93, 94], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 95]), Jutul.IndirectionMap{Int64}([49, 73, 25, 1, 24, 48, 96, 72, 1, 2, 50, 49, 73, 74, 26, 25, 2, 3, 51, 50, 74, 75, 27, 26, 3, 4, 52, 51, 75, 76, 28, 27, 4, 5, 53, 52, 76, 77, 29, 28, 5, 6, 54, 53, 77, 78, 30, 29, 6, 7, 55, 54, 78, 79, 31, 30, 7, 8, 56, 55, 79, 80, 32, 31, 8, 9, 57, 56, 80, 81, 33, 32, 9, 10, 58, 57, 81, 82, 34, 33, 10, 11, 59, 58, 82, 83, 35, 34, 11, 12, 60, 59, 83, 84, 36, 35, 12, 13, 61, 60, 84, 85, 37, 36, 13, 14, 62, 61, 85, 86, 38, 37, 14, 15, 63, 62, 86, 87, 39, 38, 15, 16, 64, 63, 87, 88, 40, 39, 16, 17, 65, 64, 88, 89, 41, 40, 17, 18, 66, 65, 89, 90, 42, 41, 18, 19, 67, 66, 90, 91, 43, 42, 19, 20, 68, 67, 91, 92, 44, 43, 20, 21, 69, 68, 92, 93, 45, 44, 21, 22, 70, 69, 93, 94, 46, 45, 22, 23, 71, 70, 94, 95, 47, 46, 23, 24, 72, 71, 95, 96, 48, 47, 1, 25, 26, 2, 50, 74, 73, 49, 2, 26, 27, 3, 51, 75, 74, 50, 3, 27, 28, 4, 52, 76, 75, 51, 4, 28, 29, 5, 53, 77, 76, 52, 5, 29, 30, 6, 54, 78, 77, 53, 6, 30, 31, 7, 55, 79, 78, 54, 7, 31, 32, 8, 56, 80, 79, 55, 8, 32, 33, 9, 57, 81, 80, 56, 9, 33, 34, 10, 58, 82, 81, 57, 10, 34, 35, 11, 59, 83, 82, 58, 11, 35, 36, 12, 60, 84, 83, 59, 12, 36, 37, 13, 61, 85, 84, 60, 13, 37, 38, 14, 62, 86, 85, 61, 14, 38, 39, 15, 63, 87, 86, 62, 15, 39, 40, 16, 64, 88, 87, 63, 16, 40, 41, 17, 65, 89, 88, 64, 17, 41, 42, 18, 66, 90, 89, 65, 18, 42, 43, 19, 67, 91, 90, 66, 19, 43, 44, 20, 68, 92, 91, 67, 20, 44, 45, 21, 69, 93, 92, 68, 21, 45, 46, 22, 70, 94, 93, 69, 22, 46, 47, 23, 71, 95, 94, 70, 23, 47, 48, 24, 72, 96, 95, 71], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177, 181, 185, 189, 193, 197, 201, 205, 209, 213, 217, 221, 225, 229, 233, 237, 241, 245, 249, 253, 257, 261, 265, 269, 273, 277, 281, 285, 289, 293, 297, 301, 305, 309, 313, 317, 321, 325, 329, 333, 337, 341, 345, 349, 353, 357, 361, 365, 369, 373, 377]), [1, 23, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23]), StaticArraysCore.SVector{3, Float64}[[0.0, 0.0, 0.0], [5.899999999999999e-6, 0.0, 0.0], [1.1799999999999999e-5, 0.0, 0.0], [1.7699999999999997e-5, 0.0, 0.0], [2.3599999999999998e-5, 0.0, 0.0], [2.95e-5, 0.0, 0.0], [3.54e-5, 0.0, 0.0], [4.13e-5, 0.0, 0.0], [4.72e-5, 0.0, 0.0], [5.31e-5, 0.0, 0.0], [5.9000000000000004e-5, 0.0, 0.0], [6.566666666666667e-5, 0.0, 0.0], [7.233333333333333e-5, 0.0, 0.0], [7.9e-5, 0.0, 0.0], [8.82e-5, 0.0, 0.0], [9.740000000000001e-5, 0.0, 0.0], [0.00010660000000000002, 0.0, 0.0], [0.00011580000000000002, 0.0, 0.0], [0.00012500000000000003, 0.0, 0.0], [0.00013420000000000004, 0.0, 0.0], [0.00014340000000000004, 0.0, 0.0], [0.00015260000000000005, 0.0, 0.0], [0.00016180000000000006, 0.0, 0.0], [0.00017100000000000006, 0.0, 0.0], [0.0, 0.007035, 0.0], [5.899999999999999e-6, 0.007035, 0.0], [1.1799999999999999e-5, 0.007035, 0.0], [1.7699999999999997e-5, 0.007035, 0.0], [2.3599999999999998e-5, 0.007035, 0.0], [2.95e-5, 0.007035, 0.0], [3.54e-5, 0.007035, 0.0], [4.13e-5, 0.007035, 0.0], [4.72e-5, 0.007035, 0.0], [5.31e-5, 0.007035, 0.0], [5.9000000000000004e-5, 0.007035, 0.0], [6.566666666666667e-5, 0.007035, 0.0], [7.233333333333333e-5, 0.007035, 0.0], [7.9e-5, 0.007035, 0.0], [8.82e-5, 0.007035, 0.0], [9.740000000000001e-5, 0.007035, 0.0], [0.00010660000000000002, 0.007035, 0.0], [0.00011580000000000002, 0.007035, 0.0], [0.00012500000000000003, 0.007035, 0.0], [0.00013420000000000004, 0.007035, 0.0], [0.00014340000000000004, 0.007035, 0.0], [0.00015260000000000005, 0.007035, 0.0], [0.00016180000000000006, 0.007035, 0.0], [0.00017100000000000006, 0.007035, 0.0], [0.0, 0.0, 1.0], [5.899999999999999e-6, 0.0, 1.0], [1.1799999999999999e-5, 0.0, 1.0], [1.7699999999999997e-5, 0.0, 1.0], [2.3599999999999998e-5, 0.0, 1.0], [2.95e-5, 0.0, 1.0], [3.54e-5, 0.0, 1.0], [4.13e-5, 0.0, 1.0], [4.72e-5, 0.0, 1.0], [5.31e-5, 0.0, 1.0], [5.9000000000000004e-5, 0.0, 1.0], [6.566666666666667e-5, 0.0, 1.0], [7.233333333333333e-5, 0.0, 1.0], [7.9e-5, 0.0, 1.0], [8.82e-5, 0.0, 1.0], [9.740000000000001e-5, 0.0, 1.0], [0.00010660000000000002, 0.0, 1.0], [0.00011580000000000002, 0.0, 1.0], [0.00012500000000000003, 0.0, 1.0], [0.00013420000000000004, 0.0, 1.0], [0.00014340000000000004, 0.0, 1.0], [0.00015260000000000005, 0.0, 1.0], [0.00016180000000000006, 0.0, 1.0], [0.00017100000000000006, 0.0, 1.0], [0.0, 0.007035, 1.0], [5.899999999999999e-6, 0.007035, 1.0], [1.1799999999999999e-5, 0.007035, 1.0], [1.7699999999999997e-5, 0.007035, 1.0], [2.3599999999999998e-5, 0.007035, 1.0], [2.95e-5, 0.007035, 1.0], [3.54e-5, 0.007035, 1.0], [4.13e-5, 0.007035, 1.0], [4.72e-5, 0.007035, 1.0], [5.31e-5, 0.007035, 1.0], [5.9000000000000004e-5, 0.007035, 1.0], [6.566666666666667e-5, 0.007035, 1.0], [7.233333333333333e-5, 0.007035, 1.0], [7.9e-5, 0.007035, 1.0], [8.82e-5, 0.007035, 1.0], [9.740000000000001e-5, 0.007035, 1.0], [0.00010660000000000002, 0.007035, 1.0], [0.00011580000000000002, 0.007035, 1.0], [0.00012500000000000003, 0.007035, 1.0], [0.00013420000000000004, 0.007035, 1.0], [0.00014340000000000004, 0.007035, 1.0], [0.00015260000000000005, 0.007035, 1.0], [0.00016180000000000006, 0.007035, 1.0], [0.00017100000000000006, 0.007035, 1.0]], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 94)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 44)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 23)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 22)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 94</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 44</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 23</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 22</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22; 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0], Faces()), :face_centroids =&gt; ([5.8999999999999986e-6 1.1799999999999997e-5 1.7699999999999997e-5 2.3599999999999994e-5 2.95e-5 3.54e-5 4.13e-5 4.7199999999999995e-5 5.3099999999999996e-5 5.9000000000000004e-5 6.566666666666667e-5 7.233333333333333e-5 7.9e-5 8.82e-5 9.740000000000001e-5 0.0001066 0.00011580000000000002 0.00012500000000000003 0.00013420000000000004 0.00014340000000000004 0.00015260000000000005 0.00016180000000000008; 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175; 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5], Faces()), :cell_centroids =&gt; ([2.9499999999999993e-6 8.849999999999998e-6 1.475e-5 2.0649999999999997e-5 2.6549999999999988e-5 3.2449999999999996e-5 3.834999999999999e-5 4.425000000000001e-5 5.014999999999999e-5 5.605000000000001e-5 6.233333333333334e-5 6.900000000000004e-5 7.566666666666664e-5 8.360000000000001e-5 9.280000000000005e-5 0.000102 0.0001112 0.00012040000000000008 0.00012960000000000006 0.00013880000000000007 0.0001480000000000001 0.0001572000000000001 0.00016640000000000006; 0.003517499999999998 0.0035174999999999985 0.003517499999999998 0.0035174999999999985 0.0035174999999999976 0.0035175 0.0035174999999999994 0.0035174999999999994 0.0035174999999999985 0.0035175 0.0035175000000000007 0.0035175000000000007 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175 0.003517500000000001 0.0035174999999999994 0.0035175000000000002 0.0035174999999999994 0.0035175 0.0035175000000000002 0.0035175; 0.5 0.5 0.49999999999999983 0.5 0.49999999999999983 0.5 0.5 0.5 0.5 0.5 0.5 0.49999999999999994 0.5 0.5000000000000001 0.5000000000000002 0.5 0.5000000000000002 0.5000000000000001 0.5000000000000003 0.5 0.5 0.5 0.5], Cells()), :volumes =&gt; ([4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8, 4.6900000000000016e-8, 4.6899999999999977e-8, 4.6899999999999924e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999998e-6, 5.899999999999998e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 6.666666666666668e-6, 6.666666666666668e-6, 6.6666666666666616e-6, 6.6666666666666616e-6, 6.6666666666666616e-6, 6.6666666666666616e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.150649999999998e-8, 4.150649999999998e-8, 4.150650000000001e-8, 4.150650000000001e-8, 4.150650000000001e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.690000000000001e-8, 4.69e-8, 4.689999999999996e-8, 4.6899999999999963e-8, 4.6899999999999963e-8, 4.6899999999999963e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8], BoundaryFaces()), :boundary_centroids =&gt; ([0.0 0.00017100000000000006 2.9499999999999993e-6 2.9499999999999993e-6 8.85e-6 8.85e-6 1.4749999999999996e-5 1.4749999999999996e-5 2.0649999999999997e-5 2.0649999999999997e-5 2.6549999999999995e-5 2.6549999999999995e-5 3.245e-5 3.245e-5 3.835e-5 3.835e-5 4.425e-5 4.425e-5 5.015e-5 5.015e-5 5.605000000000001e-5 5.605000000000001e-5 6.233333333333332e-5 6.233333333333332e-5 6.9e-5 6.9e-5 7.566666666666667e-5 7.566666666666667e-5 8.36e-5 8.36e-5 9.28e-5 9.28e-5 0.00010200000000000001 0.00010200000000000001 0.0001112 0.0001112 0.00012040000000000003 0.00012040000000000003 0.00012960000000000003 0.00012960000000000003 0.00013880000000000004 0.00013880000000000004 0.00014800000000000005 0.00014800000000000005 0.00015720000000000005 0.00015720000000000005 0.00016640000000000006 0.00016640000000000006 2.9499999999999997e-6 2.9499999999999997e-6 8.849999999999998e-6 8.849999999999998e-6 1.475e-5 1.4749999999999996e-5 2.0649999999999994e-5 2.0649999999999994e-5 2.6549999999999998e-5 2.655e-5 3.245e-5 3.245e-5 3.8350000000000004e-5 3.8350000000000004e-5 4.4250000000000005e-5 4.4250000000000005e-5 5.0150000000000006e-5 5.0150000000000006e-5 5.605000000000001e-5 5.605000000000001e-5 6.233333333333332e-5 6.233333333333334e-5 6.900000000000001e-5 6.9e-5 7.566666666666667e-5 7.566666666666666e-5 8.36e-5 8.36e-5 9.28e-5 9.28e-5 0.00010200000000000001 0.00010200000000000001 0.00011120000000000003 0.00011120000000000002 0.00012040000000000001 0.00012040000000000003 0.00012960000000000003 0.00012960000000000003 0.00013880000000000004 0.00013880000000000007 0.00014800000000000005 0.00014800000000000005 0.00015720000000000003 0.00015720000000000005 0.00016640000000000006 0.00016640000000000006; 0.0035175 0.0035175 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0035175 0.0035175 0.0035175 0.0035175 0.0035174999999999994 0.0035174999999999994 0.0035175 0.0035175 0.0035175 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175 0.0035175 0.0035175 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175 0.0035175 0.0035174999999999994 0.0035175 0.0035175 0.0035175 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.49999999999999994 0.5 0.49999999999999994 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0], BoundaryFaces()), :boundary_normals =&gt; ([-1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0], BoundaryFaces()), :boundary_neighbors =&gt; ([1, 23, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23], BoundaryFaces()), :trans =&gt; ([1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294, 1119.628647214855, 1055.2499999999943, 1055.2500000000093, 886.764705882349, 764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], Faces()), :halfTrans =&gt; ([2384.745762711865, 2384.7457627118647, 2384.745762711865, 2384.7457627118624, 2384.745762711866, 2384.745762711864, 2384.745762711866, 2384.7457627118692, 2384.7457627118556, 2384.745762711866, 2384.7457627118615, 2384.745762711872, 2384.7457627118556, 2384.7457627118556, 2384.745762711878, 2384.745762711866, 2384.7457627118615, 2384.7457627118556, 2384.745762711866, 2110.5000000000014, 2110.499999999997, 2110.4999999999804, 2110.500000000023, 2110.500000000014, 2110.4999999999886, 1529.3478260869508, 1529.34782608696, 1529.3478260869417, 1529.3478260869688, 1529.34782608696, 1529.3478260869554, 1529.3478260869554, 1529.3478260869508, 1529.3478260869372, 1529.3478260869736, 1529.3478260869465, 1529.3478260869642, 1529.3478260869465, 1529.3478260869642, 1529.3478260869372, 1529.3478260869736, 1529.3478260869372, 1529.3478260869642, 1529.3478260869642], HalfFaces()), :halftransfaces =&gt; ([2384.745762711865 2384.745762711865 2384.745762711866 2384.745762711866 2384.7457627118556 2384.7457627118615 2384.7457627118556 2384.745762711878 2384.7457627118615 2384.745762711866 2110.499999999997 2110.500000000023 2110.4999999999886 1529.34782608696 1529.3478260869688 1529.3478260869554 1529.3478260869508 1529.3478260869736 1529.3478260869642 1529.3478260869642 1529.3478260869736 1529.3478260869642; 2384.7457627118647 2384.7457627118624 2384.745762711864 2384.7457627118692 2384.745762711866 2384.745762711872 2384.7457627118556 2384.745762711866 2384.7457627118556 2110.5000000000014 2110.4999999999804 2110.500000000014 1529.3478260869508 1529.3478260869417 1529.34782608696 1529.3478260869554 1529.3478260869372 1529.3478260869465 1529.3478260869465 1529.3478260869372 1529.3478260869372 1529.3478260869642], Faces()), :bcTrans =&gt; ([2384.745762711865, 1529.3478260869554, 0.0016773276474769021, 0.0016773276474769004, 0.0016773276474769017, 0.0016773276474769004, 0.0016773276474769015, 0.0016773276474769, 0.0016773276474769021, 0.0016773276474769006, 0.0016773276474769028, 0.0016773276474769002, 0.0016773276474769017, 0.001677327647476901, 0.001677327647476902, 0.001677327647476901, 0.001677327647476902, 0.001677327647476901, 0.0016773276474769021, 0.0016773276474769006, 0.0016773276474769017, 0.001677327647476901, 0.0018952854773750297, 0.0018952854773750306, 0.0018952854773750276, 0.0018952854773750286, 0.0018952854773750282, 0.0018952854773750286, 0.0026154939587775426, 0.0026154939587775435, 0.0026154939587775426, 0.0026154939587775435, 0.002615493958777543, 0.002615493958777543, 0.0026154939587775417, 0.0026154939587775435, 0.0026154939587775435, 0.0026154939587775426, 0.0026154939587775426, 0.0026154939587775435, 0.0026154939587775435, 0.0026154939587775426, 0.002615493958777543, 0.002615493958777543, 0.0026154939587775426, 0.0026154939587775435, 0.002615493958777543, 0.002615493958777543, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999992e-8, 8.301300000000002e-8, 8.301300000000002e-8, 8.301300000000004e-8, 8.301299999999996e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 9.380000000000002e-8, 9.38e-8, 9.379999999999993e-8, 9.379999999999993e-8, 9.379999999999993e-8, 9.379999999999993e-8, 1.2944400000000006e-7, 1.294440000000001e-7, 1.2944400000000003e-7, 1.2944400000000014e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000003e-7, 1.2944400000000014e-7, 1.2944400000000006e-7, 1.294440000000001e-7, 1.2944399999999998e-7, 1.294440000000002e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7], BoundaryFaces()), :volumeFraction =&gt; ([0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.4, 0.4, 0.4, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28], Cells()), :separator_volume_fraction =&gt; ([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6, 0.6, 0.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], Cells()))) and discretizations for flow</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">, Electrolyte{Dict{Any, Any}}(JutulStorage{Nothing}(OrderedCollections.OrderedDict{Symbol, Any}(:transference =&gt; 0.2594, :charge =&gt; 1, :separator_porosity =&gt; 0.4, :bruggeman =&gt; 1.5, :electrolyte_density =&gt; 1210, :separator_density =&gt; 779, :diffusivity_func =&gt; RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:c, :T), BattMo.var&quot;#_RGF_ModTag&quot;, BattMo.var&quot;#_RGF_ModTag&quot;, (0xee2235f8, 0xd04ba524, 0x244c5077, 0x15da4b3a, 0xf624324c), Expr}(quote</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">    #= none:1 =#</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">    #= none:1 =#</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    return (8.794 * 10 ^ -11 * (c / 1000) ^ 2 - 3.972 * 10 ^ -10 * (c / 1000)) + 4.862 * 10 ^ -10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">end), :conductivity_func =&gt; RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:c, :T), BattMo.var&quot;#_RGF_ModTag&quot;, BattMo.var&quot;#_RGF_ModTag&quot;, (0x6d3933d7, 0x54a514ab, 0x5fe1ef12, 0x21826394, 0xabdf6a37), Expr}(quote</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">    #= none:1 =#</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">    #= none:1 =#</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    return (0.1297 * (c / 1000) ^ 3 - 2.51 * (c / 1000) ^ 1.5) + 3.329 * (c / 1000)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">end))), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), DefaultContext(EquationMajorLayout(false), 9223372036854775807, 1), FullyImplicitFormulation(), DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5  …  18, 18, 19, 19, 20, 20, 21, 21, 22, 22], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18  …  28, 30, 32, 34, 36, 38, 40, 42, 44, 45]), Jutul.IndirectionMap{Int64}([2, 26, 74, 50, 3, 27, 75, 51, 4, 28  …  93, 69, 22, 46, 94, 70, 23, 47, 95, 71], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37  …  53, 57, 61, 65, 69, 73, 77, 81, 85, 89]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11)  …  (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([1, 3, 4, 49, 50, 5, 6, 51, 52, 7  …  90, 45, 46, 91, 92, 2, 47, 48, 93, 94], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38  …  58, 62, 66, 70, 74, 78, 82, 86, 90, 95]), Jutul.IndirectionMap{Int64}([49, 73, 25, 1, 24, 48, 96, 72, 1, 2  …  94, 70, 23, 47, 48, 24, 72, 96, 95, 71], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37  …  341, 345, 349, 353, 357, 361, 365, 369, 373, 377]), [1, 23, 1, 1, 2, 2, 3, 3, 4, 4  …  19, 19, 20, 20, 21, 21, 22, 22, 23, 23]), StaticArraysCore.SVector{3, Float64}[[0.0, 0.0, 0.0], [5.899999999999999e-6, 0.0, 0.0], [1.1799999999999999e-5, 0.0, 0.0], [1.7699999999999997e-5, 0.0, 0.0], [2.3599999999999998e-5, 0.0, 0.0], [2.95e-5, 0.0, 0.0], [3.54e-5, 0.0, 0.0], [4.13e-5, 0.0, 0.0], [4.72e-5, 0.0, 0.0], [5.31e-5, 0.0, 0.0]  …  [8.82e-5, 0.007035, 1.0], [9.740000000000001e-5, 0.007035, 1.0], [0.00010660000000000002, 0.007035, 1.0], [0.00011580000000000002, 0.007035, 1.0], [0.00012500000000000003, 0.007035, 1.0], [0.00013420000000000004, 0.007035, 1.0], [0.00014340000000000004, 0.007035, 1.0], [0.00015260000000000005, 0.007035, 1.0], [0.00016180000000000006, 0.007035, 1.0], [0.00017100000000000006, 0.007035, 1.0]], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10  …  -85, -86, -87, -88, -89, -90, -91, -92, -93, -94], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 94)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 44)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 23)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 22)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 94</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 44</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 23</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 22</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 … 21 22; 2 3 … 22 23], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035  …  0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 … 1.0 1.0; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0], Faces()), :face_centroids =&gt; ([5.8999999999999986e-6 1.1799999999999997e-5 … 0.00015260000000000005 0.00016180000000000008; 0.0035175 0.0035175 … 0.0035175 0.0035175; 0.5 0.5 … 0.5 0.5], Faces()), :cell_centroids =&gt; ([2.9499999999999993e-6 8.849999999999998e-6 … 0.0001572000000000001 0.00016640000000000006; 0.003517499999999998 0.0035174999999999985 … 0.0035175000000000002 0.0035175; 0.5 0.5 … 0.5 0.5], Cells()), :volumes =&gt; ([4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8  …  6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6  …  18, 19, 19, 20, 20, 21, 21, 22, 22, 23], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5  …  18, 18, 19, 19, 20, 20, 21, 21, 22, 22], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999998e-6, 5.899999999999998e-6, 5.900000000000001e-6, 5.900000000000001e-6  …  6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8], BoundaryFaces()), :boundary_centroids =&gt; ([0.0 0.00017100000000000006 … 0.00016640000000000006 0.00016640000000000006; 0.0035175 0.0035175 … 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 … 0.0 1.0], BoundaryFaces())…)), OrderedCollections.OrderedDict{Symbol, Any}(:Voltage =&gt; Voltage(), :Concentration =&gt; Concentration()), OrderedCollections.OrderedDict{Symbol, Any}(:Conductivity =&gt; BattMo.Conductivity(), :Diffusivity =&gt; BattMo.Diffusivity(), :DmuDc =&gt; DmuDc(), :ChemCoef =&gt; ChemCoef(), :Charge =&gt; Charge(), :Mass =&gt; Mass()), OrderedCollections.OrderedDict{Symbol, Any}(:ECTransmissibilities =&gt; BattMo.ECTransmissibilities(), :Volume =&gt; BattMo.Volume(), :Temperature =&gt; Temperature(), :BruggemanCoefficient =&gt; BattMo.BruggemanCoefficient(), :VolumeFraction =&gt; BattMo.VolumeFraction()), OrderedCollections.OrderedDict{Symbol, Any}(:charge_conservation =&gt; ConservationLaw{:Charge, PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}, Jutul.DefaultFlux, 1}(PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}(TPFA{Int64}[TPFA{Int64}(1, 2, 1), TPFA{Int64}(2, 3, 1), TPFA{Int64}(3, 4, 1), TPFA{Int64}(4, 5, 1), TPFA{Int64}(5, 6, 1), TPFA{Int64}(6, 7, 1), TPFA{Int64}(7, 8, 1), TPFA{Int64}(8, 9, 1), TPFA{Int64}(9, 10, 1), TPFA{Int64}(10, 11, 1)  …  TPFA{Int64}(13, 14, 1), TPFA{Int64}(14, 15, 1), TPFA{Int64}(15, 16, 1), TPFA{Int64}(16, 17, 1), TPFA{Int64}(17, 18, 1), TPFA{Int64}(18, 19, 1), TPFA{Int64}(19, 20, 1), TPFA{Int64}(20, 21, 1), TPFA{Int64}(21, 22, 1), TPFA{Int64}(22, 23, 1)], SPU{Int64}[SPU{Int64}(1, 2), SPU{Int64}(2, 3), SPU{Int64}(3, 4), SPU{Int64}(4, 5), SPU{Int64}(5, 6), SPU{Int64}(6, 7), SPU{Int64}(7, 8), SPU{Int64}(8, 9), SPU{Int64}(9, 10), SPU{Int64}(10, 11)  …  SPU{Int64}(13, 14), SPU{Int64}(14, 15), SPU{Int64}(15, 16), SPU{Int64}(16, 17), SPU{Int64}(17, 18), SPU{Int64}(18, 19), SPU{Int64}(19, 20), SPU{Int64}(20, 21), SPU{Int64}(21, 22), SPU{Int64}(22, 23)], (cells = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5  …  19, 18, 20, 19, 21, 20, 22, 21, 23, 22], faces = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5  …  18, 18, 19, 19, 20, 20, 21, 21, 22, 22], face_pos = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18  …  28, 30, 32, 34, 36, 38, 40, 42, 44, 45], face_sign = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1  …  1, -1, 1, -1, 1, -1, 1, -1, 1, -1])), Jutul.DefaultFlux()), :mass_conservation =&gt; ConservationLaw{:Mass, PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}, Jutul.DefaultFlux, 1}(PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}(TPFA{Int64}[TPFA{Int64}(1, 2, 1), TPFA{Int64}(2, 3, 1), TPFA{Int64}(3, 4, 1), TPFA{Int64}(4, 5, 1), TPFA{Int64}(5, 6, 1), TPFA{Int64}(6, 7, 1), TPFA{Int64}(7, 8, 1), TPFA{Int64}(8, 9, 1), TPFA{Int64}(9, 10, 1), TPFA{Int64}(10, 11, 1)  …  TPFA{Int64}(13, 14, 1), TPFA{Int64}(14, 15, 1), TPFA{Int64}(15, 16, 1), TPFA{Int64}(16, 17, 1), TPFA{Int64}(17, 18, 1), TPFA{Int64}(18, 19, 1), TPFA{Int64}(19, 20, 1), TPFA{Int64}(20, 21, 1), TPFA{Int64}(21, 22, 1), TPFA{Int64}(22, 23, 1)], SPU{Int64}[SPU{Int64}(1, 2), SPU{Int64}(2, 3), SPU{Int64}(3, 4), SPU{Int64}(4, 5), SPU{Int64}(5, 6), SPU{Int64}(6, 7), SPU{Int64}(7, 8), SPU{Int64}(8, 9), SPU{Int64}(9, 10), SPU{Int64}(10, 11)  …  SPU{Int64}(13, 14), SPU{Int64}(14, 15), SPU{Int64}(15, 16), SPU{Int64}(16, 17), SPU{Int64}(17, 18), SPU{Int64}(18, 19), SPU{Int64}(19, 20), SPU{Int64}(20, 21), SPU{Int64}(21, 22), SPU{Int64}(22, 23)], (cells = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5  …  19, 18, 20, 19, 21, 20, 22, 21, 23, 22], faces = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5  …  18, 18, 19, 19, 20, 20, 21, 21, 22, 22], face_pos = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18  …  28, 30, 32, 34, 36, 38, 40, 42, 44, 45], face_sign = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1  …  1, -1, 1, -1, 1, -1, 1, -1, 1, -1])), Jutul.DefaultFlux())), [:Voltage, :Concentration, :Charge, :Mass, :Conductivity, :Diffusivity], OrderedCollections.OrderedDict{Symbol, Any}()), :PeAm =&gt; SimulationModel{DiscretizedDomain{DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}, @NamedTuple{flow::PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}}, Dict{JutulEntity, Int64}, Jutul.TrivialGlobalMap}, ActiveMaterial{nothing, BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}, JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Float64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_lfp_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}, Dict{Any, Any}}, FullyImplicitFormulation, DefaultContext}(DiscretizedDomain with DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19]), Jutul.IndirectionMap{Int64}([2, 13, 35, 24, 3, 14, 36, 25, 4, 15, 37, 26, 5, 16, 38, 27, 6, 17, 39, 28, 7, 18, 40, 29, 8, 19, 41, 30, 9, 20, 42, 31, 10, 21, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([1, 3, 4, 23, 24, 5, 6, 25, 26, 7, 8, 27, 28, 9, 10, 29, 30, 11, 12, 31, 32, 13, 14, 33, 34, 15, 16, 35, 36, 17, 18, 37, 38, 19, 20, 39, 40, 2, 21, 22, 41, 42], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 43]), Jutul.IndirectionMap{Int64}([23, 34, 12, 1, 11, 22, 44, 33, 1, 2, 24, 23, 34, 35, 13, 12, 2, 3, 25, 24, 35, 36, 14, 13, 3, 4, 26, 25, 36, 37, 15, 14, 4, 5, 27, 26, 37, 38, 16, 15, 5, 6, 28, 27, 38, 39, 17, 16, 6, 7, 29, 28, 39, 40, 18, 17, 7, 8, 30, 29, 40, 41, 19, 18, 8, 9, 31, 30, 41, 42, 20, 19, 9, 10, 32, 31, 42, 43, 21, 20, 10, 11, 33, 32, 43, 44, 22, 21, 1, 12, 13, 2, 24, 35, 34, 23, 2, 13, 14, 3, 25, 36, 35, 24, 3, 14, 15, 4, 26, 37, 36, 25, 4, 15, 16, 5, 27, 38, 37, 26, 5, 16, 17, 6, 28, 39, 38, 27, 6, 17, 18, 7, 29, 40, 39, 28, 7, 18, 19, 8, 30, 41, 40, 29, 8, 19, 20, 9, 31, 42, 41, 30, 9, 20, 21, 10, 32, 43, 42, 31, 10, 21, 22, 11, 33, 44, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169]), [1, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]), StaticArraysCore.SVector{3, Float64}[[7.9e-5, 0.0, 0.0], [8.82e-5, 0.0, 0.0], [9.740000000000001e-5, 0.0, 0.0], [0.00010660000000000002, 0.0, 0.0], [0.00011580000000000002, 0.0, 0.0], [0.00012500000000000003, 0.0, 0.0], [0.00013420000000000004, 0.0, 0.0], [0.00014340000000000004, 0.0, 0.0], [0.00015260000000000005, 0.0, 0.0], [0.00016180000000000006, 0.0, 0.0], [0.00017100000000000006, 0.0, 0.0], [7.9e-5, 0.007035, 0.0], [8.82e-5, 0.007035, 0.0], [9.740000000000001e-5, 0.007035, 0.0], [0.00010660000000000002, 0.007035, 0.0], [0.00011580000000000002, 0.007035, 0.0], [0.00012500000000000003, 0.007035, 0.0], [0.00013420000000000004, 0.007035, 0.0], [0.00014340000000000004, 0.007035, 0.0], [0.00015260000000000005, 0.007035, 0.0], [0.00016180000000000006, 0.007035, 0.0], [0.00017100000000000006, 0.007035, 0.0], [7.9e-5, 0.0, 1.0], [8.82e-5, 0.0, 1.0], [9.740000000000001e-5, 0.0, 1.0], [0.00010660000000000002, 0.0, 1.0], [0.00011580000000000002, 0.0, 1.0], [0.00012500000000000003, 0.0, 1.0], [0.00013420000000000004, 0.0, 1.0], [0.00014340000000000004, 0.0, 1.0], [0.00015260000000000005, 0.0, 1.0], [0.00016180000000000006, 0.0, 1.0], [0.00017100000000000006, 0.0, 1.0], [7.9e-5, 0.007035, 1.0], [8.82e-5, 0.007035, 1.0], [9.740000000000001e-5, 0.007035, 1.0], [0.00010660000000000002, 0.007035, 1.0], [0.00011580000000000002, 0.007035, 1.0], [0.00012500000000000003, 0.007035, 1.0], [0.00013420000000000004, 0.007035, 1.0], [0.00014340000000000004, 0.007035, 1.0], [0.00015260000000000005, 0.007035, 1.0], [0.00016180000000000006, 0.007035, 1.0], [0.00017100000000000006, 0.007035, 1.0]], nothing, [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 42)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 18)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 10)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 9)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 42</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 18</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 9</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 3 4 5 6 7 8 9; 2 3 4 5 6 7 8 9 10], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0], Faces()), :face_centroids =&gt; ([8.82e-5 9.740000000000001e-5 0.0001066 0.00011580000000000002 0.00012500000000000003 0.00013420000000000004 0.00014340000000000004 0.00015260000000000005 0.00016180000000000008; 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175; 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5], Faces()), :cell_centroids =&gt; ([8.360000000000001e-5 9.280000000000005e-5 0.000102 0.0001112 0.00012040000000000008 0.00012960000000000006 0.00013880000000000007 0.0001480000000000001 0.0001572000000000001 0.00016640000000000006; 0.0035175000000000002 0.0035175000000000002 0.0035175 0.003517500000000001 0.0035174999999999994 0.0035175000000000002 0.0035174999999999994 0.0035175 0.0035175000000000002 0.0035175; 0.5000000000000001 0.5000000000000002 0.5 0.5000000000000002 0.5000000000000001 0.5000000000000003 0.5 0.5 0.5 0.5], Cells()), :volumes =&gt; ([6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8], BoundaryFaces()), :boundary_centroids =&gt; ([7.9e-5 0.00017100000000000006 8.36e-5 8.36e-5 9.28e-5 9.28e-5 0.00010200000000000001 0.00010200000000000001 0.0001112 0.0001112 0.00012040000000000003 0.00012040000000000003 0.00012960000000000003 0.00012960000000000003 0.00013880000000000004 0.00013880000000000004 0.00014800000000000005 0.00014800000000000005 0.00015720000000000005 0.00015720000000000005 0.00016640000000000006 0.00016640000000000006 8.36e-5 8.36e-5 9.28e-5 9.28e-5 0.00010200000000000001 0.00010200000000000001 0.00011120000000000003 0.00011120000000000002 0.00012040000000000001 0.00012040000000000003 0.00012960000000000003 0.00012960000000000003 0.00013880000000000004 0.00013880000000000007 0.00014800000000000005 0.00014800000000000005 0.00015720000000000003 0.00015720000000000005 0.00016640000000000006 0.00016640000000000006; 0.0035175 0.0035175 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0], BoundaryFaces()), :boundary_normals =&gt; ([-1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0], BoundaryFaces()), :boundary_neighbors =&gt; ([1, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], BoundaryFaces()), :trans =&gt; ([764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], Faces()), :halfTrans =&gt; ([1529.34782608696, 1529.3478260869417, 1529.3478260869688, 1529.34782608696, 1529.3478260869554, 1529.3478260869554, 1529.3478260869508, 1529.3478260869372, 1529.3478260869736, 1529.3478260869465, 1529.3478260869642, 1529.3478260869465, 1529.3478260869642, 1529.3478260869372, 1529.3478260869736, 1529.3478260869372, 1529.3478260869642, 1529.3478260869642], HalfFaces()), :halftransfaces =&gt; ([1529.34782608696 1529.3478260869688 1529.3478260869554 1529.3478260869508 1529.3478260869736 1529.3478260869642 1529.3478260869642 1529.3478260869736 1529.3478260869642; 1529.3478260869417 1529.34782608696 1529.3478260869554 1529.3478260869372 1529.3478260869465 1529.3478260869465 1529.3478260869372 1529.3478260869372 1529.3478260869642], Faces()), :bcTrans =&gt; ([1529.3478260869508, 1529.3478260869554, 0.0026154939587775426, 0.0026154939587775435, 0.0026154939587775426, 0.0026154939587775435, 0.002615493958777543, 0.002615493958777543, 0.0026154939587775417, 0.0026154939587775435, 0.0026154939587775435, 0.0026154939587775426, 0.0026154939587775426, 0.0026154939587775435, 0.0026154939587775435, 0.0026154939587775426, 0.002615493958777543, 0.002615493958777543, 0.0026154939587775426, 0.0026154939587775435, 0.002615493958777543, 0.002615493958777543, 1.2944400000000006e-7, 1.294440000000001e-7, 1.2944400000000003e-7, 1.2944400000000014e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000003e-7, 1.2944400000000014e-7, 1.2944400000000006e-7, 1.294440000000001e-7, 1.2944399999999998e-7, 1.294440000000002e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7], BoundaryFaces()), :volumeFraction =&gt; ([0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72], Cells()))) and discretizations for flow</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">, ActiveMaterial{nothing, BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}, JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Float64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_lfp_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}, Dict{Any, Any}}(JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Float64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_lfp_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}((volume_fraction = 0.72, volume_fractions = [1.0, 0.0, 0.0], effective_density = 1080, n_charge_carriers = 1, maximum_concentration = 26390, volumetric_surface_area = 1.87826e6, theta0 = 0.999, theta100 = 0.14778, activation_energy_of_reaction = 4000, setting_temperature_dependence = nothing, setting_butler_volmer = &quot;Standard&quot;, ecd_funcconstant = true, reaction_rate_constant_func = 3.626e-11, ocp_func = BattMo.open_circuit_potential_lfp_Xu_2015, diff_funcconstant = true, diff_func = 1.25e-15)), BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}((N = 10, rp = 1.15e-6, hT = [0.0, 2.89026524130261e-6, 1.156106096521044e-5, 2.6012387171723485e-5, 4.624424386084176e-5, 7.225663103256524e-5, 0.00010404954868689394, 0.0001416229968238279, 0.00018497697544336703, 0.00023411148454551142, 0.00028902652413026096], D = 1.25e-15, div = [(1, 1, 1), (2, 1, -1), (2, 2, 1), (3, 2, -1), (3, 3, 1), (4, 3, -1), (4, 4, 1), (5, 4, -1), (5, 5, 1), (6, 5, -1), (6, 6, 1), (7, 6, -1), (7, 7, 1), (8, 7, -1), (8, 8, 1), (9, 8, -1), (9, 9, 1), (10, 9, -1)], vols = [6.370626302704502e-21, 4.459438411893151e-20, 1.210418997513855e-19, 2.357131732000666e-19, 3.886082044649746e-19, 5.797269935461095e-19, 8.090695404434723e-19, 1.0766358451570604e-18, 1.382425907686877e-18, 1.7264397280329197e-18])), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), DefaultContext(EquationMajorLayout(false), 9223372036854775807, 1), FullyImplicitFormulation(), DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19]), Jutul.IndirectionMap{Int64}([2, 13, 35, 24, 3, 14, 36, 25, 4, 15  …  41, 30, 9, 20, 42, 31, 10, 21, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([1, 3, 4, 23, 24, 5, 6, 25, 26, 7  …  38, 19, 20, 39, 40, 2, 21, 22, 41, 42], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 43]), Jutul.IndirectionMap{Int64}([23, 34, 12, 1, 11, 22, 44, 33, 1, 2  …  42, 31, 10, 21, 22, 11, 33, 44, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37  …  133, 137, 141, 145, 149, 153, 157, 161, 165, 169]), [1, 10, 1, 1, 2, 2, 3, 3, 4, 4  …  6, 6, 7, 7, 8, 8, 9, 9, 10, 10]), StaticArraysCore.SVector{3, Float64}[[7.9e-5, 0.0, 0.0], [8.82e-5, 0.0, 0.0], [9.740000000000001e-5, 0.0, 0.0], [0.00010660000000000002, 0.0, 0.0], [0.00011580000000000002, 0.0, 0.0], [0.00012500000000000003, 0.0, 0.0], [0.00013420000000000004, 0.0, 0.0], [0.00014340000000000004, 0.0, 0.0], [0.00015260000000000005, 0.0, 0.0], [0.00016180000000000006, 0.0, 0.0]  …  [8.82e-5, 0.007035, 1.0], [9.740000000000001e-5, 0.007035, 1.0], [0.00010660000000000002, 0.007035, 1.0], [0.00011580000000000002, 0.007035, 1.0], [0.00012500000000000003, 0.007035, 1.0], [0.00013420000000000004, 0.007035, 1.0], [0.00014340000000000004, 0.007035, 1.0], [0.00015260000000000005, 0.007035, 1.0], [0.00016180000000000006, 0.007035, 1.0], [0.00017100000000000006, 0.007035, 1.0]], nothing, [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9  …  -33, -34, -35, -36, -37, -38, -39, -40, -41, -42], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 42)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 18)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 10)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 9)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 42</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 18</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 9</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 … 8 9; 2 3 … 9 10], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 … 1.0 1.0; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0], Faces()), :face_centroids =&gt; ([8.82e-5 9.740000000000001e-5 … 0.00015260000000000005 0.00016180000000000008; 0.0035175 0.0035175 … 0.0035175 0.0035175; 0.5 0.5 … 0.5 0.5], Faces()), :cell_centroids =&gt; ([8.360000000000001e-5 9.280000000000005e-5 … 0.0001572000000000001 0.00016640000000000006; 0.0035175000000000002 0.0035175000000000002 … 0.0035175000000000002 0.0035175; 0.5000000000000001 0.5000000000000002 … 0.5 0.5], Cells()), :volumes =&gt; ([6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6  …  6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8], BoundaryFaces()), :boundary_centroids =&gt; ([7.9e-5 0.00017100000000000006 … 0.00016640000000000006 0.00016640000000000006; 0.0035175 0.0035175 … 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 … 0.0 1.0], BoundaryFaces())…)), OrderedCollections.OrderedDict{Symbol, Any}(:Voltage =&gt; Voltage(), :ParticleConcentration =&gt; BattMo.ParticleConcentration(), :SurfaceConcentration =&gt; BattMo.SurfaceConcentration()), OrderedCollections.OrderedDict{Symbol, Any}(:Charge =&gt; Charge(), :OpenCircuitPotential =&gt; BattMo.OpenCircuitPotential(), :ReactionRateConstant =&gt; BattMo.ReactionRateConstant(), :SolidDiffFlux =&gt; BattMo.SolidDiffFlux(), :DiffusionCoefficient =&gt; BattMo.DiffusionCoefficient()), OrderedCollections.OrderedDict{Symbol, Any}(:ECTransmissibilities =&gt; BattMo.ECTransmissibilities(), :Volume =&gt; BattMo.Volume(), :Temperature =&gt; Temperature(), :Conductivity =&gt; BattMo.Conductivity(), :VolumeFraction =&gt; BattMo.VolumeFraction()), OrderedCollections.OrderedDict{Symbol, Any}(:charge_conservation =&gt; ConservationLaw{:Charge, PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}, Jutul.DefaultFlux, 1}(PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}(TPFA{Int64}[TPFA{Int64}(1, 2, 1), TPFA{Int64}(2, 3, 1), TPFA{Int64}(3, 4, 1), TPFA{Int64}(4, 5, 1), TPFA{Int64}(5, 6, 1), TPFA{Int64}(6, 7, 1), TPFA{Int64}(7, 8, 1), TPFA{Int64}(8, 9, 1), TPFA{Int64}(9, 10, 1)], SPU{Int64}[SPU{Int64}(1, 2), SPU{Int64}(2, 3), SPU{Int64}(3, 4), SPU{Int64}(4, 5), SPU{Int64}(5, 6), SPU{Int64}(6, 7), SPU{Int64}(7, 8), SPU{Int64}(8, 9), SPU{Int64}(9, 10)], (cells = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9], faces = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], face_pos = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19], face_sign = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1])), Jutul.DefaultFlux()), :mass_conservation =&gt; SolidMassCons(), :solid_diffusion_bc =&gt; BattMo.SolidDiffusionBc()), [:Voltage, :ParticleConcentration, :SurfaceConcentration, :Charge, :OpenCircuitPotential, :Temperature, :ReactionRateConstant, :DiffusionCoefficient], OrderedCollections.OrderedDict{Symbol, Any}()), :Control =&gt; SimulationModel{CurrentAndVoltageDomain, CurrentAndVoltageSystem{BattMo.CCPolicy{Float64}}, FullyImplicitFormulation, DefaultContext}(CurrentAndVoltageDomain(), CurrentAndVoltageSystem{BattMo.CCPolicy{Float64}}(BattMo.CCPolicy{Float64}(0, &quot;discharging&quot;, 0.06357915909518233, 0.0, 2.25, 4.1, true, BattMo.var&quot;#cFun#113&quot;{Float64}(10.0, Core.Box(0.06357915909518233)), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;charging&quot; =&gt; 0.0001</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;discharging&quot; =&gt; 0.0001</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">})), DefaultContext(EquationMajorLayout(false), 9223372036854775807, 1), FullyImplicitFormulation(), DataDomain{CurrentAndVoltageDomain, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(CurrentAndVoltageDomain(), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}()), OrderedCollections.OrderedDict{Symbol, Any}(:Voltage =&gt; VoltageVar(), :Current =&gt; CurrentVar()), OrderedCollections.OrderedDict{Symbol, Any}(), OrderedCollections.OrderedDict{Symbol, Any}(:ImaxDischarge =&gt; BattMo.ImaxDischarge(), :ImaxCharge =&gt; BattMo.ImaxCharge()), OrderedCollections.OrderedDict{Symbol, Any}(:charge_conservation =&gt; BattMo.CurrentEquation(), :control =&gt; BattMo.ControlEquation()), [:Voltage, :Current, :Controller], OrderedCollections.OrderedDict{Symbol, Any}()))), Jutul.CrossTermPair[Jutul.CrossTermPair(:Elyte, :NeAm, :charge_conservation, :charge_conservation, ButlerVolmerActmatToElyteCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:Elyte, :NeAm, :mass_conservation, :mass_conservation, ButlerVolmerActmatToElyteCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:NeAm, :Elyte, :charge_conservation, :charge_conservation, ButlerVolmerElyteToActmatCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:NeAm, :Elyte, :solid_diffusion_bc, :solid_diffusion_bc, ButlerVolmerElyteToActmatCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:Elyte, :PeAm, :charge_conservation, :charge_conservation, ButlerVolmerActmatToElyteCT{Vector{Int64}}([14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:Elyte, :PeAm, :mass_conservation, :mass_conservation, ButlerVolmerActmatToElyteCT{Vector{Int64}}([14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:PeAm, :Elyte, :charge_conservation, :charge_conservation, ButlerVolmerElyteToActmatCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23])), Jutul.CrossTermPair(:PeAm, :Elyte, :solid_diffusion_bc, :solid_diffusion_bc, ButlerVolmerElyteToActmatCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23])), Jutul.CrossTermPair(:PeAm, :Control, :charge_conservation, :charge_conservation, TPFAInterfaceFluxCT{Vector{Int64}, Vector{Float64}}([10], [1], [9.343401568868082])), Jutul.CrossTermPair(:Control, :PeAm, :charge_conservation, :charge_conservation, AccumulatorInterfaceFluxCT{Vector{Int64}, Vector{Float64}}(1, [10], [9.343401568868082])), Jutul.CrossTermPair(:Control, :PeAm, :control, :control, AccumulatorInterfaceFluxCT{Vector{Int64}, Vector{Float64}}(1, [10], [0.0]))], nothing, DefaultContext(EquationMajorLayout(false), 9223372036854775807, 1), nothing, false, {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :Elyte =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :NeAm =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :Control =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :PeAm =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">})), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Electrolyte&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;TransferenceNumber&quot; =&gt; 0.2594</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Description&quot; =&gt; &quot;1.5 mol/l LiPF6 dissolved in a mixture of ethylene carbonate (EC):  dimethyl carbonate (DMC) (1:1)&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;DiffusionCoefficient&quot; =&gt; &quot;8.794*10^(-11)*(c/1000)^2 - 3.972*10^(-10)*(c/1000) + 4.862*10^(-10)&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;IonicConductivity&quot; =&gt; &quot;0.1297*(c/1000)^3 - 2.51*(c/1000)^(1.5) + 3.329*(c/1000)&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Density&quot; =&gt; 1210</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;ChargeNumber&quot; =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Concentration&quot; =&gt; 1500.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Cell&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;ElectrodeGeometricSurfaceArea&quot; =&gt; 0.007035</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;NominalCapacity&quot; =&gt; 16.5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;ElectrodeWidth&quot; =&gt; 0.067</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;ElectrodeLength&quot; =&gt; 0.105</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Name&quot; =&gt; &quot;LP2770120&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Case&quot; =&gt; &quot;Pouch&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;NominalVoltage&quot; =&gt; 3.2</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Metadata&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Description&quot; =&gt; &quot;Parameter set of a commercial Type LP2770120 prismatic LiFePO4/graphite cell, for an electrochemical pseudo-two-dimensional (P2D) model.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Source&quot; =&gt; &quot;https://doi.org/10.1016/j.energy.2014.11.073&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Models&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;CurrentCollectors&quot; =&gt; &quot;Generic&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;RampUp&quot; =&gt; &quot;Sinusoidal&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;TransportInSolid&quot; =&gt; &quot;FullDiffusion&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ModelFramework&quot; =&gt; Any[&quot;P2D&quot;, &quot;P4D Pouch&quot;]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Title&quot; =&gt; &quot;Xu2015&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;PositiveElectrode&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;ActiveMaterial&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ActivationEnergyOfDiffusion&quot; =&gt; 20000</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;NumberOfElectronsTransfered&quot; =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;StoichiometricCoefficientAtSOC0&quot; =&gt; 0.999</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;OpenCircuitPotential&quot; =&gt;             {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">                &quot;FilePath&quot; =&gt; &quot;function_parameters_Xu2015.jl&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">                &quot;FunctionName&quot; =&gt; &quot;open_circuit_potential_lfp_Xu_2015&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ReactionRateConstant&quot; =&gt; 3.626e-11</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;MassFraction&quot; =&gt; 1.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;StoichiometricCoefficientAtSOC100&quot; =&gt; 0.14778</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ActivationEnergyOfReaction&quot; =&gt; 4000</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;MaximumConcentration&quot; =&gt; 26390</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;VolumetricSurfaceArea&quot; =&gt; 1.87826e6</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Description&quot; =&gt; &quot;LiFePO4&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;DiffusionCoefficient&quot; =&gt; 1.25e-15</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ParticleRadius&quot; =&gt; 1.15e-6</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Density&quot; =&gt; 1500</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ElectronicConductivity&quot; =&gt; 0.01</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ChargeTransferCoefficient&quot; =&gt; 0.5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Binder&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Description&quot; =&gt; &quot;Unknown&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;MassFraction&quot; =&gt; 0.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Density&quot; =&gt; 1100.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ElectronicConductivity&quot; =&gt; 100.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Coating&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;BruggemanCoefficient&quot; =&gt; 1.5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;EffectiveDensity&quot; =&gt; 1080</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Thickness&quot; =&gt; 9.2e-5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;CurrentCollector&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Description&quot; =&gt; &quot;Aluminum&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;TabLength&quot; =&gt; 0.01</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Density&quot; =&gt; 2700</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ElectronicConductivity&quot; =&gt; 3.83e7</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Thickness&quot; =&gt; 1.6e-5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;TabWidth&quot; =&gt; 0.015</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;ConductiveAdditive&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Description&quot; =&gt; &quot;Unknown&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;MassFraction&quot; =&gt; 0.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Density&quot; =&gt; 1950.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ElectronicConductivity&quot; =&gt; 100.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Separator&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Density&quot; =&gt; 779</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;BruggemanCoefficient&quot; =&gt; 1.5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Thickness&quot; =&gt; 2.0e-5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Porosity&quot; =&gt; 0.4</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;NegativeElectrode&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;ActiveMaterial&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ActivationEnergyOfDiffusion&quot; =&gt; 4000</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;NumberOfElectronsTransfered&quot; =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;StoichiometricCoefficientAtSOC0&quot; =&gt; 0.001</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;OpenCircuitPotential&quot; =&gt;             {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">                &quot;FilePath&quot; =&gt; &quot;function_parameters_Xu2015.jl&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">                &quot;FunctionName&quot; =&gt; &quot;open_circuit_potential_graphite_Xu_2015&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ReactionRateConstant&quot; =&gt; 1.764e-11</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;MassFraction&quot; =&gt; 1.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;StoichiometricCoefficientAtSOC100&quot; =&gt; 0.51873811</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ActivationEnergyOfReaction&quot; =&gt; 4000</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;MaximumConcentration&quot; =&gt; 31540</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;VolumetricSurfaceArea&quot; =&gt; 142373</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Description&quot; =&gt; &quot;Graphite&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;DiffusionCoefficient&quot; =&gt; 3.9e-14</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ParticleRadius&quot; =&gt; 1.475e-5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Density&quot; =&gt; 2660</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ElectronicConductivity&quot; =&gt; 215.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ChargeTransferCoefficient&quot; =&gt; 0.5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Binder&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Description&quot; =&gt; &quot;Unknown&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;MassFraction&quot; =&gt; 0.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Density&quot; =&gt; 1100.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ElectronicConductivity&quot; =&gt; 100.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Coating&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;BruggemanCoefficient&quot; =&gt; 1.5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;EffectiveDensity&quot; =&gt; 1862</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Thickness&quot; =&gt; 5.9e-5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;CurrentCollector&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Description&quot; =&gt; &quot;Copper&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;TabLength&quot; =&gt; 0.01</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Density&quot; =&gt; 8900</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ElectronicConductivity&quot; =&gt; 6.33e7</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Thickness&quot; =&gt; 9.0e-6</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;TabWidth&quot; =&gt; 0.015</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;ConductiveAdditive&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Description&quot; =&gt; &quot;Unknown&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;MassFraction&quot; =&gt; 0.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Density&quot; =&gt; 1950.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ElectronicConductivity&quot; =&gt; 100.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;TotalNumberOfCycles&quot; =&gt; 0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;InitialControl&quot; =&gt; &quot;discharging&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;InitialStateOfCharge&quot; =&gt; 0.99</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Metadata&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Description&quot; =&gt; &quot;Parameter set for a constant current discharging protocol.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Title&quot; =&gt; &quot;CCDischarge&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;DRate&quot; =&gt; 0.5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;LowerVoltageLimit&quot; =&gt; 2.25</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Protocol&quot; =&gt; &quot;CC&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;UpperVoltageLimit&quot; =&gt; 4.1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;TimeStepDuration&quot; =&gt; 50</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;RampUpTime&quot; =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionElectrodeWidth&quot; =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionPositiveElectrodeCoating&quot; =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionNegativeElectrodeCoating&quot; =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionPositiveElectrodeCurrentCollectorTabLength&quot; =&gt; 3</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionNegativeElectrodeParticle&quot; =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionPositiveElectrodeCurrentCollectorTabWidth&quot; =&gt; 3</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionPositiveElectrodeParticle&quot; =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionPositiveElectrodeCurrentCollector&quot; =&gt; 2</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Grid&quot; =&gt; Any[]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;RampUpSteps&quot; =&gt; 5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionNegativeElectrodeCurrentCollector&quot; =&gt; 2</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionSeparator&quot; =&gt; 3</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionNegativeElectrodeCurrentCollectorTabLength&quot; =&gt; 3</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionElectrodeLength&quot; =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionNegativeElectrodeCurrentCollectorTabWidth&quot; =&gt; 3</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, [1.5625, 3.125, 6.25, 12.5, 25.0, 50.0, 50.0, 50.0, 50.0, 50.0  …  50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 21.56250000000091], {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :Elyte =&gt; NamedTuple()</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :NeAm =&gt; NamedTuple()</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :Control =&gt; NamedTuple()</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :PeAm =&gt; NamedTuple()</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :Elyte =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Concentration =&gt; [1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :DmuDc =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Charge =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Voltage =&gt; [-0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Mass =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Diffusivity =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Conductivity =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :ChemCoef =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :NeAm =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :OpenCircuitPotential =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :ReactionRateConstant =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :DiffusionCoefficient =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Charge =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Voltage =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :ParticleConcentration =&gt; [16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002; 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002; 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002; 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002; 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002; 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002; 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002; 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002; 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002; 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :SurfaceConcentration =&gt; [16197.705389506002, 16197.705389506002, 16197.705389506002, 16197.705389506002, 16197.705389506002, 16197.705389506002, 16197.705389506002, 16197.705389506002, 16197.705389506002, 16197.705389506002]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :SolidDiffFlux =&gt; [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :Control =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Controller =&gt; BattMo.CCController{Int64, Float64}(0, 0.0, 0.0, false, &quot;discharging&quot;)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Voltage =&gt; [3.3186584026951]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Current =&gt; [0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :PeAm =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :OpenCircuitPotential =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :ReactionRateConstant =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :DiffusionCoefficient =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Charge =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Voltage =&gt; [3.3186584026951, 3.3186584026951, 3.3186584026951, 3.3186584026951, 3.3186584026951, 3.3186584026951, 3.3186584026951, 3.3186584026951, 3.3186584026951, 3.3186584026951]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :ParticleConcentration =&gt; [4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158; 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158; 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158; 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158; 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158; 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158; 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158; 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158; 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158; 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :SurfaceConcentration =&gt; [4124.551158, 4124.551158, 4124.551158, 4124.551158, 4124.551158, 4124.551158, 4124.551158, 4124.551158, 4124.551158, 4124.551158]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :SolidDiffFlux =&gt; [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Electrolyte&quot; =&gt; UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 45]), Jutul.IndirectionMap{Int64}([2, 26, 74, 50, 3, 27, 75, 51, 4, 28, 76, 52, 5, 29, 77, 53, 6, 30, 78, 54, 7, 31, 79, 55, 8, 32, 80, 56, 9, 33, 81, 57, 10, 34, 82, 58, 11, 35, 83, 59, 12, 36, 84, 60, 13, 37, 85, 61, 14, 38, 86, 62, 15, 39, 87, 63, 16, 40, 88, 64, 17, 41, 89, 65, 18, 42, 90, 66, 19, 43, 91, 67, 20, 44, 92, 68, 21, 45, 93, 69, 22, 46, 94, 70, 23, 47, 95, 71], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([1, 3, 4, 49, 50, 5, 6, 51, 52, 7, 8, 53, 54, 9, 10, 55, 56, 11, 12, 57, 58, 13, 14, 59, 60, 15, 16, 61, 62, 17, 18, 63, 64, 19, 20, 65, 66, 21, 22, 67, 68, 23, 24, 69, 70, 25, 26, 71, 72, 27, 28, 73, 74, 29, 30, 75, 76, 31, 32, 77, 78, 33, 34, 79, 80, 35, 36, 81, 82, 37, 38, 83, 84, 39, 40, 85, 86, 41, 42, 87, 88, 43, 44, 89, 90, 45, 46, 91, 92, 2, 47, 48, 93, 94], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 95]), Jutul.IndirectionMap{Int64}([49, 73, 25, 1, 24, 48, 96, 72, 1, 2, 50, 49, 73, 74, 26, 25, 2, 3, 51, 50, 74, 75, 27, 26, 3, 4, 52, 51, 75, 76, 28, 27, 4, 5, 53, 52, 76, 77, 29, 28, 5, 6, 54, 53, 77, 78, 30, 29, 6, 7, 55, 54, 78, 79, 31, 30, 7, 8, 56, 55, 79, 80, 32, 31, 8, 9, 57, 56, 80, 81, 33, 32, 9, 10, 58, 57, 81, 82, 34, 33, 10, 11, 59, 58, 82, 83, 35, 34, 11, 12, 60, 59, 83, 84, 36, 35, 12, 13, 61, 60, 84, 85, 37, 36, 13, 14, 62, 61, 85, 86, 38, 37, 14, 15, 63, 62, 86, 87, 39, 38, 15, 16, 64, 63, 87, 88, 40, 39, 16, 17, 65, 64, 88, 89, 41, 40, 17, 18, 66, 65, 89, 90, 42, 41, 18, 19, 67, 66, 90, 91, 43, 42, 19, 20, 68, 67, 91, 92, 44, 43, 20, 21, 69, 68, 92, 93, 45, 44, 21, 22, 70, 69, 93, 94, 46, 45, 22, 23, 71, 70, 94, 95, 47, 46, 23, 24, 72, 71, 95, 96, 48, 47, 1, 25, 26, 2, 50, 74, 73, 49, 2, 26, 27, 3, 51, 75, 74, 50, 3, 27, 28, 4, 52, 76, 75, 51, 4, 28, 29, 5, 53, 77, 76, 52, 5, 29, 30, 6, 54, 78, 77, 53, 6, 30, 31, 7, 55, 79, 78, 54, 7, 31, 32, 8, 56, 80, 79, 55, 8, 32, 33, 9, 57, 81, 80, 56, 9, 33, 34, 10, 58, 82, 81, 57, 10, 34, 35, 11, 59, 83, 82, 58, 11, 35, 36, 12, 60, 84, 83, 59, 12, 36, 37, 13, 61, 85, 84, 60, 13, 37, 38, 14, 62, 86, 85, 61, 14, 38, 39, 15, 63, 87, 86, 62, 15, 39, 40, 16, 64, 88, 87, 63, 16, 40, 41, 17, 65, 89, 88, 64, 17, 41, 42, 18, 66, 90, 89, 65, 18, 42, 43, 19, 67, 91, 90, 66, 19, 43, 44, 20, 68, 92, 91, 67, 20, 44, 45, 21, 69, 93, 92, 68, 21, 45, 46, 22, 70, 94, 93, 69, 22, 46, 47, 23, 71, 95, 94, 70, 23, 47, 48, 24, 72, 96, 95, 71], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177, 181, 185, 189, 193, 197, 201, 205, 209, 213, 217, 221, 225, 229, 233, 237, 241, 245, 249, 253, 257, 261, 265, 269, 273, 277, 281, 285, 289, 293, 297, 301, 305, 309, 313, 317, 321, 325, 329, 333, 337, 341, 345, 349, 353, 357, 361, 365, 369, 373, 377]), [1, 23, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23]), StaticArraysCore.SVector{3, Float64}[[0.0, 0.0, 0.0], [5.899999999999999e-6, 0.0, 0.0], [1.1799999999999999e-5, 0.0, 0.0], [1.7699999999999997e-5, 0.0, 0.0], [2.3599999999999998e-5, 0.0, 0.0], [2.95e-5, 0.0, 0.0], [3.54e-5, 0.0, 0.0], [4.13e-5, 0.0, 0.0], [4.72e-5, 0.0, 0.0], [5.31e-5, 0.0, 0.0], [5.9000000000000004e-5, 0.0, 0.0], [6.566666666666667e-5, 0.0, 0.0], [7.233333333333333e-5, 0.0, 0.0], [7.9e-5, 0.0, 0.0], [8.82e-5, 0.0, 0.0], [9.740000000000001e-5, 0.0, 0.0], [0.00010660000000000002, 0.0, 0.0], [0.00011580000000000002, 0.0, 0.0], [0.00012500000000000003, 0.0, 0.0], [0.00013420000000000004, 0.0, 0.0], [0.00014340000000000004, 0.0, 0.0], [0.00015260000000000005, 0.0, 0.0], [0.00016180000000000006, 0.0, 0.0], [0.00017100000000000006, 0.0, 0.0], [0.0, 0.007035, 0.0], [5.899999999999999e-6, 0.007035, 0.0], [1.1799999999999999e-5, 0.007035, 0.0], [1.7699999999999997e-5, 0.007035, 0.0], [2.3599999999999998e-5, 0.007035, 0.0], [2.95e-5, 0.007035, 0.0], [3.54e-5, 0.007035, 0.0], [4.13e-5, 0.007035, 0.0], [4.72e-5, 0.007035, 0.0], [5.31e-5, 0.007035, 0.0], [5.9000000000000004e-5, 0.007035, 0.0], [6.566666666666667e-5, 0.007035, 0.0], [7.233333333333333e-5, 0.007035, 0.0], [7.9e-5, 0.007035, 0.0], [8.82e-5, 0.007035, 0.0], [9.740000000000001e-5, 0.007035, 0.0], [0.00010660000000000002, 0.007035, 0.0], [0.00011580000000000002, 0.007035, 0.0], [0.00012500000000000003, 0.007035, 0.0], [0.00013420000000000004, 0.007035, 0.0], [0.00014340000000000004, 0.007035, 0.0], [0.00015260000000000005, 0.007035, 0.0], [0.00016180000000000006, 0.007035, 0.0], [0.00017100000000000006, 0.007035, 0.0], [0.0, 0.0, 1.0], [5.899999999999999e-6, 0.0, 1.0], [1.1799999999999999e-5, 0.0, 1.0], [1.7699999999999997e-5, 0.0, 1.0], [2.3599999999999998e-5, 0.0, 1.0], [2.95e-5, 0.0, 1.0], [3.54e-5, 0.0, 1.0], [4.13e-5, 0.0, 1.0], [4.72e-5, 0.0, 1.0], [5.31e-5, 0.0, 1.0], [5.9000000000000004e-5, 0.0, 1.0], [6.566666666666667e-5, 0.0, 1.0], [7.233333333333333e-5, 0.0, 1.0], [7.9e-5, 0.0, 1.0], [8.82e-5, 0.0, 1.0], [9.740000000000001e-5, 0.0, 1.0], [0.00010660000000000002, 0.0, 1.0], [0.00011580000000000002, 0.0, 1.0], [0.00012500000000000003, 0.0, 1.0], [0.00013420000000000004, 0.0, 1.0], [0.00014340000000000004, 0.0, 1.0], [0.00015260000000000005, 0.0, 1.0], [0.00016180000000000006, 0.0, 1.0], [0.00017100000000000006, 0.0, 1.0], [0.0, 0.007035, 1.0], [5.899999999999999e-6, 0.007035, 1.0], [1.1799999999999999e-5, 0.007035, 1.0], [1.7699999999999997e-5, 0.007035, 1.0], [2.3599999999999998e-5, 0.007035, 1.0], [2.95e-5, 0.007035, 1.0], [3.54e-5, 0.007035, 1.0], [4.13e-5, 0.007035, 1.0], [4.72e-5, 0.007035, 1.0], [5.31e-5, 0.007035, 1.0], [5.9000000000000004e-5, 0.007035, 1.0], [6.566666666666667e-5, 0.007035, 1.0], [7.233333333333333e-5, 0.007035, 1.0], [7.9e-5, 0.007035, 1.0], [8.82e-5, 0.007035, 1.0], [9.740000000000001e-5, 0.007035, 1.0], [0.00010660000000000002, 0.007035, 1.0], [0.00011580000000000002, 0.007035, 1.0], [0.00012500000000000003, 0.007035, 1.0], [0.00013420000000000004, 0.007035, 1.0], [0.00014340000000000004, 0.007035, 1.0], [0.00015260000000000005, 0.007035, 1.0], [0.00016180000000000006, 0.007035, 1.0], [0.00017100000000000006, 0.007035, 1.0]], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 94)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 44)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 23)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 22)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;PositiveElectrode&quot; =&gt; UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19]), Jutul.IndirectionMap{Int64}([2, 13, 35, 24, 3, 14, 36, 25, 4, 15, 37, 26, 5, 16, 38, 27, 6, 17, 39, 28, 7, 18, 40, 29, 8, 19, 41, 30, 9, 20, 42, 31, 10, 21, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([1, 3, 4, 23, 24, 5, 6, 25, 26, 7, 8, 27, 28, 9, 10, 29, 30, 11, 12, 31, 32, 13, 14, 33, 34, 15, 16, 35, 36, 17, 18, 37, 38, 19, 20, 39, 40, 2, 21, 22, 41, 42], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 43]), Jutul.IndirectionMap{Int64}([23, 34, 12, 1, 11, 22, 44, 33, 1, 2, 24, 23, 34, 35, 13, 12, 2, 3, 25, 24, 35, 36, 14, 13, 3, 4, 26, 25, 36, 37, 15, 14, 4, 5, 27, 26, 37, 38, 16, 15, 5, 6, 28, 27, 38, 39, 17, 16, 6, 7, 29, 28, 39, 40, 18, 17, 7, 8, 30, 29, 40, 41, 19, 18, 8, 9, 31, 30, 41, 42, 20, 19, 9, 10, 32, 31, 42, 43, 21, 20, 10, 11, 33, 32, 43, 44, 22, 21, 1, 12, 13, 2, 24, 35, 34, 23, 2, 13, 14, 3, 25, 36, 35, 24, 3, 14, 15, 4, 26, 37, 36, 25, 4, 15, 16, 5, 27, 38, 37, 26, 5, 16, 17, 6, 28, 39, 38, 27, 6, 17, 18, 7, 29, 40, 39, 28, 7, 18, 19, 8, 30, 41, 40, 29, 8, 19, 20, 9, 31, 42, 41, 30, 9, 20, 21, 10, 32, 43, 42, 31, 10, 21, 22, 11, 33, 44, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169]), [1, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]), StaticArraysCore.SVector{3, Float64}[[7.9e-5, 0.0, 0.0], [8.82e-5, 0.0, 0.0], [9.740000000000001e-5, 0.0, 0.0], [0.00010660000000000002, 0.0, 0.0], [0.00011580000000000002, 0.0, 0.0], [0.00012500000000000003, 0.0, 0.0], [0.00013420000000000004, 0.0, 0.0], [0.00014340000000000004, 0.0, 0.0], [0.00015260000000000005, 0.0, 0.0], [0.00016180000000000006, 0.0, 0.0], [0.00017100000000000006, 0.0, 0.0], [7.9e-5, 0.007035, 0.0], [8.82e-5, 0.007035, 0.0], [9.740000000000001e-5, 0.007035, 0.0], [0.00010660000000000002, 0.007035, 0.0], [0.00011580000000000002, 0.007035, 0.0], [0.00012500000000000003, 0.007035, 0.0], [0.00013420000000000004, 0.007035, 0.0], [0.00014340000000000004, 0.007035, 0.0], [0.00015260000000000005, 0.007035, 0.0], [0.00016180000000000006, 0.007035, 0.0], [0.00017100000000000006, 0.007035, 0.0], [7.9e-5, 0.0, 1.0], [8.82e-5, 0.0, 1.0], [9.740000000000001e-5, 0.0, 1.0], [0.00010660000000000002, 0.0, 1.0], [0.00011580000000000002, 0.0, 1.0], [0.00012500000000000003, 0.0, 1.0], [0.00013420000000000004, 0.0, 1.0], [0.00014340000000000004, 0.0, 1.0], [0.00015260000000000005, 0.0, 1.0], [0.00016180000000000006, 0.0, 1.0], [0.00017100000000000006, 0.0, 1.0], [7.9e-5, 0.007035, 1.0], [8.82e-5, 0.007035, 1.0], [9.740000000000001e-5, 0.007035, 1.0], [0.00010660000000000002, 0.007035, 1.0], [0.00011580000000000002, 0.007035, 1.0], [0.00012500000000000003, 0.007035, 1.0], [0.00013420000000000004, 0.007035, 1.0], [0.00014340000000000004, 0.007035, 1.0], [0.00015260000000000005, 0.007035, 1.0], [0.00016180000000000006, 0.007035, 1.0], [0.00017100000000000006, 0.007035, 1.0]], nothing, [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 42)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 18)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 10)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 9)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Separator&quot; =&gt; UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2], [1, 2, 4, 5]), Jutul.IndirectionMap{Int64}([2, 6, 14, 10, 3, 7, 15, 11], [1, 5, 9]), [(1, 2), (2, 3)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([1, 3, 4, 9, 10, 5, 6, 11, 12, 2, 7, 8, 13, 14], [1, 6, 10, 15]), Jutul.IndirectionMap{Int64}([9, 13, 5, 1, 4, 8, 16, 12, 1, 2, 10, 9, 13, 14, 6, 5, 2, 3, 11, 10, 14, 15, 7, 6, 3, 4, 12, 11, 15, 16, 8, 7, 1, 5, 6, 2, 10, 14, 13, 9, 2, 6, 7, 3, 11, 15, 14, 10, 3, 7, 8, 4, 12, 16, 15, 11], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57]), [1, 3, 1, 1, 2, 2, 3, 3, 1, 1, 2, 2, 3, 3]), StaticArraysCore.SVector{3, Float64}[[5.9000000000000004e-5, 0.0, 0.0], [6.566666666666667e-5, 0.0, 0.0], [7.233333333333333e-5, 0.0, 0.0], [7.9e-5, 0.0, 0.0], [5.9000000000000004e-5, 0.007035, 0.0], [6.566666666666667e-5, 0.007035, 0.0], [7.233333333333333e-5, 0.007035, 0.0], [7.9e-5, 0.007035, 0.0], [5.9000000000000004e-5, 0.0, 1.0], [6.566666666666667e-5, 0.0, 1.0], [7.233333333333333e-5, 0.0, 1.0], [7.9e-5, 0.0, 1.0], [5.9000000000000004e-5, 0.007035, 1.0], [6.566666666666667e-5, 0.007035, 1.0], [7.233333333333333e-5, 0.007035, 1.0], [7.9e-5, 0.007035, 1.0]], nothing, [-1, 1, 2, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 14)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 4)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 3)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 2)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;NegativeElectrode&quot; =&gt; UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19]), Jutul.IndirectionMap{Int64}([2, 13, 35, 24, 3, 14, 36, 25, 4, 15, 37, 26, 5, 16, 38, 27, 6, 17, 39, 28, 7, 18, 40, 29, 8, 19, 41, 30, 9, 20, 42, 31, 10, 21, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([2, 3, 4, 23, 24, 5, 6, 25, 26, 7, 8, 27, 28, 9, 10, 29, 30, 11, 12, 31, 32, 13, 14, 33, 34, 15, 16, 35, 36, 17, 18, 37, 38, 19, 20, 39, 40, 1, 21, 22, 41, 42], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 43]), Jutul.IndirectionMap{Int64}([11, 22, 44, 33, 23, 34, 12, 1, 1, 2, 24, 23, 34, 35, 13, 12, 2, 3, 25, 24, 35, 36, 14, 13, 3, 4, 26, 25, 36, 37, 15, 14, 4, 5, 27, 26, 37, 38, 16, 15, 5, 6, 28, 27, 38, 39, 17, 16, 6, 7, 29, 28, 39, 40, 18, 17, 7, 8, 30, 29, 40, 41, 19, 18, 8, 9, 31, 30, 41, 42, 20, 19, 9, 10, 32, 31, 42, 43, 21, 20, 10, 11, 33, 32, 43, 44, 22, 21, 1, 12, 13, 2, 24, 35, 34, 23, 2, 13, 14, 3, 25, 36, 35, 24, 3, 14, 15, 4, 26, 37, 36, 25, 4, 15, 16, 5, 27, 38, 37, 26, 5, 16, 17, 6, 28, 39, 38, 27, 6, 17, 18, 7, 29, 40, 39, 28, 7, 18, 19, 8, 30, 41, 40, 29, 8, 19, 20, 9, 31, 42, 41, 30, 9, 20, 21, 10, 32, 43, 42, 31, 10, 21, 22, 11, 33, 44, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169]), [10, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]), StaticArraysCore.SVector{3, Float64}[[0.0, 0.0, 0.0], [5.899999999999999e-6, 0.0, 0.0], [1.1799999999999999e-5, 0.0, 0.0], [1.7699999999999997e-5, 0.0, 0.0], [2.3599999999999998e-5, 0.0, 0.0], [2.95e-5, 0.0, 0.0], [3.54e-5, 0.0, 0.0], [4.13e-5, 0.0, 0.0], [4.72e-5, 0.0, 0.0], [5.31e-5, 0.0, 0.0], [5.9000000000000004e-5, 0.0, 0.0], [0.0, 0.007035, 0.0], [5.899999999999999e-6, 0.007035, 0.0], [1.1799999999999999e-5, 0.007035, 0.0], [1.7699999999999997e-5, 0.007035, 0.0], [2.3599999999999998e-5, 0.007035, 0.0], [2.95e-5, 0.007035, 0.0], [3.54e-5, 0.007035, 0.0], [4.13e-5, 0.007035, 0.0], [4.72e-5, 0.007035, 0.0], [5.31e-5, 0.007035, 0.0], [5.9000000000000004e-5, 0.007035, 0.0], [0.0, 0.0, 1.0], [5.899999999999999e-6, 0.0, 1.0], [1.1799999999999999e-5, 0.0, 1.0], [1.7699999999999997e-5, 0.0, 1.0], [2.3599999999999998e-5, 0.0, 1.0], [2.95e-5, 0.0, 1.0], [3.54e-5, 0.0, 1.0], [4.13e-5, 0.0, 1.0], [4.72e-5, 0.0, 1.0], [5.31e-5, 0.0, 1.0], [5.9000000000000004e-5, 0.0, 1.0], [0.0, 0.007035, 1.0], [5.899999999999999e-6, 0.007035, 1.0], [1.1799999999999999e-5, 0.007035, 1.0], [1.7699999999999997e-5, 0.007035, 1.0], [2.3599999999999998e-5, 0.007035, 1.0], [2.95e-5, 0.007035, 1.0], [3.54e-5, 0.007035, 1.0], [4.13e-5, 0.007035, 1.0], [4.72e-5, 0.007035, 1.0], [5.31e-5, 0.007035, 1.0], [5.9000000000000004e-5, 0.007035, 1.0]], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 42)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 18)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 10)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 9)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Electrolyte&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;PositiveElectrode&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;faces&quot; =&gt; Any[]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;face_type&quot; =&gt; false</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [14, 15, 16, 17, 18, 19, 20, 21, 22, 23]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Separator&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;faces&quot; =&gt; Any[]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;face_type&quot; =&gt; false</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [11, 12, 13]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;NegativeElectrode&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;faces&quot; =&gt; Any[]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;face_type&quot; =&gt; false</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;PositiveElectrode&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Electrolyte&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;faces&quot; =&gt; Any[]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;face_type&quot; =&gt; false</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;External&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [10]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;boundaryfaces&quot; =&gt; [2]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Separator&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;faces&quot; =&gt; [1]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;face_type&quot; =&gt; true</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [1]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Separator&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Electrolyte&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;faces&quot; =&gt; Any[]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;face_type&quot; =&gt; false</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [1, 2, 3]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;PositiveElectrode&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;faces&quot; =&gt; [2]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;face_type&quot; =&gt; true</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [3]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;NegativeElectrode&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;faces&quot; =&gt; [1]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;face_type&quot; =&gt; true</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [1]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;NegativeElectrode&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Electrolyte&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;faces&quot; =&gt; Any[]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;face_type&quot; =&gt; false</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;External&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [1]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;boundaryfaces&quot; =&gt; [2]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Separator&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;faces&quot; =&gt; [1]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;face_type&quot; =&gt; true</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [10]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :Elyte =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :BruggemanCoefficient =&gt; [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Volume =&gt; [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8, 4.6900000000000016e-8, 4.6899999999999977e-8, 4.6899999999999924e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Temperature =&gt; [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :VolumeFraction =&gt; [0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.4, 0.4, 0.4, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :ECTransmissibilities =&gt; [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294, 1119.628647214855, 1055.2499999999943, 1055.2500000000093, 886.764705882349, 764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :NeAm =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :BoundaryVoltage =&gt; [0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Volume =&gt; [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Temperature =&gt; [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :VolumeFraction =&gt; [0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Conductivity =&gt; [125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :ECTransmissibilities =&gt; [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :Control =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :ImaxDischarge =&gt; [0.06357915909518233]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :ImaxCharge =&gt; [0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :PeAm =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Volume =&gt; [6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Temperature =&gt; [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :VolumeFraction =&gt; [0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Conductivity =&gt; [0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :ECTransmissibilities =&gt; [764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, Simulator{Jutul.DefaultExecutor, MultiModel{:IntercalationBattery, JutulStorage{Nothing}, Vector{Jutul.CrossTermPair}, Nothing, DefaultContext, Dict{Symbol, Int64}}, JutulStorage{@NamedTuple{NeAm::JutulStorage{@NamedTuple{state0::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, state::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, parameters::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, ParticleConcentration::BattMo.ParticleConcentration, SurfaceConcentration::BattMo.SurfaceConcentration}, secondary_variables::@NamedTuple{Charge::Charge, OpenCircuitPotential::BattMo.OpenCircuitPotential, ReactionRateConstant::BattMo.ReactionRateConstant, SolidDiffFlux::BattMo.SolidDiffFlux, DiffusionCoefficient::BattMo.DiffusionCoefficient}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, Conductivity::BattMo.Conductivity, VolumeFraction::BattMo.VolumeFraction, BoundaryVoltage::BoundaryPotential{:Voltage}}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, mass_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{10, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, solid_diffusion_bc::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, solid_diffusion_bc::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, ParticleConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, SurfaceConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}, Elyte::JutulStorage{@NamedTuple{state0::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, Diffusivity::Vector{Float64}, Concentration::Vector{Float64}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{Float64}}, state::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Diffusivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Concentration::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, parameters::@NamedTuple{BruggemanCoefficient::Vector{Float64}, Volume::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, ECTransmissibilities::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Concentration::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, Concentration::Concentration}, secondary_variables::@NamedTuple{Conductivity::BattMo.Conductivity, Diffusivity::BattMo.Diffusivity, DmuDc::DmuDc, ChemCoef::ChemCoef, Charge::Charge, Mass::Mass}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, BruggemanCoefficient::BattMo.BruggemanCoefficient, VolumeFraction::BattMo.VolumeFraction}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, mass_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, Concentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}, PeAm::JutulStorage{@NamedTuple{state0::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, state::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, parameters::@NamedTuple{Volume::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, ParticleConcentration::BattMo.ParticleConcentration, SurfaceConcentration::BattMo.SurfaceConcentration}, secondary_variables::@NamedTuple{Charge::Charge, OpenCircuitPotential::BattMo.OpenCircuitPotential, ReactionRateConstant::BattMo.ReactionRateConstant, SolidDiffFlux::BattMo.SolidDiffFlux, DiffusionCoefficient::BattMo.DiffusionCoefficient}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, Conductivity::BattMo.Conductivity, VolumeFraction::BattMo.VolumeFraction}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, mass_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{10, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, solid_diffusion_bc::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, solid_diffusion_bc::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, ParticleConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, SurfaceConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}, Control::JutulStorage{@NamedTuple{state0::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{Float64}, Current::Vector{Float64}, ImaxCharge::Vector{Float64}}, state::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Current::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ImaxCharge::Vector{Float64}}, parameters::@NamedTuple{ImaxDischarge::Vector{Float64}, ImaxCharge::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Current::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::VoltageVar, Current::CurrentVar}, secondary_variables::@NamedTuple{}, parameters::@NamedTuple{ImaxDischarge::BattMo.ImaxDischarge, ImaxCharge::BattMo.ImaxCharge}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, control::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, control::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, Current::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}, state::JutulStorage{@NamedTuple{NeAm::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, Elyte::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Diffusivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Concentration::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, PeAm::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, Control::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Current::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ImaxCharge::Vector{Float64}}}}, state0::JutulStorage{@NamedTuple{NeAm::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, Elyte::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, Diffusivity::Vector{Float64}, Concentration::Vector{Float64}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{Float64}}, PeAm::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, Control::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{Float64}, Current::Vector{Float64}, ImaxCharge::Vector{Float64}}}}, cross_terms::Vector{Any}, LinearizedSystem::LinearizedSystem{EquationMajorLayout, SparseArrays.SparseMatrixCSC{Float64, Int64}, Vector{Float64}, Vector{Float64}, Vector{Float64}}, multi_model_maps::@NamedTuple{offset_map::Vector{Int64}}, eq_maps::Jutul.MutableWrapper, recorder::ProgressRecorder}}}(Jutul.DefaultExecutor(), MultiModel{:IntercalationBattery, JutulStorage{Nothing}, Vector{Jutul.CrossTermPair}, Nothing, DefaultContext, Dict{Symbol, Int64}}(JutulStorage{Nothing}(OrderedCollections.OrderedDict{Symbol, Any}(:NeAm =&gt; SimulationModel{DiscretizedDomain{DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}, @NamedTuple{flow::PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}}, Dict{JutulEntity, Int64}, Jutul.TrivialGlobalMap}, ActiveMaterial{nothing, BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}, JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Int64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_graphite_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}, Dict{Any, Any}}, FullyImplicitFormulation, DefaultContext}(DiscretizedDomain with DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19]), Jutul.IndirectionMap{Int64}([2, 13, 35, 24, 3, 14, 36, 25, 4, 15, 37, 26, 5, 16, 38, 27, 6, 17, 39, 28, 7, 18, 40, 29, 8, 19, 41, 30, 9, 20, 42, 31, 10, 21, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([2, 3, 4, 23, 24, 5, 6, 25, 26, 7, 8, 27, 28, 9, 10, 29, 30, 11, 12, 31, 32, 13, 14, 33, 34, 15, 16, 35, 36, 17, 18, 37, 38, 19, 20, 39, 40, 1, 21, 22, 41, 42], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 43]), Jutul.IndirectionMap{Int64}([11, 22, 44, 33, 23, 34, 12, 1, 1, 2, 24, 23, 34, 35, 13, 12, 2, 3, 25, 24, 35, 36, 14, 13, 3, 4, 26, 25, 36, 37, 15, 14, 4, 5, 27, 26, 37, 38, 16, 15, 5, 6, 28, 27, 38, 39, 17, 16, 6, 7, 29, 28, 39, 40, 18, 17, 7, 8, 30, 29, 40, 41, 19, 18, 8, 9, 31, 30, 41, 42, 20, 19, 9, 10, 32, 31, 42, 43, 21, 20, 10, 11, 33, 32, 43, 44, 22, 21, 1, 12, 13, 2, 24, 35, 34, 23, 2, 13, 14, 3, 25, 36, 35, 24, 3, 14, 15, 4, 26, 37, 36, 25, 4, 15, 16, 5, 27, 38, 37, 26, 5, 16, 17, 6, 28, 39, 38, 27, 6, 17, 18, 7, 29, 40, 39, 28, 7, 18, 19, 8, 30, 41, 40, 29, 8, 19, 20, 9, 31, 42, 41, 30, 9, 20, 21, 10, 32, 43, 42, 31, 10, 21, 22, 11, 33, 44, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169]), [10, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]), StaticArraysCore.SVector{3, Float64}[[0.0, 0.0, 0.0], [5.899999999999999e-6, 0.0, 0.0], [1.1799999999999999e-5, 0.0, 0.0], [1.7699999999999997e-5, 0.0, 0.0], [2.3599999999999998e-5, 0.0, 0.0], [2.95e-5, 0.0, 0.0], [3.54e-5, 0.0, 0.0], [4.13e-5, 0.0, 0.0], [4.72e-5, 0.0, 0.0], [5.31e-5, 0.0, 0.0], [5.9000000000000004e-5, 0.0, 0.0], [0.0, 0.007035, 0.0], [5.899999999999999e-6, 0.007035, 0.0], [1.1799999999999999e-5, 0.007035, 0.0], [1.7699999999999997e-5, 0.007035, 0.0], [2.3599999999999998e-5, 0.007035, 0.0], [2.95e-5, 0.007035, 0.0], [3.54e-5, 0.007035, 0.0], [4.13e-5, 0.007035, 0.0], [4.72e-5, 0.007035, 0.0], [5.31e-5, 0.007035, 0.0], [5.9000000000000004e-5, 0.007035, 0.0], [0.0, 0.0, 1.0], [5.899999999999999e-6, 0.0, 1.0], [1.1799999999999999e-5, 0.0, 1.0], [1.7699999999999997e-5, 0.0, 1.0], [2.3599999999999998e-5, 0.0, 1.0], [2.95e-5, 0.0, 1.0], [3.54e-5, 0.0, 1.0], [4.13e-5, 0.0, 1.0], [4.72e-5, 0.0, 1.0], [5.31e-5, 0.0, 1.0], [5.9000000000000004e-5, 0.0, 1.0], [0.0, 0.007035, 1.0], [5.899999999999999e-6, 0.007035, 1.0], [1.1799999999999999e-5, 0.007035, 1.0], [1.7699999999999997e-5, 0.007035, 1.0], [2.3599999999999998e-5, 0.007035, 1.0], [2.95e-5, 0.007035, 1.0], [3.54e-5, 0.007035, 1.0], [4.13e-5, 0.007035, 1.0], [4.72e-5, 0.007035, 1.0], [5.31e-5, 0.007035, 1.0], [5.9000000000000004e-5, 0.007035, 1.0]], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 42)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 18)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 10)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 9)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 42</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 18</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 9</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryDirichletFaces() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 3 4 5 6 7 8 9; 2 3 4 5 6 7 8 9 10], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0], Faces()), :face_centroids =&gt; ([5.8999999999999986e-6 1.1799999999999997e-5 1.7699999999999997e-5 2.3599999999999994e-5 2.95e-5 3.54e-5 4.13e-5 4.7199999999999995e-5 5.3099999999999996e-5; 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175; 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5], Faces()), :cell_centroids =&gt; ([2.9499999999999993e-6 8.849999999999998e-6 1.475e-5 2.0649999999999997e-5 2.6549999999999988e-5 3.2449999999999996e-5 3.834999999999999e-5 4.425000000000001e-5 5.014999999999999e-5 5.605000000000001e-5; 0.003517499999999998 0.0035174999999999985 0.003517499999999998 0.0035174999999999985 0.0035174999999999976 0.0035175 0.0035174999999999994 0.0035174999999999994 0.0035174999999999985 0.0035175; 0.5 0.5 0.49999999999999983 0.5 0.49999999999999983 0.5 0.5 0.5 0.5 0.5], Cells()), :volumes =&gt; ([4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999998e-6, 5.899999999999998e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.150649999999998e-8, 4.150649999999998e-8, 4.150650000000001e-8, 4.150650000000001e-8, 4.150650000000001e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8], BoundaryFaces()), :boundary_centroids =&gt; ([5.9000000000000004e-5 0.0 2.9499999999999993e-6 2.9499999999999993e-6 8.85e-6 8.85e-6 1.4749999999999996e-5 1.4749999999999996e-5 2.0649999999999997e-5 2.0649999999999997e-5 2.6549999999999995e-5 2.6549999999999995e-5 3.245e-5 3.245e-5 3.835e-5 3.835e-5 4.425e-5 4.425e-5 5.015e-5 5.015e-5 5.605000000000001e-5 5.605000000000001e-5 2.9499999999999997e-6 2.9499999999999997e-6 8.849999999999998e-6 8.849999999999998e-6 1.475e-5 1.4749999999999996e-5 2.0649999999999994e-5 2.0649999999999994e-5 2.6549999999999998e-5 2.655e-5 3.245e-5 3.245e-5 3.8350000000000004e-5 3.8350000000000004e-5 4.4250000000000005e-5 4.4250000000000005e-5 5.0150000000000006e-5 5.0150000000000006e-5 5.605000000000001e-5 5.605000000000001e-5; 0.0035175 0.0035175 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0035175 0.0035175 0.0035175 0.0035175 0.0035174999999999994 0.0035174999999999994 0.0035175 0.0035175 0.0035175 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175 0.0035175 0.0035175 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0], BoundaryFaces()), :boundary_normals =&gt; ([1.0 -1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0], BoundaryFaces()), :boundary_neighbors =&gt; ([10, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], BoundaryFaces()), :trans =&gt; ([1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294], Faces()), :halfTrans =&gt; ([2384.745762711865, 2384.7457627118647, 2384.745762711865, 2384.7457627118624, 2384.745762711866, 2384.745762711864, 2384.745762711866, 2384.7457627118692, 2384.7457627118556, 2384.745762711866, 2384.7457627118615, 2384.745762711872, 2384.7457627118556, 2384.7457627118556, 2384.745762711878, 2384.745762711866, 2384.7457627118615, 2384.7457627118556], HalfFaces()), :halftransfaces =&gt; ([2384.745762711865 2384.745762711865 2384.745762711866 2384.745762711866 2384.7457627118556 2384.7457627118615 2384.7457627118556 2384.745762711878 2384.7457627118615; 2384.7457627118647 2384.7457627118624 2384.745762711864 2384.7457627118692 2384.745762711866 2384.745762711872 2384.7457627118556 2384.745762711866 2384.7457627118556], Faces()), :bcTrans =&gt; ([2384.745762711866, 2384.745762711865, 0.0016773276474769021, 0.0016773276474769004, 0.0016773276474769017, 0.0016773276474769004, 0.0016773276474769015, 0.0016773276474769, 0.0016773276474769021, 0.0016773276474769006, 0.0016773276474769028, 0.0016773276474769002, 0.0016773276474769017, 0.001677327647476901, 0.001677327647476902, 0.001677327647476901, 0.001677327647476902, 0.001677327647476901, 0.0016773276474769021, 0.0016773276474769006, 0.0016773276474769017, 0.001677327647476901, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999992e-8, 8.301300000000002e-8, 8.301300000000002e-8, 8.301300000000004e-8, 8.301299999999996e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8], BoundaryFaces()), :bcDirHalfTrans =&gt; ([2384.745762711865], BoundaryDirichletFaces()), :bcDirCells =&gt; ([1], BoundaryDirichletFaces()), :bcDirInds =&gt; ([1], BoundaryDirichletFaces()), :volumeFraction =&gt; ([0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001], Cells()))) and discretizations for flow</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">, ActiveMaterial{nothing, BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}, JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Int64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_graphite_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}, Dict{Any, Any}}(JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Int64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_graphite_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}((volume_fraction = 0.7000000000000001, volume_fractions = [1.0, 0.0, 0.0], effective_density = 1862, n_charge_carriers = 1, maximum_concentration = 31540, volumetric_surface_area = 142373, theta0 = 0.001, theta100 = 0.51873811, activation_energy_of_reaction = 4000, setting_temperature_dependence = nothing, setting_butler_volmer = &quot;Standard&quot;, ecd_funcconstant = true, reaction_rate_constant_func = 1.764e-11, ocp_func = BattMo.open_circuit_potential_graphite_Xu_2015, diff_funcconstant = true, diff_func = 3.9e-14)), BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}((N = 10, rp = 1.475e-5, hT = [0.0, 3.707079331235956e-5, 0.00014828317324943824, 0.00033363713981123596, 0.0005931326929977529, 0.000926769832808989, 0.0013345485592449438, 0.001816468872305618, 0.0023725307719910118, 0.003002734258301124, 0.003707079331235956], D = 3.9e-14, div = [(1, 1, 1), (2, 1, -1), (2, 2, 1), (3, 2, -1), (3, 3, 1), (4, 3, -1), (4, 4, 1), (5, 4, -1), (5, 5, 1), (6, 5, -1), (6, 6, 1), (7, 6, -1), (7, 7, 1), (8, 7, -1), (8, 8, 1), (9, 8, -1), (9, 9, 1), (10, 9, -1)], vols = [1.3442024116700374e-17, 9.409416881690261e-17, 2.5539845821730693e-16, 4.973548923179139e-16, 8.19963471118723e-16, 1.2232241946197326e-15, 1.7071370628209474e-15, 2.2717020757223645e-15, 2.9169192333239812e-15, 3.642788535625803e-15])), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), DefaultContext(EquationMajorLayout(false), 9223372036854775807, 1), FullyImplicitFormulation(), DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19]), Jutul.IndirectionMap{Int64}([2, 13, 35, 24, 3, 14, 36, 25, 4, 15  …  41, 30, 9, 20, 42, 31, 10, 21, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([2, 3, 4, 23, 24, 5, 6, 25, 26, 7  …  38, 19, 20, 39, 40, 1, 21, 22, 41, 42], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 43]), Jutul.IndirectionMap{Int64}([11, 22, 44, 33, 23, 34, 12, 1, 1, 2  …  42, 31, 10, 21, 22, 11, 33, 44, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37  …  133, 137, 141, 145, 149, 153, 157, 161, 165, 169]), [10, 1, 1, 1, 2, 2, 3, 3, 4, 4  …  6, 6, 7, 7, 8, 8, 9, 9, 10, 10]), StaticArraysCore.SVector{3, Float64}[[0.0, 0.0, 0.0], [5.899999999999999e-6, 0.0, 0.0], [1.1799999999999999e-5, 0.0, 0.0], [1.7699999999999997e-5, 0.0, 0.0], [2.3599999999999998e-5, 0.0, 0.0], [2.95e-5, 0.0, 0.0], [3.54e-5, 0.0, 0.0], [4.13e-5, 0.0, 0.0], [4.72e-5, 0.0, 0.0], [5.31e-5, 0.0, 0.0]  …  [5.899999999999999e-6, 0.007035, 1.0], [1.1799999999999999e-5, 0.007035, 1.0], [1.7699999999999997e-5, 0.007035, 1.0], [2.3599999999999998e-5, 0.007035, 1.0], [2.95e-5, 0.007035, 1.0], [3.54e-5, 0.007035, 1.0], [4.13e-5, 0.007035, 1.0], [4.72e-5, 0.007035, 1.0], [5.31e-5, 0.007035, 1.0], [5.9000000000000004e-5, 0.007035, 1.0]], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, -1  …  -33, -34, -35, -36, -37, -38, -39, -40, -41, -42], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 42)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 18)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 10)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 9)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 42</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 18</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 9</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryDirichletFaces() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 … 8 9; 2 3 … 9 10], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 … 1.0 1.0; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0], Faces()), :face_centroids =&gt; ([5.8999999999999986e-6 1.1799999999999997e-5 … 4.7199999999999995e-5 5.3099999999999996e-5; 0.0035175 0.0035175 … 0.0035175 0.0035175; 0.5 0.5 … 0.5 0.5], Faces()), :cell_centroids =&gt; ([2.9499999999999993e-6 8.849999999999998e-6 … 5.014999999999999e-5 5.605000000000001e-5; 0.003517499999999998 0.0035174999999999985 … 0.0035174999999999985 0.0035175; 0.5 0.5 … 0.5 0.5], Cells()), :volumes =&gt; ([4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999998e-6, 5.899999999999998e-6, 5.900000000000001e-6, 5.900000000000001e-6  …  4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8], BoundaryFaces()), :boundary_centroids =&gt; ([5.9000000000000004e-5 0.0 … 5.605000000000001e-5 5.605000000000001e-5; 0.0035175 0.0035175 … 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 … 0.0 1.0], BoundaryFaces())…)), OrderedCollections.OrderedDict{Symbol, Any}(:Voltage =&gt; Voltage(), :ParticleConcentration =&gt; BattMo.ParticleConcentration(), :SurfaceConcentration =&gt; BattMo.SurfaceConcentration()), OrderedCollections.OrderedDict{Symbol, Any}(:Charge =&gt; Charge(), :OpenCircuitPotential =&gt; BattMo.OpenCircuitPotential(), :ReactionRateConstant =&gt; BattMo.ReactionRateConstant(), :SolidDiffFlux =&gt; BattMo.SolidDiffFlux(), :DiffusionCoefficient =&gt; BattMo.DiffusionCoefficient()), OrderedCollections.OrderedDict{Symbol, Any}(:ECTransmissibilities =&gt; BattMo.ECTransmissibilities(), :Volume =&gt; BattMo.Volume(), :Temperature =&gt; Temperature(), :Conductivity =&gt; BattMo.Conductivity(), :VolumeFraction =&gt; BattMo.VolumeFraction(), :BoundaryVoltage =&gt; BoundaryPotential{:Voltage}()), OrderedCollections.OrderedDict{Symbol, Any}(:charge_conservation =&gt; ConservationLaw{:Charge, PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}, Jutul.DefaultFlux, 1}(PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}(TPFA{Int64}[TPFA{Int64}(1, 2, 1), TPFA{Int64}(2, 3, 1), TPFA{Int64}(3, 4, 1), TPFA{Int64}(4, 5, 1), TPFA{Int64}(5, 6, 1), TPFA{Int64}(6, 7, 1), TPFA{Int64}(7, 8, 1), TPFA{Int64}(8, 9, 1), TPFA{Int64}(9, 10, 1)], SPU{Int64}[SPU{Int64}(1, 2), SPU{Int64}(2, 3), SPU{Int64}(3, 4), SPU{Int64}(4, 5), SPU{Int64}(5, 6), SPU{Int64}(6, 7), SPU{Int64}(7, 8), SPU{Int64}(8, 9), SPU{Int64}(9, 10)], (cells = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9], faces = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], face_pos = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19], face_sign = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1])), Jutul.DefaultFlux()), :mass_conservation =&gt; SolidMassCons(), :solid_diffusion_bc =&gt; BattMo.SolidDiffusionBc()), [:Voltage, :ParticleConcentration, :SurfaceConcentration, :Charge, :OpenCircuitPotential, :Temperature, :ReactionRateConstant, :DiffusionCoefficient], OrderedCollections.OrderedDict{Symbol, Any}()), :Elyte =&gt; SimulationModel{DiscretizedDomain{DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}, @NamedTuple{flow::PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}}, Dict{JutulEntity, Int64}, Jutul.TrivialGlobalMap}, Electrolyte{Dict{Any, Any}}, FullyImplicitFormulation, DefaultContext}(DiscretizedDomain with DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 45]), Jutul.IndirectionMap{Int64}([2, 26, 74, 50, 3, 27, 75, 51, 4, 28, 76, 52, 5, 29, 77, 53, 6, 30, 78, 54, 7, 31, 79, 55, 8, 32, 80, 56, 9, 33, 81, 57, 10, 34, 82, 58, 11, 35, 83, 59, 12, 36, 84, 60, 13, 37, 85, 61, 14, 38, 86, 62, 15, 39, 87, 63, 16, 40, 88, 64, 17, 41, 89, 65, 18, 42, 90, 66, 19, 43, 91, 67, 20, 44, 92, 68, 21, 45, 93, 69, 22, 46, 94, 70, 23, 47, 95, 71], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([1, 3, 4, 49, 50, 5, 6, 51, 52, 7, 8, 53, 54, 9, 10, 55, 56, 11, 12, 57, 58, 13, 14, 59, 60, 15, 16, 61, 62, 17, 18, 63, 64, 19, 20, 65, 66, 21, 22, 67, 68, 23, 24, 69, 70, 25, 26, 71, 72, 27, 28, 73, 74, 29, 30, 75, 76, 31, 32, 77, 78, 33, 34, 79, 80, 35, 36, 81, 82, 37, 38, 83, 84, 39, 40, 85, 86, 41, 42, 87, 88, 43, 44, 89, 90, 45, 46, 91, 92, 2, 47, 48, 93, 94], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 95]), Jutul.IndirectionMap{Int64}([49, 73, 25, 1, 24, 48, 96, 72, 1, 2, 50, 49, 73, 74, 26, 25, 2, 3, 51, 50, 74, 75, 27, 26, 3, 4, 52, 51, 75, 76, 28, 27, 4, 5, 53, 52, 76, 77, 29, 28, 5, 6, 54, 53, 77, 78, 30, 29, 6, 7, 55, 54, 78, 79, 31, 30, 7, 8, 56, 55, 79, 80, 32, 31, 8, 9, 57, 56, 80, 81, 33, 32, 9, 10, 58, 57, 81, 82, 34, 33, 10, 11, 59, 58, 82, 83, 35, 34, 11, 12, 60, 59, 83, 84, 36, 35, 12, 13, 61, 60, 84, 85, 37, 36, 13, 14, 62, 61, 85, 86, 38, 37, 14, 15, 63, 62, 86, 87, 39, 38, 15, 16, 64, 63, 87, 88, 40, 39, 16, 17, 65, 64, 88, 89, 41, 40, 17, 18, 66, 65, 89, 90, 42, 41, 18, 19, 67, 66, 90, 91, 43, 42, 19, 20, 68, 67, 91, 92, 44, 43, 20, 21, 69, 68, 92, 93, 45, 44, 21, 22, 70, 69, 93, 94, 46, 45, 22, 23, 71, 70, 94, 95, 47, 46, 23, 24, 72, 71, 95, 96, 48, 47, 1, 25, 26, 2, 50, 74, 73, 49, 2, 26, 27, 3, 51, 75, 74, 50, 3, 27, 28, 4, 52, 76, 75, 51, 4, 28, 29, 5, 53, 77, 76, 52, 5, 29, 30, 6, 54, 78, 77, 53, 6, 30, 31, 7, 55, 79, 78, 54, 7, 31, 32, 8, 56, 80, 79, 55, 8, 32, 33, 9, 57, 81, 80, 56, 9, 33, 34, 10, 58, 82, 81, 57, 10, 34, 35, 11, 59, 83, 82, 58, 11, 35, 36, 12, 60, 84, 83, 59, 12, 36, 37, 13, 61, 85, 84, 60, 13, 37, 38, 14, 62, 86, 85, 61, 14, 38, 39, 15, 63, 87, 86, 62, 15, 39, 40, 16, 64, 88, 87, 63, 16, 40, 41, 17, 65, 89, 88, 64, 17, 41, 42, 18, 66, 90, 89, 65, 18, 42, 43, 19, 67, 91, 90, 66, 19, 43, 44, 20, 68, 92, 91, 67, 20, 44, 45, 21, 69, 93, 92, 68, 21, 45, 46, 22, 70, 94, 93, 69, 22, 46, 47, 23, 71, 95, 94, 70, 23, 47, 48, 24, 72, 96, 95, 71], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177, 181, 185, 189, 193, 197, 201, 205, 209, 213, 217, 221, 225, 229, 233, 237, 241, 245, 249, 253, 257, 261, 265, 269, 273, 277, 281, 285, 289, 293, 297, 301, 305, 309, 313, 317, 321, 325, 329, 333, 337, 341, 345, 349, 353, 357, 361, 365, 369, 373, 377]), [1, 23, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23]), StaticArraysCore.SVector{3, Float64}[[0.0, 0.0, 0.0], [5.899999999999999e-6, 0.0, 0.0], [1.1799999999999999e-5, 0.0, 0.0], [1.7699999999999997e-5, 0.0, 0.0], [2.3599999999999998e-5, 0.0, 0.0], [2.95e-5, 0.0, 0.0], [3.54e-5, 0.0, 0.0], [4.13e-5, 0.0, 0.0], [4.72e-5, 0.0, 0.0], [5.31e-5, 0.0, 0.0], [5.9000000000000004e-5, 0.0, 0.0], [6.566666666666667e-5, 0.0, 0.0], [7.233333333333333e-5, 0.0, 0.0], [7.9e-5, 0.0, 0.0], [8.82e-5, 0.0, 0.0], [9.740000000000001e-5, 0.0, 0.0], [0.00010660000000000002, 0.0, 0.0], [0.00011580000000000002, 0.0, 0.0], [0.00012500000000000003, 0.0, 0.0], [0.00013420000000000004, 0.0, 0.0], [0.00014340000000000004, 0.0, 0.0], [0.00015260000000000005, 0.0, 0.0], [0.00016180000000000006, 0.0, 0.0], [0.00017100000000000006, 0.0, 0.0], [0.0, 0.007035, 0.0], [5.899999999999999e-6, 0.007035, 0.0], [1.1799999999999999e-5, 0.007035, 0.0], [1.7699999999999997e-5, 0.007035, 0.0], [2.3599999999999998e-5, 0.007035, 0.0], [2.95e-5, 0.007035, 0.0], [3.54e-5, 0.007035, 0.0], [4.13e-5, 0.007035, 0.0], [4.72e-5, 0.007035, 0.0], [5.31e-5, 0.007035, 0.0], [5.9000000000000004e-5, 0.007035, 0.0], [6.566666666666667e-5, 0.007035, 0.0], [7.233333333333333e-5, 0.007035, 0.0], [7.9e-5, 0.007035, 0.0], [8.82e-5, 0.007035, 0.0], [9.740000000000001e-5, 0.007035, 0.0], [0.00010660000000000002, 0.007035, 0.0], [0.00011580000000000002, 0.007035, 0.0], [0.00012500000000000003, 0.007035, 0.0], [0.00013420000000000004, 0.007035, 0.0], [0.00014340000000000004, 0.007035, 0.0], [0.00015260000000000005, 0.007035, 0.0], [0.00016180000000000006, 0.007035, 0.0], [0.00017100000000000006, 0.007035, 0.0], [0.0, 0.0, 1.0], [5.899999999999999e-6, 0.0, 1.0], [1.1799999999999999e-5, 0.0, 1.0], [1.7699999999999997e-5, 0.0, 1.0], [2.3599999999999998e-5, 0.0, 1.0], [2.95e-5, 0.0, 1.0], [3.54e-5, 0.0, 1.0], [4.13e-5, 0.0, 1.0], [4.72e-5, 0.0, 1.0], [5.31e-5, 0.0, 1.0], [5.9000000000000004e-5, 0.0, 1.0], [6.566666666666667e-5, 0.0, 1.0], [7.233333333333333e-5, 0.0, 1.0], [7.9e-5, 0.0, 1.0], [8.82e-5, 0.0, 1.0], [9.740000000000001e-5, 0.0, 1.0], [0.00010660000000000002, 0.0, 1.0], [0.00011580000000000002, 0.0, 1.0], [0.00012500000000000003, 0.0, 1.0], [0.00013420000000000004, 0.0, 1.0], [0.00014340000000000004, 0.0, 1.0], [0.00015260000000000005, 0.0, 1.0], [0.00016180000000000006, 0.0, 1.0], [0.00017100000000000006, 0.0, 1.0], [0.0, 0.007035, 1.0], [5.899999999999999e-6, 0.007035, 1.0], [1.1799999999999999e-5, 0.007035, 1.0], [1.7699999999999997e-5, 0.007035, 1.0], [2.3599999999999998e-5, 0.007035, 1.0], [2.95e-5, 0.007035, 1.0], [3.54e-5, 0.007035, 1.0], [4.13e-5, 0.007035, 1.0], [4.72e-5, 0.007035, 1.0], [5.31e-5, 0.007035, 1.0], [5.9000000000000004e-5, 0.007035, 1.0], [6.566666666666667e-5, 0.007035, 1.0], [7.233333333333333e-5, 0.007035, 1.0], [7.9e-5, 0.007035, 1.0], [8.82e-5, 0.007035, 1.0], [9.740000000000001e-5, 0.007035, 1.0], [0.00010660000000000002, 0.007035, 1.0], [0.00011580000000000002, 0.007035, 1.0], [0.00012500000000000003, 0.007035, 1.0], [0.00013420000000000004, 0.007035, 1.0], [0.00014340000000000004, 0.007035, 1.0], [0.00015260000000000005, 0.007035, 1.0], [0.00016180000000000006, 0.007035, 1.0], [0.00017100000000000006, 0.007035, 1.0]], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 94)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 44)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 23)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 22)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 94</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 44</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 23</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 22</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22; 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0], Faces()), :face_centroids =&gt; ([5.8999999999999986e-6 1.1799999999999997e-5 1.7699999999999997e-5 2.3599999999999994e-5 2.95e-5 3.54e-5 4.13e-5 4.7199999999999995e-5 5.3099999999999996e-5 5.9000000000000004e-5 6.566666666666667e-5 7.233333333333333e-5 7.9e-5 8.82e-5 9.740000000000001e-5 0.0001066 0.00011580000000000002 0.00012500000000000003 0.00013420000000000004 0.00014340000000000004 0.00015260000000000005 0.00016180000000000008; 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175; 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5], Faces()), :cell_centroids =&gt; ([2.9499999999999993e-6 8.849999999999998e-6 1.475e-5 2.0649999999999997e-5 2.6549999999999988e-5 3.2449999999999996e-5 3.834999999999999e-5 4.425000000000001e-5 5.014999999999999e-5 5.605000000000001e-5 6.233333333333334e-5 6.900000000000004e-5 7.566666666666664e-5 8.360000000000001e-5 9.280000000000005e-5 0.000102 0.0001112 0.00012040000000000008 0.00012960000000000006 0.00013880000000000007 0.0001480000000000001 0.0001572000000000001 0.00016640000000000006; 0.003517499999999998 0.0035174999999999985 0.003517499999999998 0.0035174999999999985 0.0035174999999999976 0.0035175 0.0035174999999999994 0.0035174999999999994 0.0035174999999999985 0.0035175 0.0035175000000000007 0.0035175000000000007 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175 0.003517500000000001 0.0035174999999999994 0.0035175000000000002 0.0035174999999999994 0.0035175 0.0035175000000000002 0.0035175; 0.5 0.5 0.49999999999999983 0.5 0.49999999999999983 0.5 0.5 0.5 0.5 0.5 0.5 0.49999999999999994 0.5 0.5000000000000001 0.5000000000000002 0.5 0.5000000000000002 0.5000000000000001 0.5000000000000003 0.5 0.5 0.5 0.5], Cells()), :volumes =&gt; ([4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8, 4.6900000000000016e-8, 4.6899999999999977e-8, 4.6899999999999924e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999998e-6, 5.899999999999998e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 6.666666666666668e-6, 6.666666666666668e-6, 6.6666666666666616e-6, 6.6666666666666616e-6, 6.6666666666666616e-6, 6.6666666666666616e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.150649999999998e-8, 4.150649999999998e-8, 4.150650000000001e-8, 4.150650000000001e-8, 4.150650000000001e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.690000000000001e-8, 4.69e-8, 4.689999999999996e-8, 4.6899999999999963e-8, 4.6899999999999963e-8, 4.6899999999999963e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8], BoundaryFaces()), :boundary_centroids =&gt; ([0.0 0.00017100000000000006 2.9499999999999993e-6 2.9499999999999993e-6 8.85e-6 8.85e-6 1.4749999999999996e-5 1.4749999999999996e-5 2.0649999999999997e-5 2.0649999999999997e-5 2.6549999999999995e-5 2.6549999999999995e-5 3.245e-5 3.245e-5 3.835e-5 3.835e-5 4.425e-5 4.425e-5 5.015e-5 5.015e-5 5.605000000000001e-5 5.605000000000001e-5 6.233333333333332e-5 6.233333333333332e-5 6.9e-5 6.9e-5 7.566666666666667e-5 7.566666666666667e-5 8.36e-5 8.36e-5 9.28e-5 9.28e-5 0.00010200000000000001 0.00010200000000000001 0.0001112 0.0001112 0.00012040000000000003 0.00012040000000000003 0.00012960000000000003 0.00012960000000000003 0.00013880000000000004 0.00013880000000000004 0.00014800000000000005 0.00014800000000000005 0.00015720000000000005 0.00015720000000000005 0.00016640000000000006 0.00016640000000000006 2.9499999999999997e-6 2.9499999999999997e-6 8.849999999999998e-6 8.849999999999998e-6 1.475e-5 1.4749999999999996e-5 2.0649999999999994e-5 2.0649999999999994e-5 2.6549999999999998e-5 2.655e-5 3.245e-5 3.245e-5 3.8350000000000004e-5 3.8350000000000004e-5 4.4250000000000005e-5 4.4250000000000005e-5 5.0150000000000006e-5 5.0150000000000006e-5 5.605000000000001e-5 5.605000000000001e-5 6.233333333333332e-5 6.233333333333334e-5 6.900000000000001e-5 6.9e-5 7.566666666666667e-5 7.566666666666666e-5 8.36e-5 8.36e-5 9.28e-5 9.28e-5 0.00010200000000000001 0.00010200000000000001 0.00011120000000000003 0.00011120000000000002 0.00012040000000000001 0.00012040000000000003 0.00012960000000000003 0.00012960000000000003 0.00013880000000000004 0.00013880000000000007 0.00014800000000000005 0.00014800000000000005 0.00015720000000000003 0.00015720000000000005 0.00016640000000000006 0.00016640000000000006; 0.0035175 0.0035175 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0035175 0.0035175 0.0035175 0.0035175 0.0035174999999999994 0.0035174999999999994 0.0035175 0.0035175 0.0035175 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175 0.0035175 0.0035175 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175 0.0035175 0.0035174999999999994 0.0035175 0.0035175 0.0035175 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.49999999999999994 0.5 0.49999999999999994 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0], BoundaryFaces()), :boundary_normals =&gt; ([-1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0], BoundaryFaces()), :boundary_neighbors =&gt; ([1, 23, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23], BoundaryFaces()), :trans =&gt; ([1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294, 1119.628647214855, 1055.2499999999943, 1055.2500000000093, 886.764705882349, 764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], Faces()), :halfTrans =&gt; ([2384.745762711865, 2384.7457627118647, 2384.745762711865, 2384.7457627118624, 2384.745762711866, 2384.745762711864, 2384.745762711866, 2384.7457627118692, 2384.7457627118556, 2384.745762711866, 2384.7457627118615, 2384.745762711872, 2384.7457627118556, 2384.7457627118556, 2384.745762711878, 2384.745762711866, 2384.7457627118615, 2384.7457627118556, 2384.745762711866, 2110.5000000000014, 2110.499999999997, 2110.4999999999804, 2110.500000000023, 2110.500000000014, 2110.4999999999886, 1529.3478260869508, 1529.34782608696, 1529.3478260869417, 1529.3478260869688, 1529.34782608696, 1529.3478260869554, 1529.3478260869554, 1529.3478260869508, 1529.3478260869372, 1529.3478260869736, 1529.3478260869465, 1529.3478260869642, 1529.3478260869465, 1529.3478260869642, 1529.3478260869372, 1529.3478260869736, 1529.3478260869372, 1529.3478260869642, 1529.3478260869642], HalfFaces()), :halftransfaces =&gt; ([2384.745762711865 2384.745762711865 2384.745762711866 2384.745762711866 2384.7457627118556 2384.7457627118615 2384.7457627118556 2384.745762711878 2384.7457627118615 2384.745762711866 2110.499999999997 2110.500000000023 2110.4999999999886 1529.34782608696 1529.3478260869688 1529.3478260869554 1529.3478260869508 1529.3478260869736 1529.3478260869642 1529.3478260869642 1529.3478260869736 1529.3478260869642; 2384.7457627118647 2384.7457627118624 2384.745762711864 2384.7457627118692 2384.745762711866 2384.745762711872 2384.7457627118556 2384.745762711866 2384.7457627118556 2110.5000000000014 2110.4999999999804 2110.500000000014 1529.3478260869508 1529.3478260869417 1529.34782608696 1529.3478260869554 1529.3478260869372 1529.3478260869465 1529.3478260869465 1529.3478260869372 1529.3478260869372 1529.3478260869642], Faces()), :bcTrans =&gt; ([2384.745762711865, 1529.3478260869554, 0.0016773276474769021, 0.0016773276474769004, 0.0016773276474769017, 0.0016773276474769004, 0.0016773276474769015, 0.0016773276474769, 0.0016773276474769021, 0.0016773276474769006, 0.0016773276474769028, 0.0016773276474769002, 0.0016773276474769017, 0.001677327647476901, 0.001677327647476902, 0.001677327647476901, 0.001677327647476902, 0.001677327647476901, 0.0016773276474769021, 0.0016773276474769006, 0.0016773276474769017, 0.001677327647476901, 0.0018952854773750297, 0.0018952854773750306, 0.0018952854773750276, 0.0018952854773750286, 0.0018952854773750282, 0.0018952854773750286, 0.0026154939587775426, 0.0026154939587775435, 0.0026154939587775426, 0.0026154939587775435, 0.002615493958777543, 0.002615493958777543, 0.0026154939587775417, 0.0026154939587775435, 0.0026154939587775435, 0.0026154939587775426, 0.0026154939587775426, 0.0026154939587775435, 0.0026154939587775435, 0.0026154939587775426, 0.002615493958777543, 0.002615493958777543, 0.0026154939587775426, 0.0026154939587775435, 0.002615493958777543, 0.002615493958777543, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999992e-8, 8.301300000000002e-8, 8.301300000000002e-8, 8.301300000000004e-8, 8.301299999999996e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 9.380000000000002e-8, 9.38e-8, 9.379999999999993e-8, 9.379999999999993e-8, 9.379999999999993e-8, 9.379999999999993e-8, 1.2944400000000006e-7, 1.294440000000001e-7, 1.2944400000000003e-7, 1.2944400000000014e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000003e-7, 1.2944400000000014e-7, 1.2944400000000006e-7, 1.294440000000001e-7, 1.2944399999999998e-7, 1.294440000000002e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7], BoundaryFaces()), :volumeFraction =&gt; ([0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.4, 0.4, 0.4, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28], Cells()), :separator_volume_fraction =&gt; ([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6, 0.6, 0.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], Cells()))) and discretizations for flow</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">, Electrolyte{Dict{Any, Any}}(JutulStorage{Nothing}(OrderedCollections.OrderedDict{Symbol, Any}(:transference =&gt; 0.2594, :charge =&gt; 1, :separator_porosity =&gt; 0.4, :bruggeman =&gt; 1.5, :electrolyte_density =&gt; 1210, :separator_density =&gt; 779, :diffusivity_func =&gt; RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:c, :T), BattMo.var&quot;#_RGF_ModTag&quot;, BattMo.var&quot;#_RGF_ModTag&quot;, (0xee2235f8, 0xd04ba524, 0x244c5077, 0x15da4b3a, 0xf624324c), Expr}(quote</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">    #= none:1 =#</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">    #= none:1 =#</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    return (8.794 * 10 ^ -11 * (c / 1000) ^ 2 - 3.972 * 10 ^ -10 * (c / 1000)) + 4.862 * 10 ^ -10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">end), :conductivity_func =&gt; RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:c, :T), BattMo.var&quot;#_RGF_ModTag&quot;, BattMo.var&quot;#_RGF_ModTag&quot;, (0x6d3933d7, 0x54a514ab, 0x5fe1ef12, 0x21826394, 0xabdf6a37), Expr}(quote</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">    #= none:1 =#</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">    #= none:1 =#</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    return (0.1297 * (c / 1000) ^ 3 - 2.51 * (c / 1000) ^ 1.5) + 3.329 * (c / 1000)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">end))), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), DefaultContext(EquationMajorLayout(false), 9223372036854775807, 1), FullyImplicitFormulation(), DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5  …  18, 18, 19, 19, 20, 20, 21, 21, 22, 22], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18  …  28, 30, 32, 34, 36, 38, 40, 42, 44, 45]), Jutul.IndirectionMap{Int64}([2, 26, 74, 50, 3, 27, 75, 51, 4, 28  …  93, 69, 22, 46, 94, 70, 23, 47, 95, 71], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37  …  53, 57, 61, 65, 69, 73, 77, 81, 85, 89]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11)  …  (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([1, 3, 4, 49, 50, 5, 6, 51, 52, 7  …  90, 45, 46, 91, 92, 2, 47, 48, 93, 94], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38  …  58, 62, 66, 70, 74, 78, 82, 86, 90, 95]), Jutul.IndirectionMap{Int64}([49, 73, 25, 1, 24, 48, 96, 72, 1, 2  …  94, 70, 23, 47, 48, 24, 72, 96, 95, 71], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37  …  341, 345, 349, 353, 357, 361, 365, 369, 373, 377]), [1, 23, 1, 1, 2, 2, 3, 3, 4, 4  …  19, 19, 20, 20, 21, 21, 22, 22, 23, 23]), StaticArraysCore.SVector{3, Float64}[[0.0, 0.0, 0.0], [5.899999999999999e-6, 0.0, 0.0], [1.1799999999999999e-5, 0.0, 0.0], [1.7699999999999997e-5, 0.0, 0.0], [2.3599999999999998e-5, 0.0, 0.0], [2.95e-5, 0.0, 0.0], [3.54e-5, 0.0, 0.0], [4.13e-5, 0.0, 0.0], [4.72e-5, 0.0, 0.0], [5.31e-5, 0.0, 0.0]  …  [8.82e-5, 0.007035, 1.0], [9.740000000000001e-5, 0.007035, 1.0], [0.00010660000000000002, 0.007035, 1.0], [0.00011580000000000002, 0.007035, 1.0], [0.00012500000000000003, 0.007035, 1.0], [0.00013420000000000004, 0.007035, 1.0], [0.00014340000000000004, 0.007035, 1.0], [0.00015260000000000005, 0.007035, 1.0], [0.00016180000000000006, 0.007035, 1.0], [0.00017100000000000006, 0.007035, 1.0]], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10  …  -85, -86, -87, -88, -89, -90, -91, -92, -93, -94], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 94)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 44)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 23)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 22)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 94</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 44</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 23</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 22</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 … 21 22; 2 3 … 22 23], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035  …  0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 … 1.0 1.0; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0], Faces()), :face_centroids =&gt; ([5.8999999999999986e-6 1.1799999999999997e-5 … 0.00015260000000000005 0.00016180000000000008; 0.0035175 0.0035175 … 0.0035175 0.0035175; 0.5 0.5 … 0.5 0.5], Faces()), :cell_centroids =&gt; ([2.9499999999999993e-6 8.849999999999998e-6 … 0.0001572000000000001 0.00016640000000000006; 0.003517499999999998 0.0035174999999999985 … 0.0035175000000000002 0.0035175; 0.5 0.5 … 0.5 0.5], Cells()), :volumes =&gt; ([4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8  …  6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6  …  18, 19, 19, 20, 20, 21, 21, 22, 22, 23], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5  …  18, 18, 19, 19, 20, 20, 21, 21, 22, 22], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999998e-6, 5.899999999999998e-6, 5.900000000000001e-6, 5.900000000000001e-6  …  6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8], BoundaryFaces()), :boundary_centroids =&gt; ([0.0 0.00017100000000000006 … 0.00016640000000000006 0.00016640000000000006; 0.0035175 0.0035175 … 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 … 0.0 1.0], BoundaryFaces())…)), OrderedCollections.OrderedDict{Symbol, Any}(:Voltage =&gt; Voltage(), :Concentration =&gt; Concentration()), OrderedCollections.OrderedDict{Symbol, Any}(:Conductivity =&gt; BattMo.Conductivity(), :Diffusivity =&gt; BattMo.Diffusivity(), :DmuDc =&gt; DmuDc(), :ChemCoef =&gt; ChemCoef(), :Charge =&gt; Charge(), :Mass =&gt; Mass()), OrderedCollections.OrderedDict{Symbol, Any}(:ECTransmissibilities =&gt; BattMo.ECTransmissibilities(), :Volume =&gt; BattMo.Volume(), :Temperature =&gt; Temperature(), :BruggemanCoefficient =&gt; BattMo.BruggemanCoefficient(), :VolumeFraction =&gt; BattMo.VolumeFraction()), OrderedCollections.OrderedDict{Symbol, Any}(:charge_conservation =&gt; ConservationLaw{:Charge, PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}, Jutul.DefaultFlux, 1}(PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}(TPFA{Int64}[TPFA{Int64}(1, 2, 1), TPFA{Int64}(2, 3, 1), TPFA{Int64}(3, 4, 1), TPFA{Int64}(4, 5, 1), TPFA{Int64}(5, 6, 1), TPFA{Int64}(6, 7, 1), TPFA{Int64}(7, 8, 1), TPFA{Int64}(8, 9, 1), TPFA{Int64}(9, 10, 1), TPFA{Int64}(10, 11, 1)  …  TPFA{Int64}(13, 14, 1), TPFA{Int64}(14, 15, 1), TPFA{Int64}(15, 16, 1), TPFA{Int64}(16, 17, 1), TPFA{Int64}(17, 18, 1), TPFA{Int64}(18, 19, 1), TPFA{Int64}(19, 20, 1), TPFA{Int64}(20, 21, 1), TPFA{Int64}(21, 22, 1), TPFA{Int64}(22, 23, 1)], SPU{Int64}[SPU{Int64}(1, 2), SPU{Int64}(2, 3), SPU{Int64}(3, 4), SPU{Int64}(4, 5), SPU{Int64}(5, 6), SPU{Int64}(6, 7), SPU{Int64}(7, 8), SPU{Int64}(8, 9), SPU{Int64}(9, 10), SPU{Int64}(10, 11)  …  SPU{Int64}(13, 14), SPU{Int64}(14, 15), SPU{Int64}(15, 16), SPU{Int64}(16, 17), SPU{Int64}(17, 18), SPU{Int64}(18, 19), SPU{Int64}(19, 20), SPU{Int64}(20, 21), SPU{Int64}(21, 22), SPU{Int64}(22, 23)], (cells = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5  …  19, 18, 20, 19, 21, 20, 22, 21, 23, 22], faces = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5  …  18, 18, 19, 19, 20, 20, 21, 21, 22, 22], face_pos = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18  …  28, 30, 32, 34, 36, 38, 40, 42, 44, 45], face_sign = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1  …  1, -1, 1, -1, 1, -1, 1, -1, 1, -1])), Jutul.DefaultFlux()), :mass_conservation =&gt; ConservationLaw{:Mass, PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}, Jutul.DefaultFlux, 1}(PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}(TPFA{Int64}[TPFA{Int64}(1, 2, 1), TPFA{Int64}(2, 3, 1), TPFA{Int64}(3, 4, 1), TPFA{Int64}(4, 5, 1), TPFA{Int64}(5, 6, 1), TPFA{Int64}(6, 7, 1), TPFA{Int64}(7, 8, 1), TPFA{Int64}(8, 9, 1), TPFA{Int64}(9, 10, 1), TPFA{Int64}(10, 11, 1)  …  TPFA{Int64}(13, 14, 1), TPFA{Int64}(14, 15, 1), TPFA{Int64}(15, 16, 1), TPFA{Int64}(16, 17, 1), TPFA{Int64}(17, 18, 1), TPFA{Int64}(18, 19, 1), TPFA{Int64}(19, 20, 1), TPFA{Int64}(20, 21, 1), TPFA{Int64}(21, 22, 1), TPFA{Int64}(22, 23, 1)], SPU{Int64}[SPU{Int64}(1, 2), SPU{Int64}(2, 3), SPU{Int64}(3, 4), SPU{Int64}(4, 5), SPU{Int64}(5, 6), SPU{Int64}(6, 7), SPU{Int64}(7, 8), SPU{Int64}(8, 9), SPU{Int64}(9, 10), SPU{Int64}(10, 11)  …  SPU{Int64}(13, 14), SPU{Int64}(14, 15), SPU{Int64}(15, 16), SPU{Int64}(16, 17), SPU{Int64}(17, 18), SPU{Int64}(18, 19), SPU{Int64}(19, 20), SPU{Int64}(20, 21), SPU{Int64}(21, 22), SPU{Int64}(22, 23)], (cells = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5  …  19, 18, 20, 19, 21, 20, 22, 21, 23, 22], faces = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5  …  18, 18, 19, 19, 20, 20, 21, 21, 22, 22], face_pos = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18  …  28, 30, 32, 34, 36, 38, 40, 42, 44, 45], face_sign = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1  …  1, -1, 1, -1, 1, -1, 1, -1, 1, -1])), Jutul.DefaultFlux())), [:Voltage, :Concentration, :Charge, :Mass, :Conductivity, :Diffusivity], OrderedCollections.OrderedDict{Symbol, Any}()), :PeAm =&gt; SimulationModel{DiscretizedDomain{DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}, @NamedTuple{flow::PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}}, Dict{JutulEntity, Int64}, Jutul.TrivialGlobalMap}, ActiveMaterial{nothing, BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}, JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Float64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_lfp_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}, Dict{Any, Any}}, FullyImplicitFormulation, DefaultContext}(DiscretizedDomain with DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19]), Jutul.IndirectionMap{Int64}([2, 13, 35, 24, 3, 14, 36, 25, 4, 15, 37, 26, 5, 16, 38, 27, 6, 17, 39, 28, 7, 18, 40, 29, 8, 19, 41, 30, 9, 20, 42, 31, 10, 21, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([1, 3, 4, 23, 24, 5, 6, 25, 26, 7, 8, 27, 28, 9, 10, 29, 30, 11, 12, 31, 32, 13, 14, 33, 34, 15, 16, 35, 36, 17, 18, 37, 38, 19, 20, 39, 40, 2, 21, 22, 41, 42], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 43]), Jutul.IndirectionMap{Int64}([23, 34, 12, 1, 11, 22, 44, 33, 1, 2, 24, 23, 34, 35, 13, 12, 2, 3, 25, 24, 35, 36, 14, 13, 3, 4, 26, 25, 36, 37, 15, 14, 4, 5, 27, 26, 37, 38, 16, 15, 5, 6, 28, 27, 38, 39, 17, 16, 6, 7, 29, 28, 39, 40, 18, 17, 7, 8, 30, 29, 40, 41, 19, 18, 8, 9, 31, 30, 41, 42, 20, 19, 9, 10, 32, 31, 42, 43, 21, 20, 10, 11, 33, 32, 43, 44, 22, 21, 1, 12, 13, 2, 24, 35, 34, 23, 2, 13, 14, 3, 25, 36, 35, 24, 3, 14, 15, 4, 26, 37, 36, 25, 4, 15, 16, 5, 27, 38, 37, 26, 5, 16, 17, 6, 28, 39, 38, 27, 6, 17, 18, 7, 29, 40, 39, 28, 7, 18, 19, 8, 30, 41, 40, 29, 8, 19, 20, 9, 31, 42, 41, 30, 9, 20, 21, 10, 32, 43, 42, 31, 10, 21, 22, 11, 33, 44, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169]), [1, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]), StaticArraysCore.SVector{3, Float64}[[7.9e-5, 0.0, 0.0], [8.82e-5, 0.0, 0.0], [9.740000000000001e-5, 0.0, 0.0], [0.00010660000000000002, 0.0, 0.0], [0.00011580000000000002, 0.0, 0.0], [0.00012500000000000003, 0.0, 0.0], [0.00013420000000000004, 0.0, 0.0], [0.00014340000000000004, 0.0, 0.0], [0.00015260000000000005, 0.0, 0.0], [0.00016180000000000006, 0.0, 0.0], [0.00017100000000000006, 0.0, 0.0], [7.9e-5, 0.007035, 0.0], [8.82e-5, 0.007035, 0.0], [9.740000000000001e-5, 0.007035, 0.0], [0.00010660000000000002, 0.007035, 0.0], [0.00011580000000000002, 0.007035, 0.0], [0.00012500000000000003, 0.007035, 0.0], [0.00013420000000000004, 0.007035, 0.0], [0.00014340000000000004, 0.007035, 0.0], [0.00015260000000000005, 0.007035, 0.0], [0.00016180000000000006, 0.007035, 0.0], [0.00017100000000000006, 0.007035, 0.0], [7.9e-5, 0.0, 1.0], [8.82e-5, 0.0, 1.0], [9.740000000000001e-5, 0.0, 1.0], [0.00010660000000000002, 0.0, 1.0], [0.00011580000000000002, 0.0, 1.0], [0.00012500000000000003, 0.0, 1.0], [0.00013420000000000004, 0.0, 1.0], [0.00014340000000000004, 0.0, 1.0], [0.00015260000000000005, 0.0, 1.0], [0.00016180000000000006, 0.0, 1.0], [0.00017100000000000006, 0.0, 1.0], [7.9e-5, 0.007035, 1.0], [8.82e-5, 0.007035, 1.0], [9.740000000000001e-5, 0.007035, 1.0], [0.00010660000000000002, 0.007035, 1.0], [0.00011580000000000002, 0.007035, 1.0], [0.00012500000000000003, 0.007035, 1.0], [0.00013420000000000004, 0.007035, 1.0], [0.00014340000000000004, 0.007035, 1.0], [0.00015260000000000005, 0.007035, 1.0], [0.00016180000000000006, 0.007035, 1.0], [0.00017100000000000006, 0.007035, 1.0]], nothing, [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 42)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 18)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 10)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 9)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 42</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 18</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 9</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 3 4 5 6 7 8 9; 2 3 4 5 6 7 8 9 10], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0], Faces()), :face_centroids =&gt; ([8.82e-5 9.740000000000001e-5 0.0001066 0.00011580000000000002 0.00012500000000000003 0.00013420000000000004 0.00014340000000000004 0.00015260000000000005 0.00016180000000000008; 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175; 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5], Faces()), :cell_centroids =&gt; ([8.360000000000001e-5 9.280000000000005e-5 0.000102 0.0001112 0.00012040000000000008 0.00012960000000000006 0.00013880000000000007 0.0001480000000000001 0.0001572000000000001 0.00016640000000000006; 0.0035175000000000002 0.0035175000000000002 0.0035175 0.003517500000000001 0.0035174999999999994 0.0035175000000000002 0.0035174999999999994 0.0035175 0.0035175000000000002 0.0035175; 0.5000000000000001 0.5000000000000002 0.5 0.5000000000000002 0.5000000000000001 0.5000000000000003 0.5 0.5 0.5 0.5], Cells()), :volumes =&gt; ([6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8], BoundaryFaces()), :boundary_centroids =&gt; ([7.9e-5 0.00017100000000000006 8.36e-5 8.36e-5 9.28e-5 9.28e-5 0.00010200000000000001 0.00010200000000000001 0.0001112 0.0001112 0.00012040000000000003 0.00012040000000000003 0.00012960000000000003 0.00012960000000000003 0.00013880000000000004 0.00013880000000000004 0.00014800000000000005 0.00014800000000000005 0.00015720000000000005 0.00015720000000000005 0.00016640000000000006 0.00016640000000000006 8.36e-5 8.36e-5 9.28e-5 9.28e-5 0.00010200000000000001 0.00010200000000000001 0.00011120000000000003 0.00011120000000000002 0.00012040000000000001 0.00012040000000000003 0.00012960000000000003 0.00012960000000000003 0.00013880000000000004 0.00013880000000000007 0.00014800000000000005 0.00014800000000000005 0.00015720000000000003 0.00015720000000000005 0.00016640000000000006 0.00016640000000000006; 0.0035175 0.0035175 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0], BoundaryFaces()), :boundary_normals =&gt; ([-1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0], BoundaryFaces()), :boundary_neighbors =&gt; ([1, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], BoundaryFaces()), :trans =&gt; ([764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], Faces()), :halfTrans =&gt; ([1529.34782608696, 1529.3478260869417, 1529.3478260869688, 1529.34782608696, 1529.3478260869554, 1529.3478260869554, 1529.3478260869508, 1529.3478260869372, 1529.3478260869736, 1529.3478260869465, 1529.3478260869642, 1529.3478260869465, 1529.3478260869642, 1529.3478260869372, 1529.3478260869736, 1529.3478260869372, 1529.3478260869642, 1529.3478260869642], HalfFaces()), :halftransfaces =&gt; ([1529.34782608696 1529.3478260869688 1529.3478260869554 1529.3478260869508 1529.3478260869736 1529.3478260869642 1529.3478260869642 1529.3478260869736 1529.3478260869642; 1529.3478260869417 1529.34782608696 1529.3478260869554 1529.3478260869372 1529.3478260869465 1529.3478260869465 1529.3478260869372 1529.3478260869372 1529.3478260869642], Faces()), :bcTrans =&gt; ([1529.3478260869508, 1529.3478260869554, 0.0026154939587775426, 0.0026154939587775435, 0.0026154939587775426, 0.0026154939587775435, 0.002615493958777543, 0.002615493958777543, 0.0026154939587775417, 0.0026154939587775435, 0.0026154939587775435, 0.0026154939587775426, 0.0026154939587775426, 0.0026154939587775435, 0.0026154939587775435, 0.0026154939587775426, 0.002615493958777543, 0.002615493958777543, 0.0026154939587775426, 0.0026154939587775435, 0.002615493958777543, 0.002615493958777543, 1.2944400000000006e-7, 1.294440000000001e-7, 1.2944400000000003e-7, 1.2944400000000014e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000003e-7, 1.2944400000000014e-7, 1.2944400000000006e-7, 1.294440000000001e-7, 1.2944399999999998e-7, 1.294440000000002e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7], BoundaryFaces()), :volumeFraction =&gt; ([0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72], Cells()))) and discretizations for flow</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">, ActiveMaterial{nothing, BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}, JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Float64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_lfp_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}, Dict{Any, Any}}(JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Float64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_lfp_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}((volume_fraction = 0.72, volume_fractions = [1.0, 0.0, 0.0], effective_density = 1080, n_charge_carriers = 1, maximum_concentration = 26390, volumetric_surface_area = 1.87826e6, theta0 = 0.999, theta100 = 0.14778, activation_energy_of_reaction = 4000, setting_temperature_dependence = nothing, setting_butler_volmer = &quot;Standard&quot;, ecd_funcconstant = true, reaction_rate_constant_func = 3.626e-11, ocp_func = BattMo.open_circuit_potential_lfp_Xu_2015, diff_funcconstant = true, diff_func = 1.25e-15)), BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}((N = 10, rp = 1.15e-6, hT = [0.0, 2.89026524130261e-6, 1.156106096521044e-5, 2.6012387171723485e-5, 4.624424386084176e-5, 7.225663103256524e-5, 0.00010404954868689394, 0.0001416229968238279, 0.00018497697544336703, 0.00023411148454551142, 0.00028902652413026096], D = 1.25e-15, div = [(1, 1, 1), (2, 1, -1), (2, 2, 1), (3, 2, -1), (3, 3, 1), (4, 3, -1), (4, 4, 1), (5, 4, -1), (5, 5, 1), (6, 5, -1), (6, 6, 1), (7, 6, -1), (7, 7, 1), (8, 7, -1), (8, 8, 1), (9, 8, -1), (9, 9, 1), (10, 9, -1)], vols = [6.370626302704502e-21, 4.459438411893151e-20, 1.210418997513855e-19, 2.357131732000666e-19, 3.886082044649746e-19, 5.797269935461095e-19, 8.090695404434723e-19, 1.0766358451570604e-18, 1.382425907686877e-18, 1.7264397280329197e-18])), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), DefaultContext(EquationMajorLayout(false), 9223372036854775807, 1), FullyImplicitFormulation(), DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19]), Jutul.IndirectionMap{Int64}([2, 13, 35, 24, 3, 14, 36, 25, 4, 15  …  41, 30, 9, 20, 42, 31, 10, 21, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([1, 3, 4, 23, 24, 5, 6, 25, 26, 7  …  38, 19, 20, 39, 40, 2, 21, 22, 41, 42], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 43]), Jutul.IndirectionMap{Int64}([23, 34, 12, 1, 11, 22, 44, 33, 1, 2  …  42, 31, 10, 21, 22, 11, 33, 44, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37  …  133, 137, 141, 145, 149, 153, 157, 161, 165, 169]), [1, 10, 1, 1, 2, 2, 3, 3, 4, 4  …  6, 6, 7, 7, 8, 8, 9, 9, 10, 10]), StaticArraysCore.SVector{3, Float64}[[7.9e-5, 0.0, 0.0], [8.82e-5, 0.0, 0.0], [9.740000000000001e-5, 0.0, 0.0], [0.00010660000000000002, 0.0, 0.0], [0.00011580000000000002, 0.0, 0.0], [0.00012500000000000003, 0.0, 0.0], [0.00013420000000000004, 0.0, 0.0], [0.00014340000000000004, 0.0, 0.0], [0.00015260000000000005, 0.0, 0.0], [0.00016180000000000006, 0.0, 0.0]  …  [8.82e-5, 0.007035, 1.0], [9.740000000000001e-5, 0.007035, 1.0], [0.00010660000000000002, 0.007035, 1.0], [0.00011580000000000002, 0.007035, 1.0], [0.00012500000000000003, 0.007035, 1.0], [0.00013420000000000004, 0.007035, 1.0], [0.00014340000000000004, 0.007035, 1.0], [0.00015260000000000005, 0.007035, 1.0], [0.00016180000000000006, 0.007035, 1.0], [0.00017100000000000006, 0.007035, 1.0]], nothing, [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9  …  -33, -34, -35, -36, -37, -38, -39, -40, -41, -42], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 42)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 18)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 10)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 9)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 42</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 18</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 9</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 … 8 9; 2 3 … 9 10], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 … 1.0 1.0; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0], Faces()), :face_centroids =&gt; ([8.82e-5 9.740000000000001e-5 … 0.00015260000000000005 0.00016180000000000008; 0.0035175 0.0035175 … 0.0035175 0.0035175; 0.5 0.5 … 0.5 0.5], Faces()), :cell_centroids =&gt; ([8.360000000000001e-5 9.280000000000005e-5 … 0.0001572000000000001 0.00016640000000000006; 0.0035175000000000002 0.0035175000000000002 … 0.0035175000000000002 0.0035175; 0.5000000000000001 0.5000000000000002 … 0.5 0.5], Cells()), :volumes =&gt; ([6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6  …  6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8], BoundaryFaces()), :boundary_centroids =&gt; ([7.9e-5 0.00017100000000000006 … 0.00016640000000000006 0.00016640000000000006; 0.0035175 0.0035175 … 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 … 0.0 1.0], BoundaryFaces())…)), OrderedCollections.OrderedDict{Symbol, Any}(:Voltage =&gt; Voltage(), :ParticleConcentration =&gt; BattMo.ParticleConcentration(), :SurfaceConcentration =&gt; BattMo.SurfaceConcentration()), OrderedCollections.OrderedDict{Symbol, Any}(:Charge =&gt; Charge(), :OpenCircuitPotential =&gt; BattMo.OpenCircuitPotential(), :ReactionRateConstant =&gt; BattMo.ReactionRateConstant(), :SolidDiffFlux =&gt; BattMo.SolidDiffFlux(), :DiffusionCoefficient =&gt; BattMo.DiffusionCoefficient()), OrderedCollections.OrderedDict{Symbol, Any}(:ECTransmissibilities =&gt; BattMo.ECTransmissibilities(), :Volume =&gt; BattMo.Volume(), :Temperature =&gt; Temperature(), :Conductivity =&gt; BattMo.Conductivity(), :VolumeFraction =&gt; BattMo.VolumeFraction()), OrderedCollections.OrderedDict{Symbol, Any}(:charge_conservation =&gt; ConservationLaw{:Charge, PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}, Jutul.DefaultFlux, 1}(PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}(TPFA{Int64}[TPFA{Int64}(1, 2, 1), TPFA{Int64}(2, 3, 1), TPFA{Int64}(3, 4, 1), TPFA{Int64}(4, 5, 1), TPFA{Int64}(5, 6, 1), TPFA{Int64}(6, 7, 1), TPFA{Int64}(7, 8, 1), TPFA{Int64}(8, 9, 1), TPFA{Int64}(9, 10, 1)], SPU{Int64}[SPU{Int64}(1, 2), SPU{Int64}(2, 3), SPU{Int64}(3, 4), SPU{Int64}(4, 5), SPU{Int64}(5, 6), SPU{Int64}(6, 7), SPU{Int64}(7, 8), SPU{Int64}(8, 9), SPU{Int64}(9, 10)], (cells = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9], faces = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], face_pos = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19], face_sign = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1])), Jutul.DefaultFlux()), :mass_conservation =&gt; SolidMassCons(), :solid_diffusion_bc =&gt; BattMo.SolidDiffusionBc()), [:Voltage, :ParticleConcentration, :SurfaceConcentration, :Charge, :OpenCircuitPotential, :Temperature, :ReactionRateConstant, :DiffusionCoefficient], OrderedCollections.OrderedDict{Symbol, Any}()), :Control =&gt; SimulationModel{CurrentAndVoltageDomain, CurrentAndVoltageSystem{BattMo.CCPolicy{Float64}}, FullyImplicitFormulation, DefaultContext}(CurrentAndVoltageDomain(), CurrentAndVoltageSystem{BattMo.CCPolicy{Float64}}(BattMo.CCPolicy{Float64}(0, &quot;discharging&quot;, 0.06357915909518233, 0.0, 2.25, 4.1, true, BattMo.var&quot;#cFun#113&quot;{Float64}(10.0, Core.Box(0.06357915909518233)), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;charging&quot; =&gt; 0.0001</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;discharging&quot; =&gt; 0.0001</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">})), DefaultContext(EquationMajorLayout(false), 9223372036854775807, 1), FullyImplicitFormulation(), DataDomain{CurrentAndVoltageDomain, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(CurrentAndVoltageDomain(), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}()), OrderedCollections.OrderedDict{Symbol, Any}(:Voltage =&gt; VoltageVar(), :Current =&gt; CurrentVar()), OrderedCollections.OrderedDict{Symbol, Any}(), OrderedCollections.OrderedDict{Symbol, Any}(:ImaxDischarge =&gt; BattMo.ImaxDischarge(), :ImaxCharge =&gt; BattMo.ImaxCharge()), OrderedCollections.OrderedDict{Symbol, Any}(:charge_conservation =&gt; BattMo.CurrentEquation(), :control =&gt; BattMo.ControlEquation()), [:Voltage, :Current, :Controller], OrderedCollections.OrderedDict{Symbol, Any}()))), Jutul.CrossTermPair[Jutul.CrossTermPair(:Elyte, :NeAm, :charge_conservation, :charge_conservation, ButlerVolmerActmatToElyteCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:Elyte, :NeAm, :mass_conservation, :mass_conservation, ButlerVolmerActmatToElyteCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:NeAm, :Elyte, :charge_conservation, :charge_conservation, ButlerVolmerElyteToActmatCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:NeAm, :Elyte, :solid_diffusion_bc, :solid_diffusion_bc, ButlerVolmerElyteToActmatCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:Elyte, :PeAm, :charge_conservation, :charge_conservation, ButlerVolmerActmatToElyteCT{Vector{Int64}}([14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:Elyte, :PeAm, :mass_conservation, :mass_conservation, ButlerVolmerActmatToElyteCT{Vector{Int64}}([14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:PeAm, :Elyte, :charge_conservation, :charge_conservation, ButlerVolmerElyteToActmatCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23])), Jutul.CrossTermPair(:PeAm, :Elyte, :solid_diffusion_bc, :solid_diffusion_bc, ButlerVolmerElyteToActmatCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23])), Jutul.CrossTermPair(:PeAm, :Control, :charge_conservation, :charge_conservation, TPFAInterfaceFluxCT{Vector{Int64}, Vector{Float64}}([10], [1], [9.343401568868082])), Jutul.CrossTermPair(:Control, :PeAm, :charge_conservation, :charge_conservation, AccumulatorInterfaceFluxCT{Vector{Int64}, Vector{Float64}}(1, [10], [9.343401568868082])), Jutul.CrossTermPair(:Control, :PeAm, :control, :control, AccumulatorInterfaceFluxCT{Vector{Int64}, Vector{Float64}}(1, [10], [0.0]))], nothing, DefaultContext(EquationMajorLayout(false), 9223372036854775807, 1), nothing, false, {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :Elyte =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :NeAm =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :Control =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :PeAm =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), JutulStorage{@NamedTuple{NeAm::JutulStorage{@NamedTuple{state0::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, state::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, parameters::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, ParticleConcentration::BattMo.ParticleConcentration, SurfaceConcentration::BattMo.SurfaceConcentration}, secondary_variables::@NamedTuple{Charge::Charge, OpenCircuitPotential::BattMo.OpenCircuitPotential, ReactionRateConstant::BattMo.ReactionRateConstant, SolidDiffFlux::BattMo.SolidDiffFlux, DiffusionCoefficient::BattMo.DiffusionCoefficient}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, Conductivity::BattMo.Conductivity, VolumeFraction::BattMo.VolumeFraction, BoundaryVoltage::BoundaryPotential{:Voltage}}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, mass_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{10, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, solid_diffusion_bc::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, solid_diffusion_bc::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, ParticleConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, SurfaceConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}, Elyte::JutulStorage{@NamedTuple{state0::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, Diffusivity::Vector{Float64}, Concentration::Vector{Float64}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{Float64}}, state::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Diffusivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Concentration::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, parameters::@NamedTuple{BruggemanCoefficient::Vector{Float64}, Volume::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, ECTransmissibilities::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Concentration::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, Concentration::Concentration}, secondary_variables::@NamedTuple{Conductivity::BattMo.Conductivity, Diffusivity::BattMo.Diffusivity, DmuDc::DmuDc, ChemCoef::ChemCoef, Charge::Charge, Mass::Mass}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, BruggemanCoefficient::BattMo.BruggemanCoefficient, VolumeFraction::BattMo.VolumeFraction}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, mass_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, Concentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}, PeAm::JutulStorage{@NamedTuple{state0::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, state::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, parameters::@NamedTuple{Volume::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, ParticleConcentration::BattMo.ParticleConcentration, SurfaceConcentration::BattMo.SurfaceConcentration}, secondary_variables::@NamedTuple{Charge::Charge, OpenCircuitPotential::BattMo.OpenCircuitPotential, ReactionRateConstant::BattMo.ReactionRateConstant, SolidDiffFlux::BattMo.SolidDiffFlux, DiffusionCoefficient::BattMo.DiffusionCoefficient}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, Conductivity::BattMo.Conductivity, VolumeFraction::BattMo.VolumeFraction}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, mass_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{10, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, solid_diffusion_bc::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, solid_diffusion_bc::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, ParticleConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, SurfaceConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}, Control::JutulStorage{@NamedTuple{state0::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{Float64}, Current::Vector{Float64}, ImaxCharge::Vector{Float64}}, state::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Current::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ImaxCharge::Vector{Float64}}, parameters::@NamedTuple{ImaxDischarge::Vector{Float64}, ImaxCharge::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Current::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::VoltageVar, Current::CurrentVar}, secondary_variables::@NamedTuple{}, parameters::@NamedTuple{ImaxDischarge::BattMo.ImaxDischarge, ImaxCharge::BattMo.ImaxCharge}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, control::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, control::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, Current::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}, state::JutulStorage{@NamedTuple{NeAm::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, Elyte::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Diffusivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Concentration::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, PeAm::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, Control::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Current::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ImaxCharge::Vector{Float64}}}}, state0::JutulStorage{@NamedTuple{NeAm::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, Elyte::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, Diffusivity::Vector{Float64}, Concentration::Vector{Float64}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{Float64}}, PeAm::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, Control::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{Float64}, Current::Vector{Float64}, ImaxCharge::Vector{Float64}}}}, cross_terms::Vector{Any}, LinearizedSystem::LinearizedSystem{EquationMajorLayout, SparseArrays.SparseMatrixCSC{Float64, Int64}, Vector{Float64}, Vector{Float64}, Vector{Float64}}, multi_model_maps::@NamedTuple{offset_map::Vector{Int64}}, eq_maps::Jutul.MutableWrapper, recorder::ProgressRecorder}}((NeAm = JutulStorage{@NamedTuple{state0::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, state::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, parameters::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, ParticleConcentration::BattMo.ParticleConcentration, SurfaceConcentration::BattMo.SurfaceConcentration}, secondary_variables::@NamedTuple{Charge::Charge, OpenCircuitPotential::BattMo.OpenCircuitPotential, ReactionRateConstant::BattMo.ReactionRateConstant, SolidDiffFlux::BattMo.SolidDiffFlux, DiffusionCoefficient::BattMo.DiffusionCoefficient}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, Conductivity::BattMo.Conductivity, VolumeFraction::BattMo.VolumeFraction, BoundaryVoltage::BoundaryPotential{:Voltage}}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, mass_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{10, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, solid_diffusion_bc::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, solid_diffusion_bc::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, ParticleConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, SurfaceConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}((state0 = (BoundaryVoltage = [0.0], Volume = [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8], SurfaceConcentration = [42.81532071735261, 42.769160520664606, 42.677625393676465, 42.54202247463053, 42.36345042067212, 42.143948467139936, 41.88555711574829, 41.591614660334244, 41.26579601016947, 40.90854902579595], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001], Conductivity = [125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838], ECTransmissibilities = [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294], OpenCircuitPotential = [1.2007500284715267, 1.2008428332981653, 1.2010268641776023, 1.201299493115447, 1.2016585112674305, 1.2020998187618956, 1.202619313181144, 1.2032102829034097, 1.2038653395434098, 1.2045835826799383], ReactionRateConstant = [1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11], DiffusionCoefficient = [3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14], Charge = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], Voltage = [-2.1173232928168587e-7, -5.922968748222838e-7, -9.299979381970803e-7, -1.2249073585544645e-6, -1.4771306021983557e-6, -1.6868062007057387e-6, -1.8541035993136588e-6, -1.9792213629153e-6, -2.0623828071074753e-6, -2.1038310525590007e-6], ParticleConcentration = [2191.999182857426 2189.2507271880345 … 2103.6815859459252 2084.1211330478104; 2148.787956795936 2146.1091605829815 … 2062.6912135604107 2043.6189249103516; … ; 642.017370776268 641.3896103895692 … 621.6591049969663 617.1112814419341; 256.43869791599593 256.21013243352434 … 248.97887089194455 247.30227501930904], SolidDiffFlux = [3.123655138693319e-17 3.118619592635258e-17 … 2.963113963875118e-17 2.927825523787915e-17; 2.4981707268577154e-16 2.4941942971595423e-16 … 2.3713430878979225e-16 2.3434527599351663e-16; … ; 1.5888510033663647e-14 1.586991972777687e-14 … 1.5289683749643333e-14 1.5156768065786096e-14; 2.25769106602225e-14 2.2553536474036587e-14 … 2.182166427360722e-14 2.1653544365963574e-14]), state = (BoundaryVoltage = [0.0], Volume = [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8], SurfaceConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(42.81532071735261,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.769160520664606,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.677625393676465,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.54202247463053,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.36345042067212,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.143948467139936,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(41.88555711574829,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(41.591614660334244,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(41.26579601016947,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(40.90854902579595,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0)], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001], Conductivity = [125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838], ECTransmissibilities = [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294], OpenCircuitPotential = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(1.2007500284715267,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2008428332981653,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2010268641776023,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.201299493115447,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2016585112674305,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2020998187618956,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.202619313181144,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2032102829034097,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2038653395434098,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2045835826799383,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234)], ReactionRateConstant = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], DiffusionCoefficient = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], Charge = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], Voltage = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-2.1173232928168587e-7,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-5.922968748222838e-7,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-9.299979381970803e-7,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.2249073585544645e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.4771306021983557e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.6868062007057387e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.8541035993136588e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.9792213629153e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-2.0623828071074753e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-2.1038310525590007e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], ParticleConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(2191.999182857426,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2189.2507271880345,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(2103.6815859459252,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2084.1211330478104,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); Dual{Cells()}(2148.787956795936,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2146.1091605829815,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(2062.6912135604107,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2043.6189249103516,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); … ; Dual{Cells()}(642.017370776268,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(641.3896103895692,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) … Dual{Cells()}(621.6591049969663,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(617.1112814419341,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0); Dual{Cells()}(256.43869791599593,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(256.21013243352434,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) … Dual{Cells()}(248.97887089194455,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(247.30227501930904,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0)], SolidDiffFlux = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(3.123655138693319e-17,-0.0,7.228804695910114e-19,-7.228804695910114e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(3.118619592635258e-17,-0.0,7.228804695910114e-19,-7.228804695910114e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) … Dual{Cells()}(2.963113963875118e-17,-0.0,7.228804695910114e-19,-7.228804695910114e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(2.927825523787915e-17,-0.0,7.228804695910114e-19,-7.228804695910114e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0); Dual{Cells()}(2.4981707268577154e-16,-0.0,-0.0,2.8915218783640456e-18,-2.8915218783640456e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(2.4941942971595423e-16,-0.0,-0.0,2.8915218783640456e-18,-2.8915218783640456e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) … Dual{Cells()}(2.3713430878979225e-16,-0.0,-0.0,2.8915218783640456e-18,-2.8915218783640456e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(2.3434527599351663e-16,-0.0,-0.0,2.8915218783640456e-18,-2.8915218783640456e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0); … ; Dual{Cells()}(1.5888510033663647e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,4.626435005382473e-17,-4.626435005382473e-17,-0.0,-0.0) Dual{Cells()}(1.586991972777687e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,4.626435005382473e-17,-4.626435005382473e-17,-0.0,-0.0) … Dual{Cells()}(1.5289683749643333e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,4.626435005382473e-17,-4.626435005382473e-17,-0.0,-0.0) Dual{Cells()}(1.5156768065786096e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,4.626435005382473e-17,-4.626435005382473e-17,-0.0,-0.0); Dual{Cells()}(2.25769106602225e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,5.855331803687191e-17,-5.855331803687191e-17,-0.0) Dual{Cells()}(2.2553536474036587e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,5.855331803687191e-17,-5.855331803687191e-17,-0.0) … Dual{Cells()}(2.182166427360722e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,5.855331803687191e-17,-5.855331803687191e-17,-0.0) Dual{Cells()}(2.1653544365963574e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,5.855331803687191e-17,-5.855331803687191e-17,-0.0)]), parameters = (BoundaryVoltage = [0.0], Volume = [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001], Conductivity = [125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838], ECTransmissibilities = [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294]), primary_variables = (Voltage = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-2.1173232928168587e-7,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-5.922968748222838e-7,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-9.299979381970803e-7,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.2249073585544645e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.4771306021983557e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.6868062007057387e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.8541035993136588e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.9792213629153e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-2.0623828071074753e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-2.1038310525590007e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], ParticleConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(2191.999182857426,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2189.2507271880345,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(2103.6815859459252,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2084.1211330478104,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); Dual{Cells()}(2148.787956795936,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2146.1091605829815,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(2062.6912135604107,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2043.6189249103516,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); … ; Dual{Cells()}(642.017370776268,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(641.3896103895692,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) … Dual{Cells()}(621.6591049969663,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(617.1112814419341,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0); Dual{Cells()}(256.43869791599593,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(256.21013243352434,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) … Dual{Cells()}(248.97887089194455,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(247.30227501930904,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0)], SurfaceConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(42.81532071735261,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.769160520664606,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.677625393676465,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.54202247463053,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.36345042067212,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.143948467139936,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(41.88555711574829,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(41.591614660334244,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(41.26579601016947,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(40.90854902579595,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0)]), variable_definitions = JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, ParticleConcentration::BattMo.ParticleConcentration, SurfaceConcentration::BattMo.SurfaceConcentration}, secondary_variables::@NamedTuple{Charge::Charge, OpenCircuitPotential::BattMo.OpenCircuitPotential, ReactionRateConstant::BattMo.ReactionRateConstant, SolidDiffFlux::BattMo.SolidDiffFlux, DiffusionCoefficient::BattMo.DiffusionCoefficient}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, Conductivity::BattMo.Conductivity, VolumeFraction::BattMo.VolumeFraction, BoundaryVoltage::BoundaryPotential{:Voltage}}, extra_variable_fields::Vector{Symbol}}}((primary_variables = (Voltage = Voltage(), ParticleConcentration = BattMo.ParticleConcentration(), SurfaceConcentration = BattMo.SurfaceConcentration()), secondary_variables = (Charge = Charge(), OpenCircuitPotential = BattMo.OpenCircuitPotential(), ReactionRateConstant = BattMo.ReactionRateConstant(), SolidDiffFlux = BattMo.SolidDiffFlux(), DiffusionCoefficient = BattMo.DiffusionCoefficient()), parameters = (ECTransmissibilities = BattMo.ECTransmissibilities(), Volume = BattMo.Volume(), Temperature = Temperature(), Conductivity = BattMo.Conductivity(), VolumeFraction = BattMo.VolumeFraction(), BoundaryVoltage = BoundaryPotential{:Voltage}()), extra_variable_fields = Symbol[])), equations = (charge_conservation = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-0.006441040744744157,450421.2430390257,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(0.057138118552992674,-150140.4143463419,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(-0.006223056746020895,-150140.41434634148,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(-0.006223056746020895,150140.41434634148,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], [1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 29], [1, 2, 1, 2, 3, 2, 3, 4, 3, 4  …  7, 8, 7, 8, 9, 8, 9, 10, 9, 10], [1 16 … 130 145; 159 174 … 288 303; … ; 1581 1596 … 1710 1725; 1739 1754 … 1868 1883], [1, 4, 7, 10, 13, 16, 19, 22, 25, 28], 10, 10, Jutul.TrivialGlobalMap()),), mass_conservation = (Cells = Jutul.GenericAutoDiffCache{10, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(4.930380657631324e-32,0.0,9.917209519250188e-19,-7.228804695910114e-19,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(-1.5407439555097887e-31,0.0,9.917209519250188e-19,-7.228804695910114e-19,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(6.162975822039155e-32,0.0,9.917209519250188e-19,-7.228804695910114e-19,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(-1.0477058897466563e-31,0.0,9.917209519250188e-19,-7.228804695910114e-19,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); Dual{Cells()}(-4.437342591868191e-31,0.0,-7.228804695910114e-19,5.4962857242931095e-18,-2.8915218783640456e-18,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2.465190328815662e-31,0.0,-7.228804695910114e-19,5.4962857242931095e-18,-2.8915218783640456e-18,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(-1.9721522630525295e-31,0.0,-7.228804695910114e-19,5.4962857242931095e-18,-2.8915218783640456e-18,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2.9582283945787943e-31,0.0,-7.228804695910114e-19,5.4962857242931095e-18,-2.8915218783640456e-18,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); … ; Dual{Cells()}(6.310887241768095e-30,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-4.626435005382473e-17,1.6315605275717627e-16,-5.855331803687191e-17,0.0) Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-4.626435005382473e-17,1.6315605275717627e-16,-5.855331803687191e-17,0.0) … Dual{Cells()}(3.1554436208840472e-30,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-4.626435005382473e-17,1.6315605275717627e-16,-5.855331803687191e-17,0.0) Dual{Cells()}(-9.466330862652142e-30,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-4.626435005382473e-17,1.6315605275717627e-16,-5.855331803687191e-17,0.0); Dual{Cells()}(-6.310887241768095e-30,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-5.855331803687191e-17,2.759851826675902e-16,-1.4457609391820227e-16) Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-5.855331803687191e-17,2.759851826675902e-16,-1.4457609391820227e-16) … Dual{Cells()}(-6.310887241768095e-30,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-5.855331803687191e-17,2.759851826675902e-16,-1.4457609391820227e-16) Dual{Cells()}(6.310887241768095e-30,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-5.855331803687191e-17,2.759851826675902e-16,-1.4457609391820227e-16)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [3 19 … 131 146; 161 177 … 289 304; … ; 1592 1608 … 1720 1735; 1750 1766 … 1878 1893], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 10, Jutul.TrivialGlobalMap()),), solid_diffusion_bc = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(3.0884833444994604e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.4457609391820227e-16,-1.4457609391820227e-16) Dual{Cells()}(3.085846200126598e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.4457609391820227e-16,-1.4457609391820227e-16) … Dual{Cells()}(3.003034502214609e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.4457609391820227e-16,-1.4457609391820227e-16) Dual{Cells()}(2.9839598713365855e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.4457609391820227e-16,-1.4457609391820227e-16)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [13 29 … 141 156; 171 187 … 299 314; … ; 1593 1609 … 1721 1736; 1751 1767 … 1879 1894], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 10, Jutul.TrivialGlobalMap()),)), views = (equations = JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, solid_diffusion_bc::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}((charge_conservation = [2.765458366645046e-9 2.7863353291301962e-9 … 3.563921535491843e-9 3.779754377541966e-9], mass_conservation = [4.930380657631324e-32 -1.5407439555097887e-31 … 6.162975822039155e-32 -1.0477058897466563e-31; -4.437342591868191e-31 2.465190328815662e-31 … -1.9721522630525295e-31 2.9582283945787943e-31; … ; 6.310887241768095e-30 0.0 … 3.1554436208840472e-30 -9.466330862652142e-30; -6.310887241768095e-30 0.0 … -6.310887241768095e-30 6.310887241768095e-30], solid_diffusion_bc = [-1.3260391420927493e-20 -1.3360496569757267e-20 … -1.7089027348781897e-20 -1.812394765865577e-20])), primary_variables = JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, ParticleConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, SurfaceConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}((Voltage = [-1.7938292191854823e-20 -1.0749579247864948e-13 … -2.5040897192166665e-12 -2.6903185339930464e-12], ParticleConcentration = [9.735835464636837e-7 9.146079392935884e-7 … -1.151423484837017e-6 -1.6866655971719218e-6; 1.3356611533040058e-6 1.2547523999631866e-6 … -1.5796398726699225e-6 -2.3139392113352756e-6; … ; 0.0002922322722276379 0.00027453003178427437 … -0.0003456129296066977 -0.0005062718784753237; 0.0007191280572108599 0.0006755662094169467 … -0.0008504877054390117 -0.0012458388309755572], SurfaceConcentration = [0.0012544087624240473 0.0011784217903412222 … -0.0014835455513036615 -0.002173175042335325]))))), Elyte = JutulStorage{@NamedTuple{state0::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, Diffusivity::Vector{Float64}, Concentration::Vector{Float64}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{Float64}}, state::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Diffusivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Concentration::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, parameters::@NamedTuple{BruggemanCoefficient::Vector{Float64}, Volume::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, ECTransmissibilities::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Concentration::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, Concentration::Concentration}, secondary_variables::@NamedTuple{Conductivity::BattMo.Conductivity, Diffusivity::BattMo.Diffusivity, DmuDc::DmuDc, ChemCoef::ChemCoef, Charge::Charge, Mass::Mass}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, BruggemanCoefficient::BattMo.BruggemanCoefficient, VolumeFraction::BattMo.VolumeFraction}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, mass_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, Concentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}((state0 = (Volume = [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8  …  6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Mass = [2.1945849665328002e-5, 2.189294310654668e-5, 2.1788159652078428e-5, 2.163350235673774e-5, 2.143183995010795e-5, 2.118675614738006e-5, 2.090236453736898e-5, 2.0583107312917517e-5, 2.0233552882849377e-5, 1.9858212251584003e-5  …  2.6962942774499457e-5, 2.6195126142548415e-5, 2.5488520319982227e-5, 2.4829365185367293e-5, 2.4219220858580352e-5, 2.3680355645565634e-5, 2.3326590308752604e-5, 2.331792868915411e-5, 2.3312359983804338e-5, 2.3309619161914075e-5], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15  …  298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993  …  0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28], Conductivity = [0.1157449730305673, 0.11606652775731731, 0.1167029139425651, 0.11764086106148108, 0.11886092094663214, 0.12033805911527962, 0.12204250420571466, 0.12394081665202009, 0.12599712264463436, 0.12817439036063968  …  0.12223210515543873, 0.12470256060591244, 0.1268727830634557, 0.1287974170887019, 0.13048445743835868, 0.13189248187227626, 0.13277231764761704, 0.1327934003584807, 0.13280694303359453, 0.1328136051239624], ECTransmissibilities = [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294, 1119.628647214855  …  886.764705882349, 764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], ChemCoef = [2.49924314084208e-6, 2.512242824584917e-6, 2.53816541298458e-6, 2.5768558816166825e-6, 2.6280789286046275e-6, 2.691518103344934e-6, 2.766778953977508e-6, 2.8533969043610383e-6, 2.9508507852345443e-6, 3.058580270962546e-6  …  3.1264347161128786e-6, 3.2831160941939524e-6, 3.4328529896996194e-6, 3.577444465080222e-6, 3.715608771309762e-6, 3.8411669458111565e-6, 3.925433617396579e-6, 3.927515294236022e-6, 3.928854109256943e-6, 3.929513185992811e-6], Charge = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0  …  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], Voltage = [-1.3333801662120677, -1.3335186267408705, -1.3337939932604224, -1.3342032330881073, -1.334741981489335, -1.3354047472456956, -1.3361851735397174, -1.3370763289440977, -1.33807101353097, -1.339162048925923  …  -1.3432461884978053, -1.3449585405270637, -1.3465874448838475, -1.3481553488622278, -1.3496504395542033, -1.35100748903293, -1.3519175094983524, -1.3519389686800418, -1.3519527744242112, -1.3519595741357189], Diffusivity = [9.74683587046272e-12, 9.807991206671544e-12, 9.930651571839526e-12, 1.0115434063765826e-11, 1.0363074303412139e-11, 1.0674239728143869e-11, 1.1049344655182878e-11, 1.1488396906887688e-11, 1.1990902541164651e-11, 1.2555834192377068e-11  …  1.3319680584303935e-11, 1.4193780294292571e-11, 1.5039529795914494e-11, 1.586420095207016e-11, 1.665828011750182e-11, 1.7384156750658177e-11, 1.7873223453154592e-11, 1.7885322346624746e-11, 1.7893104078844682e-11, 1.7896935018421153e-11], Concentration = [1762.442803362365, 1758.19394605236, 1749.7789223437649, 1737.3585949781148, 1721.1633479180332, 1701.4809846955745, 1678.641862308231, 1653.0027275179805, 1624.9304633289887, 1594.7873426719511  …  1487.8437655610273, 1445.4748298518714, 1406.4835714938083, 1370.1106923990997, 1336.4422816364233, 1306.7071279342865, 1287.1859816242977, 1286.7080242727204, 1286.4007372081624, 1286.249495750732], BruggemanCoefficient = [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5  …  1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5], DmuDc = [1.4065460875513616, 1.4099451514824881, 1.4167258491615136, 1.4268539821127804, 1.4402799319431263, 1.456940778004591, 1.4767634986736697, 1.4996690497447613, 1.5255773004118334, 1.5544122801031732  …  1.666140684245592, 1.7149776519155477, 1.7625211412668826, 1.8093114982276866, 1.854892698072227, 1.8971022477862027, 1.9258732343201848, 1.9265886143855804, 1.9270488253780043, 1.9272754141338038]), state = (Volume = [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8  …  6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Mass = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(2.1945849665328002e-5,0.0,1.245195e-8), Dual{Cells()}(2.189294310654668e-5,0.0,1.2451949999999999e-8), Dual{Cells()}(2.1788159652078428e-5,0.0,1.2451949999999992e-8), Dual{Cells()}(2.163350235673774e-5,0.0,1.2451950000000002e-8), Dual{Cells()}(2.143183995010795e-5,0.0,1.2451949999999999e-8), Dual{Cells()}(2.118675614738006e-5,0.0,1.2451950000000002e-8), Dual{Cells()}(2.090236453736898e-5,0.0,1.2451950000000002e-8), Dual{Cells()}(2.0583107312917517e-5,0.0,1.2451950000000002e-8), Dual{Cells()}(2.0233552882849377e-5,0.0,1.2451949999999985e-8), Dual{Cells()}(1.9858212251584003e-5,0.0,1.2451950000000002e-8)  …  Dual{Cells()}(2.6962942774499457e-5,0.0,1.812216000000002e-8), Dual{Cells()}(2.6195126142548415e-5,0.0,1.8122160000000016e-8), Dual{Cells()}(2.5488520319982227e-5,0.0,1.8122159999999996e-8), Dual{Cells()}(2.4829365185367293e-5,0.0,1.8122160000000016e-8), Dual{Cells()}(2.4219220858580352e-5,0.0,1.812216000000002e-8), Dual{Cells()}(2.3680355645565634e-5,0.0,1.8122160000000016e-8), Dual{Cells()}(2.3326590308752604e-5,0.0,1.8122160000000016e-8), Dual{Cells()}(2.331792868915411e-5,0.0,1.812215999999999e-8), Dual{Cells()}(2.3312359983804338e-5,0.0,1.812216000000005e-8), Dual{Cells()}(2.3309619161914075e-5,0.0,1.812215999999999e-8)], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15  …  298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993  …  0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28], Conductivity = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.1157449730305673,0.0,-7.569708961683358e-5), Dual{Cells()}(0.11606652775731731,0.0,-7.566289385672752e-5), Dual{Cells()}(0.1167029139425651,0.0,-7.558481530844872e-5), Dual{Cells()}(0.11764086106148108,0.0,-7.54443722630224e-5), Dual{Cells()}(0.11886092094663214,0.0,-7.521594685776246e-5), Dual{Cells()}(0.12033805911527962,0.0,-7.486897982287601e-5), Dual{Cells()}(0.12204250420571466,0.0,-7.437040206809859e-5), Dual{Cells()}(0.12394081665202009,0.0,-7.368699738746046e-5), Dual{Cells()}(0.12599712264463436,0.0,-7.278742672309706e-5), Dual{Cells()}(0.12817439036063968,0.0,-7.16437401368234e-5)  …  Dual{Cells()}(0.12223210515543873,0.0,-5.95758371767477e-5), Dual{Cells()}(0.12470256060591244,0.0,-5.6982530486228713e-5), Dual{Cells()}(0.1268727830634557,0.0,-5.428591168201883e-5), Dual{Cells()}(0.1287974170887019,0.0,-5.149783786383138e-5), Dual{Cells()}(0.13048445743835868,0.0,-4.8678668929459585e-5), Dual{Cells()}(0.13189248187227626,0.0,-4.5995178350362036e-5), Dual{Cells()}(0.13277231764761704,0.0,-4.4133316323389085e-5), Dual{Cells()}(0.1327934003584807,0.0,-4.408672622169074e-5), Dual{Cells()}(0.13280694303359453,0.0,-4.405674720033449e-5), Dual{Cells()}(0.1328136051239624,0.0,-4.404198472484535e-5)], ECTransmissibilities = [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294, 1119.628647214855  …  886.764705882349, 764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], ChemCoef = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(2.49924314084208e-6,0.0,-3.0525586751447265e-9), Dual{Cells()}(2.512242824584917e-6,0.0,-3.0665891075633623e-9), Dual{Cells()}(2.53816541298458e-6,0.0,-3.094453578020248e-9), Dual{Cells()}(2.5768558816166825e-6,0.0,-3.135769122273897e-9), Dual{Cells()}(2.6280789286046275e-6,0.0,-3.1899851734599384e-9), Dual{Cells()}(2.691518103344934e-6,0.0,-3.256410539310913e-9), Dual{Cells()}(2.766778953977508e-6,0.0,-3.3342476368009096e-9), Dual{Cells()}(2.8533969043610383e-6,0.0,-3.422630812438334e-9), Dual{Cells()}(2.9508507852345443e-6,0.0,-3.5206663631830405e-9), Dual{Cells()}(3.058580270962546e-6,0.0,-3.6274701917503455e-9)  …  Dual{Cells()}(3.1264347161128786e-6,0.0,-3.625141186424429e-9), Dual{Cells()}(3.2831160941939524e-6,0.0,-3.771518184926822e-9), Dual{Cells()}(3.4328529896996194e-6,0.0,-3.909572424853449e-9), Dual{Cells()}(3.577444465080222e-6,0.0,-4.0414532782613454e-9), Dual{Cells()}(3.715608771309762e-6,0.0,-4.166372815332034e-9), Dual{Cells()}(3.8411669458111565e-6,0.0,-4.279116825148593e-9), Dual{Cells()}(3.925433617396579e-6,0.0,-4.3544324364930995e-9), Dual{Cells()}(3.927515294236022e-6,0.0,-4.356289799598029e-9), Dual{Cells()}(3.928854109256943e-6,0.0,-4.3574842714331276e-9), Dual{Cells()}(3.929513185992811e-6,0.0,-4.358072268154327e-9)], Charge = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0)  …  Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0)], Voltage = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(-1.3333801662120677,1.0,0.0), Dual{Cells()}(-1.3335186267408705,1.0,0.0), Dual{Cells()}(-1.3337939932604224,1.0,0.0), Dual{Cells()}(-1.3342032330881073,1.0,0.0), Dual{Cells()}(-1.334741981489335,1.0,0.0), Dual{Cells()}(-1.3354047472456956,1.0,0.0), Dual{Cells()}(-1.3361851735397174,1.0,0.0), Dual{Cells()}(-1.3370763289440977,1.0,0.0), Dual{Cells()}(-1.33807101353097,1.0,0.0), Dual{Cells()}(-1.339162048925923,1.0,0.0)  …  Dual{Cells()}(-1.3432461884978053,1.0,0.0), Dual{Cells()}(-1.3449585405270637,1.0,0.0), Dual{Cells()}(-1.3465874448838475,1.0,0.0), Dual{Cells()}(-1.3481553488622278,1.0,0.0), Dual{Cells()}(-1.3496504395542033,1.0,0.0), Dual{Cells()}(-1.35100748903293,1.0,0.0), Dual{Cells()}(-1.3519175094983524,1.0,0.0), Dual{Cells()}(-1.3519389686800418,1.0,0.0), Dual{Cells()}(-1.3519527744242112,1.0,0.0), Dual{Cells()}(-1.3519595741357189,1.0,0.0)], Diffusivity = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(9.74683587046272e-12,0.0,-1.4331964731875067e-14), Dual{Cells()}(9.807991206671544e-12,0.0,-1.4454756848449344e-14), Dual{Cells()}(9.930651571839526e-12,0.0,-1.4697951311527192e-14), Dual{Cells()}(1.0115434063765826e-11,0.0,-1.5056899182565878e-14), Dual{Cells()}(1.0363074303412139e-11,0.0,-1.5524942357437354e-14), Dual{Cells()}(1.0674239728143869e-11,0.0,-1.6093763304560763e-14), Dual{Cells()}(1.1049344655182878e-11,0.0,-1.6753814695798794e-14), Dual{Cells()}(1.1488396906887688e-11,0.0,-1.7494786537949018e-14), Dual{Cells()}(1.1990902541164651e-11,0.0,-1.830607590007502e-14), Dual{Cells()}(1.2555834192377068e-11,0.0,-1.9177213082515927e-14)  …  Dual{Cells()}(1.3319680584303935e-11,0.0,-2.0078633571864362e-14), Dual{Cells()}(1.4193780294292571e-11,0.0,-2.1182714883472946e-14), Dual{Cells()}(1.5039529795914494e-11,0.0,-2.2198778160699346e-14), Dual{Cells()}(1.586420095207016e-11,0.0,-2.314660975915009e-14), Dual{Cells()}(1.665828011750182e-11,0.0,-2.4023966305696516e-14), Dual{Cells()}(1.7384156750658177e-11,0.0,-2.479882710762228e-14), Dual{Cells()}(1.7873223453154592e-11,0.0,-2.5307523690656305e-14), Dual{Cells()}(1.7885322346624746e-11,0.0,-2.5319978659628024e-14), Dual{Cells()}(1.7893104078844682e-11,0.0,-2.53279861750305e-14), Dual{Cells()}(1.7896935018421153e-11,0.0,-2.5331927337674647e-14)], Concentration = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(1762.442803362365,0.0,1.0), Dual{Cells()}(1758.19394605236,0.0,1.0), Dual{Cells()}(1749.7789223437649,0.0,1.0), Dual{Cells()}(1737.3585949781148,0.0,1.0), Dual{Cells()}(1721.1633479180332,0.0,1.0), Dual{Cells()}(1701.4809846955745,0.0,1.0), Dual{Cells()}(1678.641862308231,0.0,1.0), Dual{Cells()}(1653.0027275179805,0.0,1.0), Dual{Cells()}(1624.9304633289887,0.0,1.0), Dual{Cells()}(1594.7873426719511,0.0,1.0)  …  Dual{Cells()}(1487.8437655610273,0.0,1.0), Dual{Cells()}(1445.4748298518714,0.0,1.0), Dual{Cells()}(1406.4835714938083,0.0,1.0), Dual{Cells()}(1370.1106923990997,0.0,1.0), Dual{Cells()}(1336.4422816364233,0.0,1.0), Dual{Cells()}(1306.7071279342865,0.0,1.0), Dual{Cells()}(1287.1859816242977,0.0,1.0), Dual{Cells()}(1286.7080242727204,0.0,1.0), Dual{Cells()}(1286.4007372081624,0.0,1.0), Dual{Cells()}(1286.249495750732,0.0,1.0)], BruggemanCoefficient = [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5  …  1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5], DmuDc = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(1.4065460875513616,0.0,-0.000798066232202243), Dual{Cells()}(1.4099451514824881,0.0,-0.00080192811188334), Dual{Cells()}(1.4167258491615136,0.0,-0.000809659912501324), Dual{Cells()}(1.4268539821127804,0.0,-0.0008212777639786876), Dual{Cells()}(1.4402799319431263,0.0,-0.0008368060670623324), Dual{Cells()}(1.456940778004591,0.0,-0.0008562780255021562), Dual{Cells()}(1.4767634986736697,0.0,-0.0008797370849807316), Dual{Cells()}(1.4996690497447613,0.0,-0.0009072393074611237), Dual{Cells()}(1.5255773004118334,0.0,-0.0009388569756310612), Dual{Cells()}(1.5544122801031732,0.0,-0.000974683105710425)  …  Dual{Cells()}(1.666140684245592,0.0,-0.0011198357803497824), Dual{Cells()}(1.7149776519155477,0.0,-0.0011864458768135687), Dual{Cells()}(1.7625211412668826,0.0,-0.0012531402264407052), Dual{Cells()}(1.8093114982276866,0.0,-0.0013205586295071787), Dual{Cells()}(1.854892698072227,0.0,-0.001387933263979781), Dual{Cells()}(1.8971022477862027,0.0,-0.0014518190091954613), Dual{Cells()}(1.9258732343201848,0.0,-0.0014961887884219565), Dual{Cells()}(1.9265886143855804,0.0,-0.0014973005359739918), Dual{Cells()}(1.9270488253780043,0.0,-0.0014980159522919906), Dual{Cells()}(1.9272754141338038,0.0,-0.0014983682563147911)]), parameters = (BruggemanCoefficient = [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5  …  1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5], Volume = [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8  …  6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15  …  298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993  …  0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28], ECTransmissibilities = [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294, 1119.628647214855  …  886.764705882349, 764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821]), primary_variables = (Voltage = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(-1.3333801662120677,1.0,0.0), Dual{Cells()}(-1.3335186267408705,1.0,0.0), Dual{Cells()}(-1.3337939932604224,1.0,0.0), Dual{Cells()}(-1.3342032330881073,1.0,0.0), Dual{Cells()}(-1.334741981489335,1.0,0.0), Dual{Cells()}(-1.3354047472456956,1.0,0.0), Dual{Cells()}(-1.3361851735397174,1.0,0.0), Dual{Cells()}(-1.3370763289440977,1.0,0.0), Dual{Cells()}(-1.33807101353097,1.0,0.0), Dual{Cells()}(-1.339162048925923,1.0,0.0)  …  Dual{Cells()}(-1.3432461884978053,1.0,0.0), Dual{Cells()}(-1.3449585405270637,1.0,0.0), Dual{Cells()}(-1.3465874448838475,1.0,0.0), Dual{Cells()}(-1.3481553488622278,1.0,0.0), Dual{Cells()}(-1.3496504395542033,1.0,0.0), Dual{Cells()}(-1.35100748903293,1.0,0.0), Dual{Cells()}(-1.3519175094983524,1.0,0.0), Dual{Cells()}(-1.3519389686800418,1.0,0.0), Dual{Cells()}(-1.3519527744242112,1.0,0.0), Dual{Cells()}(-1.3519595741357189,1.0,0.0)], Concentration = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(1762.442803362365,0.0,1.0), Dual{Cells()}(1758.19394605236,0.0,1.0), Dual{Cells()}(1749.7789223437649,0.0,1.0), Dual{Cells()}(1737.3585949781148,0.0,1.0), Dual{Cells()}(1721.1633479180332,0.0,1.0), Dual{Cells()}(1701.4809846955745,0.0,1.0), Dual{Cells()}(1678.641862308231,0.0,1.0), Dual{Cells()}(1653.0027275179805,0.0,1.0), Dual{Cells()}(1624.9304633289887,0.0,1.0), Dual{Cells()}(1594.7873426719511,0.0,1.0)  …  Dual{Cells()}(1487.8437655610273,0.0,1.0), Dual{Cells()}(1445.4748298518714,0.0,1.0), Dual{Cells()}(1406.4835714938083,0.0,1.0), Dual{Cells()}(1370.1106923990997,0.0,1.0), Dual{Cells()}(1336.4422816364233,0.0,1.0), Dual{Cells()}(1306.7071279342865,0.0,1.0), Dual{Cells()}(1287.1859816242977,0.0,1.0), Dual{Cells()}(1286.7080242727204,0.0,1.0), Dual{Cells()}(1286.4007372081624,0.0,1.0), Dual{Cells()}(1286.249495750732,0.0,1.0)]), variable_definitions = JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, Concentration::Concentration}, secondary_variables::@NamedTuple{Conductivity::BattMo.Conductivity, Diffusivity::BattMo.Diffusivity, DmuDc::DmuDc, ChemCoef::ChemCoef, Charge::Charge, Mass::Mass}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, BruggemanCoefficient::BattMo.BruggemanCoefficient, VolumeFraction::BattMo.VolumeFraction}, extra_variable_fields::Vector{Symbol}}}((primary_variables = (Voltage = Voltage(), Concentration = Concentration()), secondary_variables = (Conductivity = BattMo.Conductivity(), Diffusivity = BattMo.Diffusivity(), DmuDc = DmuDc(), ChemCoef = ChemCoef(), Charge = Charge(), Mass = Mass()), parameters = (ECTransmissibilities = BattMo.ECTransmissibilities(), Volume = BattMo.Volume(), Temperature = Temperature(), BruggemanCoefficient = BattMo.BruggemanCoefficient(), VolumeFraction = BattMo.VolumeFraction()), extra_variable_fields = Symbol[])), equations = (charge_conservation = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.006441040744728873,138.20260763932802,-0.0029862532510886125) Dual{Cells()}(0.006441040744728873,-138.20260763932802,0.0029892591126174876) … Dual{Cells()}(-0.0002361436088830672,-101.55655190831087,0.0030044067427411397) Dual{Cells()}(-0.0002361436088830672,101.55655190831087,-0.0030046816841144946)], [1, 3, 6, 9, 12, 15, 18, 21, 24, 27  …  42, 45, 48, 51, 54, 57, 60, 63, 66, 68], [1, 2, 1, 2, 3, 2, 3, 4, 3, 4  …  20, 21, 20, 21, 22, 21, 22, 23, 22, 23], [1899 1905 … 2059 2066; 2073 2079 … 2233 2240], [1, 4, 7, 10, 13, 16, 19, 22, 25, 28  …  40, 43, 46, 49, 52, 55, 58, 61, 64, 67], 23, 23, Jutul.TrivialGlobalMap()),), mass_conservation = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(6.675668260806354e-8,0.0003715565396742461,3.842199275644987e-9) Dual{Cells()}(6.675668260806354e-8,-0.0003715565396742461,-3.6579977745141994e-9) … Dual{Cells()}(-2.4474560204939573e-9,-0.00027303392933638145,-5.605067483977291e-9) Dual{Cells()}(-2.4474560204939573e-9,0.00027303392933638145,5.969700925965907e-9)], [1, 3, 6, 9, 12, 15, 18, 21, 24, 27  …  42, 45, 48, 51, 54, 57, 60, 63, 66, 68], [1, 2, 1, 2, 3, 2, 3, 4, 3, 4  …  20, 21, 20, 21, 22, 21, 22, 23, 22, 23], [1901 1908 … 2062 2068; 2075 2082 … 2236 2242], [1, 4, 7, 10, 13, 16, 19, 22, 25, 28  …  40, 43, 46, 49, 52, 55, 58, 61, 64, 67], 23, 23, Jutul.TrivialGlobalMap()),)), views = (equations = JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}((charge_conservation = [-2.765473651293593e-9 -2.7863169254488396e-9 … -2.2077229367561957e-14 1.586670248313049e-14], mass_conservation = [-2.122706059440975e-14 -2.1387306397624872e-14 … 3.1036809031327328e-21 -6.742967354553541e-21])), primary_variables = JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, Concentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}((Voltage = [5.089421937053159e-5 5.089452088301337e-5 … 5.090002729662921e-5 5.090002099062152e-5], Concentration = [-0.0001277145014164608 -0.00011904544722608618 … 8.836098726142572e-6 8.616141112972429e-6]))))), PeAm = JutulStorage{@NamedTuple{state0::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, state::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, parameters::@NamedTuple{Volume::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, ParticleConcentration::BattMo.ParticleConcentration, SurfaceConcentration::BattMo.SurfaceConcentration}, secondary_variables::@NamedTuple{Charge::Charge, OpenCircuitPotential::BattMo.OpenCircuitPotential, ReactionRateConstant::BattMo.ReactionRateConstant, SolidDiffFlux::BattMo.SolidDiffFlux, DiffusionCoefficient::BattMo.DiffusionCoefficient}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, Conductivity::BattMo.Conductivity, VolumeFraction::BattMo.VolumeFraction}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, mass_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{10, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, solid_diffusion_bc::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, solid_diffusion_bc::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, ParticleConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, SurfaceConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}((state0 = (Volume = [6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], SurfaceConcentration = [12300.273634543519, 6031.887595109305, 4957.662033148967, 4905.101516896389, 5757.909992675495, 9580.446284038751, 22458.710081556204, 23773.61874328285, 23883.078149521818, 23992.988981688424], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72], Conductivity = [0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177], ECTransmissibilities = [764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], OpenCircuitPotential = [3.4323, 3.4323, 3.4323728316711297, 3.4323847817695574, 3.4323, 3.4323, 3.4307514964923835, 3.4114110121014636, 3.3979141986152332, 3.3843617223791536], ReactionRateConstant = [3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11], DiffusionCoefficient = [1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15], Charge = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], Voltage = [2.0883762055433417, 2.0871569600645272, 2.0856622850108075, 2.0839989859828756, 2.0820254061760157, 2.079170583133549, 2.072865688207688, 2.059415481245223, 2.0459085748930637, 2.032349698027513], ParticleConcentration = [12077.087615050246 5981.837127397039 … 23875.24108198864 23985.34043254; 12081.547714709204 5982.83057440759 … 23875.369074180962 23985.46587182354; … ; 12237.7405158248 6017.788341113599 … 23880.54281399142 23990.52090023291; 12277.935090433031 6026.841280962342 … 23882.12596587545 23992.062866752647], SolidDiffFlux = [-8.056794385644804e-21 -1.7945783522944986e-21 … -2.312071153938283e-22 -2.2659550069327974e-22; -6.445717272718053e-20 -1.436256210931154e-20 … -1.870612809349116e-21 -1.8328116860868876e-21; … ; -4.1293097112526826e-18 -9.276692200727734e-19 … -1.5176660062816157e-19 -1.479989070457847e-19; -5.881257207630181e-18 -1.324623242181575e-18 … -2.3164627364475824e-19 -2.2562004440942414e-19]), state = (Volume = [6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], SurfaceConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(12300.273634543519,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(6031.887595109305,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(4957.662033148967,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(4905.101516896389,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(5757.909992675495,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(9580.446284038751,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(22458.710081556204,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(23773.61874328285,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(23883.078149521818,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(23992.988981688424,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0)], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72], Conductivity = [0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177], ECTransmissibilities = [764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], OpenCircuitPotential = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(3.4323,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.4323,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.4323728316711297,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-2.2735884804830986e-7), Dual{Cells()}(3.4323847817695574,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-2.2735884804830986e-7), Dual{Cells()}(3.4323,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.4323,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.4307514964923835,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-1.2807881773398772e-5), Dual{Cells()}(3.4114110121014636,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0001233042819249718), Dual{Cells()}(3.3979141986152332,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0001233042819249718), Dual{Cells()}(3.3843617223791536,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0001233042819249718)], ReactionRateConstant = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], DiffusionCoefficient = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], Charge = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], Voltage = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(2.0883762055433417,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0871569600645272,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0856622850108075,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0839989859828756,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0820254061760157,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.079170583133549,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.072865688207688,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.059415481245223,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0459085748930637,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.032349698027513,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], ParticleConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(12077.087615050246,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(5981.837127397039,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(23875.24108198864,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(23985.34043254,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); Dual{Cells()}(12081.547714709204,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(5982.83057440759,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(23875.369074180962,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(23985.46587182354,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); … ; Dual{Cells()}(12237.7405158248,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(6017.788341113599,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) … Dual{Cells()}(23880.54281399142,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(23990.52090023291,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0); Dual{Cells()}(12277.935090433031,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(6026.841280962342,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) … Dual{Cells()}(23882.12596587545,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(23992.062866752647,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0)], SolidDiffFlux = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-8.056794385644804e-21,-0.0,1.806415775814131e-21,-1.806415775814131e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(-1.7945783522944986e-21,-0.0,1.806415775814131e-21,-1.806415775814131e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) … Dual{Cells()}(-2.312071153938283e-22,-0.0,1.806415775814131e-21,-1.806415775814131e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(-2.2659550069327974e-22,-0.0,1.806415775814131e-21,-1.806415775814131e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0); Dual{Cells()}(-6.445717272718053e-20,-0.0,-0.0,7.225663103256525e-21,-7.225663103256525e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(-1.436256210931154e-20,-0.0,-0.0,7.225663103256525e-21,-7.225663103256525e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) … Dual{Cells()}(-1.870612809349116e-21,-0.0,-0.0,7.225663103256525e-21,-7.225663103256525e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(-1.8328116860868876e-21,-0.0,-0.0,7.225663103256525e-21,-7.225663103256525e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0); … ; Dual{Cells()}(-4.1293097112526826e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.156106096521044e-19,-1.156106096521044e-19,-0.0,-0.0) Dual{Cells()}(-9.276692200727734e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.156106096521044e-19,-1.156106096521044e-19,-0.0,-0.0) … Dual{Cells()}(-1.5176660062816157e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.156106096521044e-19,-1.156106096521044e-19,-0.0,-0.0) Dual{Cells()}(-1.479989070457847e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.156106096521044e-19,-1.156106096521044e-19,-0.0,-0.0); Dual{Cells()}(-5.881257207630181e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.4631967784094464e-19,-1.4631967784094464e-19,-0.0) Dual{Cells()}(-1.324623242181575e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.4631967784094464e-19,-1.4631967784094464e-19,-0.0) … Dual{Cells()}(-2.3164627364475824e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.4631967784094464e-19,-1.4631967784094464e-19,-0.0) Dual{Cells()}(-2.2562004440942414e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.4631967784094464e-19,-1.4631967784094464e-19,-0.0)]), parameters = (Volume = [6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72], Conductivity = [0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177], ECTransmissibilities = [764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821]), primary_variables = (Voltage = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(2.0883762055433417,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0871569600645272,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0856622850108075,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0839989859828756,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0820254061760157,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.079170583133549,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.072865688207688,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.059415481245223,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0459085748930637,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.032349698027513,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], ParticleConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(12077.087615050246,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(5981.837127397039,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(23875.24108198864,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(23985.34043254,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); Dual{Cells()}(12081.547714709204,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(5982.83057440759,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(23875.369074180962,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(23985.46587182354,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); … ; Dual{Cells()}(12237.7405158248,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(6017.788341113599,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) … Dual{Cells()}(23880.54281399142,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(23990.52090023291,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0); Dual{Cells()}(12277.935090433031,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(6026.841280962342,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) … Dual{Cells()}(23882.12596587545,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(23992.062866752647,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0)], SurfaceConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(12300.273634543519,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(6031.887595109305,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(4957.662033148967,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(4905.101516896389,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(5757.909992675495,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(9580.446284038751,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(22458.710081556204,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(23773.61874328285,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(23883.078149521818,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(23992.988981688424,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0)]), variable_definitions = JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, ParticleConcentration::BattMo.ParticleConcentration, SurfaceConcentration::BattMo.SurfaceConcentration}, secondary_variables::@NamedTuple{Charge::Charge, OpenCircuitPotential::BattMo.OpenCircuitPotential, ReactionRateConstant::BattMo.ReactionRateConstant, SolidDiffFlux::BattMo.SolidDiffFlux, DiffusionCoefficient::BattMo.DiffusionCoefficient}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, Conductivity::BattMo.Conductivity, VolumeFraction::BattMo.VolumeFraction}, extra_variable_fields::Vector{Symbol}}}((primary_variables = (Voltage = Voltage(), ParticleConcentration = BattMo.ParticleConcentration(), SurfaceConcentration = BattMo.SurfaceConcentration()), secondary_variables = (Charge = Charge(), OpenCircuitPotential = BattMo.OpenCircuitPotential(), ReactionRateConstant = BattMo.ReactionRateConstant(), SolidDiffFlux = BattMo.SolidDiffFlux(), DiffusionCoefficient = BattMo.DiffusionCoefficient()), parameters = (ECTransmissibilities = BattMo.ECTransmissibilities(), Volume = BattMo.Volume(), Temperature = Temperature(), Conductivity = BattMo.Conductivity(), VolumeFraction = BattMo.VolumeFraction()), extra_variable_fields = Symbol[])), equations = (charge_conservation = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(0.0056959500597951905,4.671700784434027,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(0.0056959500597951905,-4.671700784434027,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(-0.06334301568883755,-4.671700784434067,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(-0.06334301568883755,4.671700784434067,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], [1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 29], [1, 2, 1, 2, 3, 2, 3, 4, 3, 4  …  7, 8, 7, 8, 9, 8, 9, 10, 9, 10], [2247 2262 … 2376 2391; 2407 2422 … 2536 2551; … ; 3847 3862 … 3976 3991; 4007 4022 … 4136 4151], [1, 4, 7, 10, 13, 16, 19, 22, 25, 28], 10, 10, Jutul.TrivialGlobalMap()),), mass_conservation = (Cells = Jutul.GenericAutoDiffCache{10, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(2.5714174023107704e-33,0.0,1.9338283018682212e-21,-1.806415775814131e-21,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(7.432885879119488e-34,0.0,1.9338283018682212e-21,-1.806415775814131e-21,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(1.5316221193474077e-33,0.0,1.9338283018682212e-21,-1.806415775814131e-21,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(1.834805622311492e-33,0.0,1.9338283018682212e-21,-1.806415775814131e-21,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); Dual{Cells()}(-1.0075021021575728e-32,0.0,-1.806415775814131e-21,9.923966561449286e-21,-7.225663103256525e-21,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(-4.841908250811035e-33,0.0,-1.806415775814131e-21,9.923966561449286e-21,-7.225663103256525e-21,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(1.167632644603988e-32,0.0,-1.806415775814131e-21,9.923966561449286e-21,-7.225663103256525e-21,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2.9088313007707998e-33,0.0,-1.806415775814131e-21,9.923966561449286e-21,-7.225663103256525e-21,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); … ; Dual{Cells()}(1.1940765655200862e-31,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.156106096521044e-19,2.895788056467866e-19,-1.4631967784094464e-19,0.0) Dual{Cells()}(-6.162975822039155e-33,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.156106096521044e-19,2.895788056467866e-19,-1.4631967784094464e-19,0.0) … Dual{Cells()}(-1.663521989464475e-31,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.156106096521044e-19,2.895788056467866e-19,-1.4631967784094464e-19,0.0) Dual{Cells()}(3.019376670313089e-31,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.156106096521044e-19,2.895788056467866e-19,-1.4631967784094464e-19,0.0); Dual{Cells()}(6.162975822039155e-32,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.4631967784094464e-19,5.421316275644292e-19,-3.612831551628262e-19) Dual{Cells()}(1.020742870525235e-31,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.4631967784094464e-19,5.421316275644292e-19,-3.612831551628262e-19) … Dual{Cells()}(1.4749252996603549e-30,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.4631967784094464e-19,5.421316275644292e-19,-3.612831551628262e-19) Dual{Cells()}(-2.8990060487888868e-31,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.4631967784094464e-19,5.421316275644292e-19,-3.612831551628262e-19)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2249 2265 … 2377 2392; 2409 2425 … 2537 2552; … ; 3858 3874 … 3986 4001; 4018 4034 … 4146 4161], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 10, Jutul.TrivialGlobalMap()),), solid_diffusion_bc = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-8.070539697980864e-18,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.612831551628262e-19,-3.612831551628262e-19) Dual{Cells()}(-1.8231482969574853e-18,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.612831551628262e-19,-3.612831551628262e-19) … Dual{Cells()}(-3.440079120543524e-19,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.612831551628262e-19,-3.612831551628262e-19) Dual{Cells()}(-3.3458972604098697e-19,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.612831551628262e-19,-3.612831551628262e-19)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2259 2275 … 2387 2402; 2419 2435 … 2547 2562; … ; 3859 3875 … 3987 4002; 4019 4035 … 4147 4162], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 10, Jutul.TrivialGlobalMap()),)), views = (equations = JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, solid_diffusion_bc::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}((charge_conservation = [2.8041804989165087e-15 -2.7976752858815956e-15 … 1.4837306730464128e-16 1.4016565685892601e-15], mass_conservation = [2.5714174023107704e-33 7.432885879119488e-34 … 1.5316221193474077e-33 1.834805622311492e-33; -1.0075021021575728e-32 -4.841908250811035e-33 … 1.167632644603988e-32 2.9088313007707998e-33; … ; 1.1940765655200862e-31 -6.162975822039155e-33 … -1.663521989464475e-31 3.019376670313089e-31; 6.162975822039155e-32 1.020742870525235e-31 … 1.4749252996603549e-30 -2.8990060487888868e-31], solid_diffusion_bc = [-3.412747861454182e-30 1.657455310139655e-30 … 1.5613995541633418e-30 -1.1529579612074187e-30])), primary_variables = JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, ParticleConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, SurfaceConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}((Voltage = [5.0900438102197997e-5 5.0900355785888486e-5 … 5.0900078623847156e-5 5.090007475858988e-5], ParticleConcentration = [8.12338324650245e-7 4.375439935279435e-9 … -3.644984582891777e-8 -3.813499482115312e-8; 8.696342399634713e-7 4.6841600818703985e-9 … -3.902111500175212e-8 -4.082620341237674e-8; … ; 4.999146185683689e-6 2.692537963147667e-8 … -2.2430713506350988e-7 -2.3468316028169056e-7; 7.057556884496863e-6 3.801196133455584e-8 … -3.1666596383674405e-7 -3.313171038277928e-7], SurfaceConcentration = [8.565721354580744e-6 4.613575131204068e-8 … -3.843363206968431e-7 -4.021158419828603e-7]))))), Control = JutulStorage{@NamedTuple{state0::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{Float64}, Current::Vector{Float64}, ImaxCharge::Vector{Float64}}, state::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Current::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ImaxCharge::Vector{Float64}}, parameters::@NamedTuple{ImaxDischarge::Vector{Float64}, ImaxCharge::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Current::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::VoltageVar, Current::CurrentVar}, secondary_variables::@NamedTuple{}, parameters::@NamedTuple{ImaxDischarge::BattMo.ImaxDischarge, ImaxCharge::BattMo.ImaxCharge}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, control::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, control::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, Current::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}((state0 = (Controller = BattMo.CCController{Int64, Float64}(0, 0.06357915909518233, 6748.4375, false, &quot;discharging&quot;), ImaxDischarge = [0.06357915909518233], Voltage = [2.025544985757671], Current = [0.06357915909518233], ImaxCharge = [0.0]), state = (Controller = BattMo.CCController{Int64, Float64}(0, 0.06357915909518233, 6748.4375, false, &quot;discharging&quot;), ImaxDischarge = [0.06357915909518233], Voltage = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(2.025544985757671,1.0,0.0)], Current = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.06357915909518233,0.0,1.0)], ImaxCharge = [0.0]), parameters = (ImaxDischarge = [0.06357915909518233], ImaxCharge = [0.0]), primary_variables = (Voltage = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(2.025544985757671,1.0,0.0)], Current = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.06357915909518233,0.0,1.0)]), variable_definitions = JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::VoltageVar, Current::CurrentVar}, secondary_variables::@NamedTuple{}, parameters::@NamedTuple{ImaxDischarge::BattMo.ImaxDischarge, ImaxCharge::BattMo.ImaxCharge}, extra_variable_fields::Vector{Symbol}}}((primary_variables = (Voltage = VoltageVar(), Current = CurrentVar()), secondary_variables = NamedTuple(), parameters = (ImaxDischarge = BattMo.ImaxDischarge(), ImaxCharge = BattMo.ImaxCharge()), extra_variable_fields = [:Controller])), equations = (charge_conservation = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.06357915929773683,1.0e-10,1.0);;], [1, 2], [1], [4166; 4169;;], [1], 1, 1, Jutul.TrivialGlobalMap()),), control = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.0,0.0,1.0);;], [1, 2], [1], [4167; 4170;;], [1], 1, 1, Jutul.TrivialGlobalMap()),)), views = (equations = JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, control::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}((charge_conservation = [-1.0547118733938987e-15;;], control = [0.0;;])), primary_variables = JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, Current::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}((Voltage = [5.0900074757814885e-5;;], Current = [-0.0;;]))))), state = JutulStorage{@NamedTuple{NeAm::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, Elyte::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Diffusivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Concentration::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, PeAm::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, Control::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Current::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ImaxCharge::Vector{Float64}}}}((NeAm = (BoundaryVoltage = [0.0], Volume = [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8], SurfaceConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(42.81532071735261,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.769160520664606,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.677625393676465,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.54202247463053,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.36345042067212,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.143948467139936,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(41.88555711574829,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(41.591614660334244,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(41.26579601016947,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(40.90854902579595,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0)], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001], Conductivity = [125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838], ECTransmissibilities = [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294], OpenCircuitPotential = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(1.2007500284715267,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2008428332981653,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2010268641776023,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.201299493115447,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2016585112674305,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2020998187618956,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.202619313181144,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2032102829034097,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2038653395434098,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2045835826799383,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234)], ReactionRateConstant = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], DiffusionCoefficient = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], Charge = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], Voltage = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-2.1173232928168587e-7,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-5.922968748222838e-7,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-9.299979381970803e-7,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.2249073585544645e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.4771306021983557e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.6868062007057387e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.8541035993136588e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.9792213629153e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-2.0623828071074753e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-2.1038310525590007e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], ParticleConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(2191.999182857426,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2189.2507271880345,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(2103.6815859459252,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2084.1211330478104,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); Dual{Cells()}(2148.787956795936,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2146.1091605829815,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(2062.6912135604107,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2043.6189249103516,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); … ; Dual{Cells()}(642.017370776268,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(641.3896103895692,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) … Dual{Cells()}(621.6591049969663,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(617.1112814419341,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0); Dual{Cells()}(256.43869791599593,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(256.21013243352434,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) … Dual{Cells()}(248.97887089194455,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(247.30227501930904,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0)], SolidDiffFlux = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(3.123655138693319e-17,-0.0,7.228804695910114e-19,-7.228804695910114e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(3.118619592635258e-17,-0.0,7.228804695910114e-19,-7.228804695910114e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) … Dual{Cells()}(2.963113963875118e-17,-0.0,7.228804695910114e-19,-7.228804695910114e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(2.927825523787915e-17,-0.0,7.228804695910114e-19,-7.228804695910114e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0); Dual{Cells()}(2.4981707268577154e-16,-0.0,-0.0,2.8915218783640456e-18,-2.8915218783640456e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(2.4941942971595423e-16,-0.0,-0.0,2.8915218783640456e-18,-2.8915218783640456e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) … Dual{Cells()}(2.3713430878979225e-16,-0.0,-0.0,2.8915218783640456e-18,-2.8915218783640456e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(2.3434527599351663e-16,-0.0,-0.0,2.8915218783640456e-18,-2.8915218783640456e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0); … ; Dual{Cells()}(1.5888510033663647e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,4.626435005382473e-17,-4.626435005382473e-17,-0.0,-0.0) Dual{Cells()}(1.586991972777687e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,4.626435005382473e-17,-4.626435005382473e-17,-0.0,-0.0) … Dual{Cells()}(1.5289683749643333e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,4.626435005382473e-17,-4.626435005382473e-17,-0.0,-0.0) Dual{Cells()}(1.5156768065786096e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,4.626435005382473e-17,-4.626435005382473e-17,-0.0,-0.0); Dual{Cells()}(2.25769106602225e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,5.855331803687191e-17,-5.855331803687191e-17,-0.0) Dual{Cells()}(2.2553536474036587e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,5.855331803687191e-17,-5.855331803687191e-17,-0.0) … Dual{Cells()}(2.182166427360722e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,5.855331803687191e-17,-5.855331803687191e-17,-0.0) Dual{Cells()}(2.1653544365963574e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,5.855331803687191e-17,-5.855331803687191e-17,-0.0)]), Elyte = (Volume = [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8  …  6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Mass = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(2.1945849665328002e-5,0.0,1.245195e-8), Dual{Cells()}(2.189294310654668e-5,0.0,1.2451949999999999e-8), Dual{Cells()}(2.1788159652078428e-5,0.0,1.2451949999999992e-8), Dual{Cells()}(2.163350235673774e-5,0.0,1.2451950000000002e-8), Dual{Cells()}(2.143183995010795e-5,0.0,1.2451949999999999e-8), Dual{Cells()}(2.118675614738006e-5,0.0,1.2451950000000002e-8), Dual{Cells()}(2.090236453736898e-5,0.0,1.2451950000000002e-8), Dual{Cells()}(2.0583107312917517e-5,0.0,1.2451950000000002e-8), Dual{Cells()}(2.0233552882849377e-5,0.0,1.2451949999999985e-8), Dual{Cells()}(1.9858212251584003e-5,0.0,1.2451950000000002e-8)  …  Dual{Cells()}(2.6962942774499457e-5,0.0,1.812216000000002e-8), Dual{Cells()}(2.6195126142548415e-5,0.0,1.8122160000000016e-8), Dual{Cells()}(2.5488520319982227e-5,0.0,1.8122159999999996e-8), Dual{Cells()}(2.4829365185367293e-5,0.0,1.8122160000000016e-8), Dual{Cells()}(2.4219220858580352e-5,0.0,1.812216000000002e-8), Dual{Cells()}(2.3680355645565634e-5,0.0,1.8122160000000016e-8), Dual{Cells()}(2.3326590308752604e-5,0.0,1.8122160000000016e-8), Dual{Cells()}(2.331792868915411e-5,0.0,1.812215999999999e-8), Dual{Cells()}(2.3312359983804338e-5,0.0,1.812216000000005e-8), Dual{Cells()}(2.3309619161914075e-5,0.0,1.812215999999999e-8)], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15  …  298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993  …  0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28], Conductivity = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.1157449730305673,0.0,-7.569708961683358e-5), Dual{Cells()}(0.11606652775731731,0.0,-7.566289385672752e-5), Dual{Cells()}(0.1167029139425651,0.0,-7.558481530844872e-5), Dual{Cells()}(0.11764086106148108,0.0,-7.54443722630224e-5), Dual{Cells()}(0.11886092094663214,0.0,-7.521594685776246e-5), Dual{Cells()}(0.12033805911527962,0.0,-7.486897982287601e-5), Dual{Cells()}(0.12204250420571466,0.0,-7.437040206809859e-5), Dual{Cells()}(0.12394081665202009,0.0,-7.368699738746046e-5), Dual{Cells()}(0.12599712264463436,0.0,-7.278742672309706e-5), Dual{Cells()}(0.12817439036063968,0.0,-7.16437401368234e-5)  …  Dual{Cells()}(0.12223210515543873,0.0,-5.95758371767477e-5), Dual{Cells()}(0.12470256060591244,0.0,-5.6982530486228713e-5), Dual{Cells()}(0.1268727830634557,0.0,-5.428591168201883e-5), Dual{Cells()}(0.1287974170887019,0.0,-5.149783786383138e-5), Dual{Cells()}(0.13048445743835868,0.0,-4.8678668929459585e-5), Dual{Cells()}(0.13189248187227626,0.0,-4.5995178350362036e-5), Dual{Cells()}(0.13277231764761704,0.0,-4.4133316323389085e-5), Dual{Cells()}(0.1327934003584807,0.0,-4.408672622169074e-5), Dual{Cells()}(0.13280694303359453,0.0,-4.405674720033449e-5), Dual{Cells()}(0.1328136051239624,0.0,-4.404198472484535e-5)], ECTransmissibilities = [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294, 1119.628647214855  …  886.764705882349, 764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], ChemCoef = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(2.49924314084208e-6,0.0,-3.0525586751447265e-9), Dual{Cells()}(2.512242824584917e-6,0.0,-3.0665891075633623e-9), Dual{Cells()}(2.53816541298458e-6,0.0,-3.094453578020248e-9), Dual{Cells()}(2.5768558816166825e-6,0.0,-3.135769122273897e-9), Dual{Cells()}(2.6280789286046275e-6,0.0,-3.1899851734599384e-9), Dual{Cells()}(2.691518103344934e-6,0.0,-3.256410539310913e-9), Dual{Cells()}(2.766778953977508e-6,0.0,-3.3342476368009096e-9), Dual{Cells()}(2.8533969043610383e-6,0.0,-3.422630812438334e-9), Dual{Cells()}(2.9508507852345443e-6,0.0,-3.5206663631830405e-9), Dual{Cells()}(3.058580270962546e-6,0.0,-3.6274701917503455e-9)  …  Dual{Cells()}(3.1264347161128786e-6,0.0,-3.625141186424429e-9), Dual{Cells()}(3.2831160941939524e-6,0.0,-3.771518184926822e-9), Dual{Cells()}(3.4328529896996194e-6,0.0,-3.909572424853449e-9), Dual{Cells()}(3.577444465080222e-6,0.0,-4.0414532782613454e-9), Dual{Cells()}(3.715608771309762e-6,0.0,-4.166372815332034e-9), Dual{Cells()}(3.8411669458111565e-6,0.0,-4.279116825148593e-9), Dual{Cells()}(3.925433617396579e-6,0.0,-4.3544324364930995e-9), Dual{Cells()}(3.927515294236022e-6,0.0,-4.356289799598029e-9), Dual{Cells()}(3.928854109256943e-6,0.0,-4.3574842714331276e-9), Dual{Cells()}(3.929513185992811e-6,0.0,-4.358072268154327e-9)], Charge = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0)  …  Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0)], Voltage = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(-1.3333801662120677,1.0,0.0), Dual{Cells()}(-1.3335186267408705,1.0,0.0), Dual{Cells()}(-1.3337939932604224,1.0,0.0), Dual{Cells()}(-1.3342032330881073,1.0,0.0), Dual{Cells()}(-1.334741981489335,1.0,0.0), Dual{Cells()}(-1.3354047472456956,1.0,0.0), Dual{Cells()}(-1.3361851735397174,1.0,0.0), Dual{Cells()}(-1.3370763289440977,1.0,0.0), Dual{Cells()}(-1.33807101353097,1.0,0.0), Dual{Cells()}(-1.339162048925923,1.0,0.0)  …  Dual{Cells()}(-1.3432461884978053,1.0,0.0), Dual{Cells()}(-1.3449585405270637,1.0,0.0), Dual{Cells()}(-1.3465874448838475,1.0,0.0), Dual{Cells()}(-1.3481553488622278,1.0,0.0), Dual{Cells()}(-1.3496504395542033,1.0,0.0), Dual{Cells()}(-1.35100748903293,1.0,0.0), Dual{Cells()}(-1.3519175094983524,1.0,0.0), Dual{Cells()}(-1.3519389686800418,1.0,0.0), Dual{Cells()}(-1.3519527744242112,1.0,0.0), Dual{Cells()}(-1.3519595741357189,1.0,0.0)], Diffusivity = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(9.74683587046272e-12,0.0,-1.4331964731875067e-14), Dual{Cells()}(9.807991206671544e-12,0.0,-1.4454756848449344e-14), Dual{Cells()}(9.930651571839526e-12,0.0,-1.4697951311527192e-14), Dual{Cells()}(1.0115434063765826e-11,0.0,-1.5056899182565878e-14), Dual{Cells()}(1.0363074303412139e-11,0.0,-1.5524942357437354e-14), Dual{Cells()}(1.0674239728143869e-11,0.0,-1.6093763304560763e-14), Dual{Cells()}(1.1049344655182878e-11,0.0,-1.6753814695798794e-14), Dual{Cells()}(1.1488396906887688e-11,0.0,-1.7494786537949018e-14), Dual{Cells()}(1.1990902541164651e-11,0.0,-1.830607590007502e-14), Dual{Cells()}(1.2555834192377068e-11,0.0,-1.9177213082515927e-14)  …  Dual{Cells()}(1.3319680584303935e-11,0.0,-2.0078633571864362e-14), Dual{Cells()}(1.4193780294292571e-11,0.0,-2.1182714883472946e-14), Dual{Cells()}(1.5039529795914494e-11,0.0,-2.2198778160699346e-14), Dual{Cells()}(1.586420095207016e-11,0.0,-2.314660975915009e-14), Dual{Cells()}(1.665828011750182e-11,0.0,-2.4023966305696516e-14), Dual{Cells()}(1.7384156750658177e-11,0.0,-2.479882710762228e-14), Dual{Cells()}(1.7873223453154592e-11,0.0,-2.5307523690656305e-14), Dual{Cells()}(1.7885322346624746e-11,0.0,-2.5319978659628024e-14), Dual{Cells()}(1.7893104078844682e-11,0.0,-2.53279861750305e-14), Dual{Cells()}(1.7896935018421153e-11,0.0,-2.5331927337674647e-14)], Concentration = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(1762.442803362365,0.0,1.0), Dual{Cells()}(1758.19394605236,0.0,1.0), Dual{Cells()}(1749.7789223437649,0.0,1.0), Dual{Cells()}(1737.3585949781148,0.0,1.0), Dual{Cells()}(1721.1633479180332,0.0,1.0), Dual{Cells()}(1701.4809846955745,0.0,1.0), Dual{Cells()}(1678.641862308231,0.0,1.0), Dual{Cells()}(1653.0027275179805,0.0,1.0), Dual{Cells()}(1624.9304633289887,0.0,1.0), Dual{Cells()}(1594.7873426719511,0.0,1.0)  …  Dual{Cells()}(1487.8437655610273,0.0,1.0), Dual{Cells()}(1445.4748298518714,0.0,1.0), Dual{Cells()}(1406.4835714938083,0.0,1.0), Dual{Cells()}(1370.1106923990997,0.0,1.0), Dual{Cells()}(1336.4422816364233,0.0,1.0), Dual{Cells()}(1306.7071279342865,0.0,1.0), Dual{Cells()}(1287.1859816242977,0.0,1.0), Dual{Cells()}(1286.7080242727204,0.0,1.0), Dual{Cells()}(1286.4007372081624,0.0,1.0), Dual{Cells()}(1286.249495750732,0.0,1.0)], BruggemanCoefficient = [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5  …  1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5], DmuDc = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(1.4065460875513616,0.0,-0.000798066232202243), Dual{Cells()}(1.4099451514824881,0.0,-0.00080192811188334), Dual{Cells()}(1.4167258491615136,0.0,-0.000809659912501324), Dual{Cells()}(1.4268539821127804,0.0,-0.0008212777639786876), Dual{Cells()}(1.4402799319431263,0.0,-0.0008368060670623324), Dual{Cells()}(1.456940778004591,0.0,-0.0008562780255021562), Dual{Cells()}(1.4767634986736697,0.0,-0.0008797370849807316), Dual{Cells()}(1.4996690497447613,0.0,-0.0009072393074611237), Dual{Cells()}(1.5255773004118334,0.0,-0.0009388569756310612), Dual{Cells()}(1.5544122801031732,0.0,-0.000974683105710425)  …  Dual{Cells()}(1.666140684245592,0.0,-0.0011198357803497824), Dual{Cells()}(1.7149776519155477,0.0,-0.0011864458768135687), Dual{Cells()}(1.7625211412668826,0.0,-0.0012531402264407052), Dual{Cells()}(1.8093114982276866,0.0,-0.0013205586295071787), Dual{Cells()}(1.854892698072227,0.0,-0.001387933263979781), Dual{Cells()}(1.8971022477862027,0.0,-0.0014518190091954613), Dual{Cells()}(1.9258732343201848,0.0,-0.0014961887884219565), Dual{Cells()}(1.9265886143855804,0.0,-0.0014973005359739918), Dual{Cells()}(1.9270488253780043,0.0,-0.0014980159522919906), Dual{Cells()}(1.9272754141338038,0.0,-0.0014983682563147911)]), PeAm = (Volume = [6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], SurfaceConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(12300.273634543519,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(6031.887595109305,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(4957.662033148967,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(4905.101516896389,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(5757.909992675495,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(9580.446284038751,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(22458.710081556204,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(23773.61874328285,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(23883.078149521818,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(23992.988981688424,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0)], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72], Conductivity = [0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177], ECTransmissibilities = [764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], OpenCircuitPotential = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(3.4323,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.4323,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.4323728316711297,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-2.2735884804830986e-7), Dual{Cells()}(3.4323847817695574,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-2.2735884804830986e-7), Dual{Cells()}(3.4323,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.4323,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.4307514964923835,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-1.2807881773398772e-5), Dual{Cells()}(3.4114110121014636,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0001233042819249718), Dual{Cells()}(3.3979141986152332,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0001233042819249718), Dual{Cells()}(3.3843617223791536,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0001233042819249718)], ReactionRateConstant = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], DiffusionCoefficient = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], Charge = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], Voltage = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(2.0883762055433417,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0871569600645272,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0856622850108075,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0839989859828756,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0820254061760157,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.079170583133549,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.072865688207688,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.059415481245223,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0459085748930637,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.032349698027513,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], ParticleConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(12077.087615050246,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(5981.837127397039,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(23875.24108198864,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(23985.34043254,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); Dual{Cells()}(12081.547714709204,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(5982.83057440759,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(23875.369074180962,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(23985.46587182354,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); … ; Dual{Cells()}(12237.7405158248,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(6017.788341113599,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) … Dual{Cells()}(23880.54281399142,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(23990.52090023291,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0); Dual{Cells()}(12277.935090433031,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(6026.841280962342,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) … Dual{Cells()}(23882.12596587545,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(23992.062866752647,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0)], SolidDiffFlux = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-8.056794385644804e-21,-0.0,1.806415775814131e-21,-1.806415775814131e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(-1.7945783522944986e-21,-0.0,1.806415775814131e-21,-1.806415775814131e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) … Dual{Cells()}(-2.312071153938283e-22,-0.0,1.806415775814131e-21,-1.806415775814131e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(-2.2659550069327974e-22,-0.0,1.806415775814131e-21,-1.806415775814131e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0); Dual{Cells()}(-6.445717272718053e-20,-0.0,-0.0,7.225663103256525e-21,-7.225663103256525e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(-1.436256210931154e-20,-0.0,-0.0,7.225663103256525e-21,-7.225663103256525e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) … Dual{Cells()}(-1.870612809349116e-21,-0.0,-0.0,7.225663103256525e-21,-7.225663103256525e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(-1.8328116860868876e-21,-0.0,-0.0,7.225663103256525e-21,-7.225663103256525e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0); … ; Dual{Cells()}(-4.1293097112526826e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.156106096521044e-19,-1.156106096521044e-19,-0.0,-0.0) Dual{Cells()}(-9.276692200727734e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.156106096521044e-19,-1.156106096521044e-19,-0.0,-0.0) … Dual{Cells()}(-1.5176660062816157e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.156106096521044e-19,-1.156106096521044e-19,-0.0,-0.0) Dual{Cells()}(-1.479989070457847e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.156106096521044e-19,-1.156106096521044e-19,-0.0,-0.0); Dual{Cells()}(-5.881257207630181e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.4631967784094464e-19,-1.4631967784094464e-19,-0.0) Dual{Cells()}(-1.324623242181575e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.4631967784094464e-19,-1.4631967784094464e-19,-0.0) … Dual{Cells()}(-2.3164627364475824e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.4631967784094464e-19,-1.4631967784094464e-19,-0.0) Dual{Cells()}(-2.2562004440942414e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.4631967784094464e-19,-1.4631967784094464e-19,-0.0)]), Control = (Controller = BattMo.CCController{Int64, Float64}(0, 0.06357915909518233, 6748.4375, false, &quot;discharging&quot;), ImaxDischarge = [0.06357915909518233], Voltage = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(2.025544985757671,1.0,0.0)], Current = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.06357915909518233,0.0,1.0)], ImaxCharge = [0.0]))), state0 = JutulStorage{@NamedTuple{NeAm::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, Elyte::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, Diffusivity::Vector{Float64}, Concentration::Vector{Float64}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{Float64}}, PeAm::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, Control::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{Float64}, Current::Vector{Float64}, ImaxCharge::Vector{Float64}}}}((NeAm = (BoundaryVoltage = [0.0], Volume = [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8], SurfaceConcentration = [42.81532071735261, 42.769160520664606, 42.677625393676465, 42.54202247463053, 42.36345042067212, 42.143948467139936, 41.88555711574829, 41.591614660334244, 41.26579601016947, 40.90854902579595], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001], Conductivity = [125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838], ECTransmissibilities = [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294], OpenCircuitPotential = [1.2007500284715267, 1.2008428332981653, 1.2010268641776023, 1.201299493115447, 1.2016585112674305, 1.2020998187618956, 1.202619313181144, 1.2032102829034097, 1.2038653395434098, 1.2045835826799383], ReactionRateConstant = [1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11], DiffusionCoefficient = [3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14], Charge = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], Voltage = [-2.1173232928168587e-7, -5.922968748222838e-7, -9.299979381970803e-7, -1.2249073585544645e-6, -1.4771306021983557e-6, -1.6868062007057387e-6, -1.8541035993136588e-6, -1.9792213629153e-6, -2.0623828071074753e-6, -2.1038310525590007e-6], ParticleConcentration = [2191.999182857426 2189.2507271880345 … 2103.6815859459252 2084.1211330478104; 2148.787956795936 2146.1091605829815 … 2062.6912135604107 2043.6189249103516; … ; 642.017370776268 641.3896103895692 … 621.6591049969663 617.1112814419341; 256.43869791599593 256.21013243352434 … 248.97887089194455 247.30227501930904], SolidDiffFlux = [3.123655138693319e-17 3.118619592635258e-17 … 2.963113963875118e-17 2.927825523787915e-17; 2.4981707268577154e-16 2.4941942971595423e-16 … 2.3713430878979225e-16 2.3434527599351663e-16; … ; 1.5888510033663647e-14 1.586991972777687e-14 … 1.5289683749643333e-14 1.5156768065786096e-14; 2.25769106602225e-14 2.2553536474036587e-14 … 2.182166427360722e-14 2.1653544365963574e-14]), Elyte = (Volume = [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8  …  6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Mass = [2.1945849665328002e-5, 2.189294310654668e-5, 2.1788159652078428e-5, 2.163350235673774e-5, 2.143183995010795e-5, 2.118675614738006e-5, 2.090236453736898e-5, 2.0583107312917517e-5, 2.0233552882849377e-5, 1.9858212251584003e-5  …  2.6962942774499457e-5, 2.6195126142548415e-5, 2.5488520319982227e-5, 2.4829365185367293e-5, 2.4219220858580352e-5, 2.3680355645565634e-5, 2.3326590308752604e-5, 2.331792868915411e-5, 2.3312359983804338e-5, 2.3309619161914075e-5], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15  …  298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993  …  0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28], Conductivity = [0.1157449730305673, 0.11606652775731731, 0.1167029139425651, 0.11764086106148108, 0.11886092094663214, 0.12033805911527962, 0.12204250420571466, 0.12394081665202009, 0.12599712264463436, 0.12817439036063968  …  0.12223210515543873, 0.12470256060591244, 0.1268727830634557, 0.1287974170887019, 0.13048445743835868, 0.13189248187227626, 0.13277231764761704, 0.1327934003584807, 0.13280694303359453, 0.1328136051239624], ECTransmissibilities = [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294, 1119.628647214855  …  886.764705882349, 764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], ChemCoef = [2.49924314084208e-6, 2.512242824584917e-6, 2.53816541298458e-6, 2.5768558816166825e-6, 2.6280789286046275e-6, 2.691518103344934e-6, 2.766778953977508e-6, 2.8533969043610383e-6, 2.9508507852345443e-6, 3.058580270962546e-6  …  3.1264347161128786e-6, 3.2831160941939524e-6, 3.4328529896996194e-6, 3.577444465080222e-6, 3.715608771309762e-6, 3.8411669458111565e-6, 3.925433617396579e-6, 3.927515294236022e-6, 3.928854109256943e-6, 3.929513185992811e-6], Charge = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0  …  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], Voltage = [-1.3333801662120677, -1.3335186267408705, -1.3337939932604224, -1.3342032330881073, -1.334741981489335, -1.3354047472456956, -1.3361851735397174, -1.3370763289440977, -1.33807101353097, -1.339162048925923  …  -1.3432461884978053, -1.3449585405270637, -1.3465874448838475, -1.3481553488622278, -1.3496504395542033, -1.35100748903293, -1.3519175094983524, -1.3519389686800418, -1.3519527744242112, -1.3519595741357189], Diffusivity = [9.74683587046272e-12, 9.807991206671544e-12, 9.930651571839526e-12, 1.0115434063765826e-11, 1.0363074303412139e-11, 1.0674239728143869e-11, 1.1049344655182878e-11, 1.1488396906887688e-11, 1.1990902541164651e-11, 1.2555834192377068e-11  …  1.3319680584303935e-11, 1.4193780294292571e-11, 1.5039529795914494e-11, 1.586420095207016e-11, 1.665828011750182e-11, 1.7384156750658177e-11, 1.7873223453154592e-11, 1.7885322346624746e-11, 1.7893104078844682e-11, 1.7896935018421153e-11], Concentration = [1762.442803362365, 1758.19394605236, 1749.7789223437649, 1737.3585949781148, 1721.1633479180332, 1701.4809846955745, 1678.641862308231, 1653.0027275179805, 1624.9304633289887, 1594.7873426719511  …  1487.8437655610273, 1445.4748298518714, 1406.4835714938083, 1370.1106923990997, 1336.4422816364233, 1306.7071279342865, 1287.1859816242977, 1286.7080242727204, 1286.4007372081624, 1286.249495750732], BruggemanCoefficient = [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5  …  1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5], DmuDc = [1.4065460875513616, 1.4099451514824881, 1.4167258491615136, 1.4268539821127804, 1.4402799319431263, 1.456940778004591, 1.4767634986736697, 1.4996690497447613, 1.5255773004118334, 1.5544122801031732  …  1.666140684245592, 1.7149776519155477, 1.7625211412668826, 1.8093114982276866, 1.854892698072227, 1.8971022477862027, 1.9258732343201848, 1.9265886143855804, 1.9270488253780043, 1.9272754141338038]), PeAm = (Volume = [6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], SurfaceConcentration = [12300.273634543519, 6031.887595109305, 4957.662033148967, 4905.101516896389, 5757.909992675495, 9580.446284038751, 22458.710081556204, 23773.61874328285, 23883.078149521818, 23992.988981688424], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72], Conductivity = [0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177], ECTransmissibilities = [764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], OpenCircuitPotential = [3.4323, 3.4323, 3.4323728316711297, 3.4323847817695574, 3.4323, 3.4323, 3.4307514964923835, 3.4114110121014636, 3.3979141986152332, 3.3843617223791536], ReactionRateConstant = [3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11], DiffusionCoefficient = [1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15], Charge = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], Voltage = [2.0883762055433417, 2.0871569600645272, 2.0856622850108075, 2.0839989859828756, 2.0820254061760157, 2.079170583133549, 2.072865688207688, 2.059415481245223, 2.0459085748930637, 2.032349698027513], ParticleConcentration = [12077.087615050246 5981.837127397039 … 23875.24108198864 23985.34043254; 12081.547714709204 5982.83057440759 … 23875.369074180962 23985.46587182354; … ; 12237.7405158248 6017.788341113599 … 23880.54281399142 23990.52090023291; 12277.935090433031 6026.841280962342 … 23882.12596587545 23992.062866752647], SolidDiffFlux = [-8.056794385644804e-21 -1.7945783522944986e-21 … -2.312071153938283e-22 -2.2659550069327974e-22; -6.445717272718053e-20 -1.436256210931154e-20 … -1.870612809349116e-21 -1.8328116860868876e-21; … ; -4.1293097112526826e-18 -9.276692200727734e-19 … -1.5176660062816157e-19 -1.479989070457847e-19; -5.881257207630181e-18 -1.324623242181575e-18 … -2.3164627364475824e-19 -2.2562004440942414e-19]), Control = (Controller = BattMo.CCController{Int64, Float64}(0, 0.06357915909518233, 6748.4375, false, &quot;discharging&quot;), ImaxDischarge = [0.06357915909518233], Voltage = [2.025544985757671], Current = [0.06357915909518233], ImaxCharge = [0.0]))), cross_terms = Any[JutulStorage{@NamedTuple{N::Int64, helper_mode::Bool, target::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, source::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, target_entities::Vector{Int64}, offdiagonal_alignment::@NamedTuple{from_source::@NamedTuple{Cells::Matrix{Int64}}}}}((N = 10, helper_mode = false, target = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(-0.006441043510202524,0.1267928806516729,-1.8273056855843454e-6) Dual{Cells()}(-0.006435543759035822,0.12668206146850963,-1.8301575242837776e-6) … Dual{Cells()}(-0.006262840506554091,0.12320102630746002,-1.9271103126848374e-6) Dual{Cells()}(-0.006223060525775272,0.12239948206957797,-1.9510628029405418e-6)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1899 1906 … 1962 1970; 2073 2080 … 2136 2144], nothing, 23, 23, Jutul.TrivialGlobalMap()),), source = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-0.006441043510202524,-0.1267928806516729,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0003300330652016201) Dual{Cells()}(-0.006435543759035822,-0.12668206146850963,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0003298272383163325) … Dual{Cells()}(-0.006262840506554091,-0.12320102630746002,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.00032347974484667565) Dual{Cells()}(-0.006223060525775272,-0.12239948206957797,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.00032204535353265874)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [14 30 … 142 157; 172 188 … 300 315; … ; 1594 1610 … 1722 1737; 1752 1768 … 1880 1895], nothing, 23, 10, Jutul.TrivialGlobalMap()),), target_entities = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], offdiagonal_alignment = (from_source = (Cells = [14 30 … 142 157; 172 188 … 300 315; … ; 1594 1610 … 1722 1737; 1752 1768 … 1880 1895],),))), JutulStorage{@NamedTuple{N::Int64, helper_mode::Bool, target::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, source::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, target_entities::Vector{Int64}, offdiagonal_alignment::@NamedTuple{from_source::@NamedTuple{Cells::Matrix{Int64}}}}}((N = 10, helper_mode = false, target = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(-6.675671127007662e-8,1.314115594989805e-6,-1.8938688717364063e-11) Dual{Cells()}(-6.669971036640143e-8,1.31296703510166e-6,-1.896824594242321e-11) … Dual{Cells()}(-6.490976730157596e-8,1.2768886483000363e-6,-1.9973090777249496e-11) Dual{Cells()}(-6.449747685718222e-8,1.268581227744077e-6,-2.0221340843200242e-11)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1901 1909 … 1965 1973; 2075 2083 … 2139 2147], nothing, 23, 23, Jutul.TrivialGlobalMap()),), source = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-6.675671127007662e-8,-1.314115594989805e-6,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-3.420551655697507e-9) Dual{Cells()}(-6.669971036640143e-8,-1.31296703510166e-6,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-3.4184184103730494e-9) … Dual{Cells()}(-6.490976730157596e-8,-1.2768886483000363e-6,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-3.3526312769417377e-9) Dual{Cells()}(-6.449747685718222e-8,-1.268581227744077e-6,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-3.3377648586903386e-9)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [15 31 … 143 158; 173 189 … 301 316; … ; 1595 1611 … 1723 1738; 1753 1769 … 1881 1896], nothing, 23, 10, Jutul.TrivialGlobalMap()),), target_entities = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], offdiagonal_alignment = (from_source = (Cells = [15 31 … 143 158; 173 189 … 301 316; … ; 1595 1611 … 1723 1738; 1753 1769 … 1881 1896],),))), JutulStorage{@NamedTuple{N::Int64, helper_mode::Bool, target::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, source::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, target_entities::Vector{Int64}, offdiagonal_alignment::@NamedTuple{from_source::@NamedTuple{Cells::Matrix{Int64}}}}}((N = 10, helper_mode = false, target = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(0.006441043510202524,0.1267928806516729,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0003300330652016201) Dual{Cells()}(0.006435543759035822,0.12668206146850963,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0003298272383163325) … Dual{Cells()}(0.006262840506554091,0.12320102630746002,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.00032347974484667565) Dual{Cells()}(0.006223060525775272,0.12239948206957797,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.00032204535353265874)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1 17 … 129 145; 159 175 … 287 303; … ; 1581 1597 … 1709 1725; 1739 1755 … 1867 1883], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 10, Jutul.TrivialGlobalMap()),), source = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.006441043510202524,-0.1267928806516729,1.8273056855843454e-6) Dual{Cells()}(0.006435543759035822,-0.12668206146850963,1.8301575242837776e-6) … Dual{Cells()}(0.006262840506554091,-0.12320102630746002,1.9271103126848374e-6) Dual{Cells()}(0.006223060525775272,-0.12239948206957797,1.9510628029405418e-6)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1897 1903 … 1959 1967; 2071 2077 … 2133 2141], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 23, Jutul.TrivialGlobalMap()),), target_entities = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], offdiagonal_alignment = (from_source = (Cells = [1897 1903 … 1959 1967; 2071 2077 … 2133 2141],),))), JutulStorage{@NamedTuple{N::Int64, helper_mode::Bool, target::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, source::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, target_entities::Vector{Int64}, offdiagonal_alignment::@NamedTuple{from_source::@NamedTuple{Cells::Matrix{Int64}}}}}((N = 10, helper_mode = false, target = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-3.0884846705386025e-14,-6.079727106420517e-13,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-1.582510754711578e-15) Dual{Cells()}(-3.085847536176255e-14,-6.074413319176894e-13,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-1.5815238134201731e-15) … Dual{Cells()}(-3.003036211117344e-14,-5.90749745041312e-13,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-1.5510875397848135e-15) Dual{Cells()}(-2.9839616837313514e-14,-5.869063350604036e-13,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-1.5442096238417234e-15)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [13 29 … 141 156; 171 187 … 299 314; … ; 1593 1609 … 1721 1736; 1751 1767 … 1879 1894], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 10, Jutul.TrivialGlobalMap()),), source = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(-3.0884846705386025e-14,6.079727106420517e-13,-8.761942982338015e-18) Dual{Cells()}(-3.085847536176255e-14,6.074413319176894e-13,-8.775617567973236e-18) … Dual{Cells()}(-3.003036211117344e-14,5.90749745041312e-13,-9.24050683672037e-18) Dual{Cells()}(-2.9839616837313514e-14,5.869063350604036e-13,-9.355359187676832e-18)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1898 1904 … 1960 1968; 2072 2078 … 2134 2142], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 23, Jutul.TrivialGlobalMap()),), target_entities = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], offdiagonal_alignment = (from_source = (Cells = [1898 1904 … 1960 1968; 2072 2078 … 2134 2142],),))), JutulStorage{@NamedTuple{N::Int64, helper_mode::Bool, target::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, source::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, target_entities::Vector{Int64}, offdiagonal_alignment::@NamedTuple{from_source::@NamedTuple{Cells::Matrix{Int64}}}}}((N = 10, helper_mode = false, target = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.005695950059792386,8.406478929483125,1.9141626935690354e-6) Dual{Cells()}(0.0012867245611439438,6.974169194604491,4.4508715564276e-7) … Dual{Cells()}(0.0002427906881785112,4.594020794330174,9.436821713326778e-8) Dual{Cells()}(0.0002361436088989339,4.502244399971827,9.179541359551956e-8)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [1994 2002 … 2058 2066; 2168 2176 … 2232 2240], nothing, 23, 23, Jutul.TrivialGlobalMap()),), source = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(0.005695950059792386,-8.406478929483125,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,2.940621148417302e-8) Dual{Cells()}(0.0012867245611439438,-6.974169194604491,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,7.50579345667755e-8) … Dual{Cells()}(0.0002427906881785112,-4.594020794330174,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0005665057763553214) Dual{Cells()}(0.0002361436088989339,-4.502244399971827,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0005551903496246142)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2245 2260 … 2372 2388; 2405 2420 … 2532 2548; … ; 3845 3860 … 3972 3988; 4005 4020 … 4132 4148], nothing, 23, 10, Jutul.TrivialGlobalMap()),), target_entities = [14, 15, 16, 17, 18, 19, 20, 21, 22, 23], offdiagonal_alignment = (from_source = (Cells = [2245 2260 … 2372 2388; 2405 2420 … 2532 2548; … ; 3845 3860 … 3972 3988; 4005 4020 … 4132 4148],),))), JutulStorage{@NamedTuple{N::Int64, helper_mode::Bool, target::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, source::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, target_entities::Vector{Int64}, offdiagonal_alignment::@NamedTuple{from_source::@NamedTuple{Cells::Matrix{Int64}}}}}((N = 10, helper_mode = false, target = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(5.90343618930747e-8,8.712701378349211e-5,1.9838898162406977e-11) Dual{Cells()}(1.3335960217679301e-8,7.228216957941896e-5,4.613003264486431e-12) … Dual{Cells()}(2.5163481420553944e-9,4.761366993563199e-5,9.780576414766953e-13) Dual{Cells()}(2.447456020529872e-9,4.666247464407958e-5,9.513924120535378e-13)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [1997 2005 … 2061 2068; 2171 2179 … 2235 2242], nothing, 23, 23, Jutul.TrivialGlobalMap()),), source = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(5.90343618930747e-8,-8.712701378349211e-5,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,3.047739029376663e-13) Dual{Cells()}(1.3335960217679301e-8,-7.228216957941896e-5,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,7.779206674300183e-13) … Dual{Cells()}(2.5163481420553944e-9,-4.761366993563199e-5,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-5.8714185807128145e-9) Dual{Cells()}(2.447456020529872e-9,-4.666247464407958e-5,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-5.754142447744141e-9)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2246 2261 … 2373 2389; 2406 2421 … 2533 2549; … ; 3846 3861 … 3973 3989; 4006 4021 … 4133 4149], nothing, 23, 10, Jutul.TrivialGlobalMap()),), target_entities = [14, 15, 16, 17, 18, 19, 20, 21, 22, 23], offdiagonal_alignment = (from_source = (Cells = [2246 2261 … 2373 2389; 2406 2421 … 2533 2549; … ; 3846 3861 … 3973 3989; 4006 4021 … 4133 4149],),))), JutulStorage{@NamedTuple{N::Int64, helper_mode::Bool, target::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, source::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, target_entities::Vector{Int64}, offdiagonal_alignment::@NamedTuple{from_source::@NamedTuple{Cells::Matrix{Int64}}}}}((N = 10, helper_mode = false, target = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-0.005695950059792386,8.406478929483125,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-2.940621148417302e-8) Dual{Cells()}(-0.0012867245611439438,6.974169194604491,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-7.50579345667755e-8) … Dual{Cells()}(-0.0002427906881785112,4.594020794330174,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0005665057763553214) Dual{Cells()}(-0.0002361436088989339,4.502244399971827,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0005551903496246142)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2247 2263 … 2375 2391; 2407 2423 … 2535 2551; … ; 3847 3863 … 3975 3991; 4007 4023 … 4135 4151], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 10, Jutul.TrivialGlobalMap()),), source = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(-0.005695950059792386,-8.406478929483125,-1.9141626935690354e-6) Dual{Cells()}(-0.0012867245611439438,-6.974169194604491,-4.4508715564276e-7) … Dual{Cells()}(-0.0002427906881785112,-4.594020794330174,-9.436821713326778e-8) Dual{Cells()}(-0.0002361436088989339,-4.502244399971827,-9.179541359551956e-8)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [1999 2007 … 2063 2069; 2173 2181 … 2237 2243], nothing, 10, 23, Jutul.TrivialGlobalMap()),), target_entities = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], offdiagonal_alignment = (from_source = (Cells = [1999 2007 … 2063 2069; 2173 2181 … 2237 2243],),))), JutulStorage{@NamedTuple{N::Int64, helper_mode::Bool, target::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, source::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, target_entities::Vector{Int64}, offdiagonal_alignment::@NamedTuple{from_source::@NamedTuple{Cells::Matrix{Int64}}}}}((N = 10, helper_mode = false, target = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(8.070539697977451e-18,-1.1911063335951624e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,4.1665392894752504e-23) Dual{Cells()}(1.8231482969591428e-18,-9.881636733928554e-15,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.063489030294334e-22) … Dual{Cells()}(3.440079120559138e-19,-6.509226170309316e-15,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-8.026768685145033e-19) Dual{Cells()}(3.34589726039834e-19,-6.379189034057959e-15,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-7.866441435658858e-19)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2259 2275 … 2387 2402; 2419 2435 … 2547 2562; … ; 3859 3875 … 3987 4002; 4019 4035 … 4147 4162], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 10, Jutul.TrivialGlobalMap()),), source = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(8.070539697977451e-18,1.1911063335951624e-14,2.712159665142751e-21) Dual{Cells()}(1.8231482969591428e-18,9.881636733928554e-15,6.306399320512467e-22) … Dual{Cells()}(3.440079120559138e-19,6.509226170309316e-15,1.3370946630616215e-22) Dual{Cells()}(3.34589726039834e-19,6.379189034057959e-15,1.3006408443509143e-22)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [2000 2008 … 2064 2070; 2174 2182 … 2238 2244], nothing, 10, 23, Jutul.TrivialGlobalMap()),), target_entities = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], offdiagonal_alignment = (from_source = (Cells = [2000 2008 … 2064 2070; 2174 2182 … 2238 2244],),))), JutulStorage{@NamedTuple{N::Int64, helper_mode::Bool, target::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, source::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, target_entities::Vector{Int64}, offdiagonal_alignment::@NamedTuple{from_source::@NamedTuple{Cells::Matrix{Int64}}}}}((N = 1, helper_mode = false, target = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(0.06357915929773789,9.343401568868082,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);;], [1, 2], [10], [2391; 2551; … ; 3991; 4151;;], nothing, 10, 10, Jutul.TrivialGlobalMap()),), source = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.06357915929773789,-9.343401568868082,-0.0);;], [1, 2], [1], [4165; 4168;;], nothing, 10, 1, Jutul.TrivialGlobalMap()),), target_entities = [10], offdiagonal_alignment = (from_source = (Cells = [4165; 4168;;],),))), JutulStorage{@NamedTuple{N::Int64, helper_mode::Bool, target::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, source::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, target_entities::Vector{Int64}, offdiagonal_alignment::@NamedTuple{from_source::@NamedTuple{Cells::Matrix{Int64}}}}}((N = 1, helper_mode = false, target = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(-0.06357915929773789,9.343401568868082,0.0);;], [1, 2], [1], [4166; 4169;;], [1], 1, 1, Jutul.TrivialGlobalMap()),), source = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-0.06357915929773789,-9.343401568868082,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0);;], [1, 2], [10], [2403; 2563; … ; 4003; 4163;;], nothing, 1, 10, Jutul.TrivialGlobalMap()),), target_entities = [1], offdiagonal_alignment = (from_source = (Cells = [2403; 2563; … ; 4003; 4163;;],),))), JutulStorage{@NamedTuple{N::Int64, helper_mode::Bool, target::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, source::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, target_entities::Vector{Int64}, offdiagonal_alignment::@NamedTuple{from_source::@NamedTuple{Cells::Matrix{Int64}}}}}((N = 1, helper_mode = false, target = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.0,0.0,0.0);;], [1, 2], [1], [4167; 4170;;], [1], 1, 1, Jutul.TrivialGlobalMap()),), source = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0);;], [1, 2], [10], [2404; 2564; … ; 4004; 4164;;], nothing, 1, 10, Jutul.TrivialGlobalMap()),), target_entities = [1], offdiagonal_alignment = (from_source = (Cells = [2404; 2564; … ; 4004; 4164;;],),)))], LinearizedSystem = LinearizedSystem{EquationMajorLayout, SparseArrays.SparseMatrixCSC{Float64, Int64}, Vector{Float64}, Vector{Float64}, Vector{Float64}}(sparse([1, 2, 11, 21, 31, 41, 51, 61, 71, 81  …  276, 286, 287, 288, 176, 287, 288, 176, 287, 288], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1  …  286, 286, 286, 286, 287, 287, 287, 288, 288, 288], [450421.36983190634, -150140.4143463419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0  …  -3.612831551628262e-19, -1.147927298728712e-18, -0.0, -0.0, -9.343401568868082, 9.343401568968082, 0.0, -0.0, 0.0, 1.0], 288, 288), [2.765458366645046e-9, 2.7863353291301962e-9, 2.8282648540864375e-9, 2.8916178132498693e-9, 2.977229315512253e-9, 3.086004624584804e-9, 3.219232405822503e-9, 3.3780951525647085e-9, 3.563921535491843e-9, 3.779754377541966e-9  …  2.582094276439967e-30, -3.0499026599316267e-30, -2.443619913438525e-30, -1.8057519158574723e-30, -2.588449845256445e-30, 1.9220299362498517e-30, 1.5613995541633418e-30, -1.1529579612074187e-30, -1.0547118733938987e-15, 0.0], [-1.7938292191854823e-20, -1.0749579247864948e-13, -3.1597565206034837e-13, -6.124416620178496e-13, -9.774324374300826e-13, -1.3849482802854477e-12, -1.8024382349192433e-12, -2.1907294389337475e-12, -2.5040897192166665e-12, -2.6903185339930464e-12  …  -1.4026413676881687e-6, -1.62033437984e-6, -1.777599944062003e-6, -2.1096783661161646e-6, -5.698560658476326e-7, -3.451856414903195e-7, -3.843363206968431e-7, -4.021158419828603e-7, 5.0900074757814885e-5, -0.0], [450421.36983190634, -150140.4143463419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0  …  -3.612831551628262e-19, -1.147927298728712e-18, -0.0, -0.0, -9.343401568868082, 9.343401568968082, 0.0, -0.0, 0.0, 1.0], [2.765458366645046e-9, 2.7863353291301962e-9, 2.8282648540864375e-9, 2.8916178132498693e-9, 2.977229315512253e-9, 3.086004624584804e-9, 3.219232405822503e-9, 3.3780951525647085e-9, 3.563921535491843e-9, 3.779754377541966e-9  …  2.582094276439967e-30, -3.0499026599316267e-30, -2.443619913438525e-30, -1.8057519158574723e-30, -2.588449845256445e-30, 1.9220299362498517e-30, 1.5613995541633418e-30, -1.1529579612074187e-30, -1.0547118733938987e-15, 0.0], [-1.7938292191854823e-20, -1.0749579247864948e-13, -3.1597565206034837e-13, -6.124416620178496e-13, -9.774324374300826e-13, -1.3849482802854477e-12, -1.8024382349192433e-12, -2.1907294389337475e-12, -2.5040897192166665e-12, -2.6903185339930464e-12  …  -1.4026413676881687e-6, -1.62033437984e-6, -1.777599944062003e-6, -2.1096783661161646e-6, -5.698560658476326e-7, -3.451856414903195e-7, -3.843363206968431e-7, -4.021158419828603e-7, 5.0900074757814885e-5, -0.0], EquationMajorLayout(false)), multi_model_maps = (offset_map = [0, 120, 166, 286],), eq_maps = Jutul.MutableWrapper((mass_ind = [15, 31, 47, 63, 79, 95, 111, 127, 143, 158  …  4006, 4021, 4037, 4053, 4069, 4085, 4101, 4117, 4133, 4149], charge_ind = [14, 30, 46, 62, 78, 94, 110, 126, 142, 157  …  4005, 4020, 4036, 4052, 4068, 4084, 4100, 4116, 4132, 4148], mass_cons_map = [144, 145, 146, 147, 148, 149, 150, 151, 152, 153  …  157, 158, 159, 160, 161, 162, 163, 164, 165, 166], charge_cons_map = [121, 122, 123, 124, 125, 126, 127, 128, 129, 130  …  134, 135, 136, 137, 138, 139, 140, 141, 142, 143])), recorder = ProgressRecorder(Jutul.SolveRecorder(139, 300, 0, 6698.4375, 0, 50.0), Jutul.SolveRecorder(2, 4, 0, NaN, 0, 50.0)))))), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    [&quot;NegativeElectrode&quot;, &quot;ActiveMaterial&quot;, &quot;StoichiometricCoefficientAtSOC100&quot;] =&gt; (v0 = 0.51873811, vmin = 0.0, vmax = 1.0)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    [&quot;PositiveElectrode&quot;, &quot;ActiveMaterial&quot;, &quot;StoichiometricCoefficientAtSOC100&quot;] =&gt; (v0 = 0.14778, vmin = 0.0, vmax = 1.0)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, missing, missing)</span></span></code></pre></div><p>&quot;StoichiometricCoefficientAtSOC0&quot; at both electrodes</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">free_calibration_parameter!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc05,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;NegativeElectrode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ActiveMaterial&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;StoichiometricCoefficientAtSOC0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	lower_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, upper_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">free_calibration_parameter!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc05,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PositiveElectrode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ActiveMaterial&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;StoichiometricCoefficientAtSOC0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	lower_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, upper_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">VoltageCalibration([357.76627218934914, 715.9763313609469, 1074.1863905325445, 1432.396449704142, 1790.6065088757396, 2148.816568047337, 2507.0266272189347, 2877.5887573964496, 3223.44674556213, 3594.0088757396447, 3952.2189349112427, 4310.42899408284, 4668.639053254437, 5026.8491124260345, 5385.059171597633, 5743.2692307692305, 6101.479289940828, 6472.041420118343, 6817.899408284024, 7188.461538461537], [3.2943262673632967, 3.2638600156322126, 3.2518999695748874, 3.2446281622882482, 3.246486083133996, 3.245753135185418, 3.246253934281757, 3.2472569925301102, 3.2356583102522136, 3.2351808720466657, 3.2359284205519883, 3.237169467875278, 3.227800290612279, 3.2273140920726844, 3.2184384136276525, 3.217458716270091, 3.1992065602836877, 3.177878797019038, 2.8807910485472883, 2.179051790010771], Simulation(true, LithiumIonBattery(&quot;Setup object for a P2D lithium-ion model&quot;, {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;ButlerVolmer&quot; =&gt; &quot;Standard&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;RampUp&quot; =&gt; &quot;Sinusoidal&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Metadata&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Description&quot; =&gt; &quot;Default model settings for a P2D simulation including a current ramp up, excluding current collectors and SEI effects.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Title&quot; =&gt; &quot;P2D&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;PotentialFlowDiscretization&quot; =&gt; &quot;GeneralAD&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;TransportInSolid&quot; =&gt; &quot;FullDiffusion&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;ModelFramework&quot; =&gt; &quot;P2D&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, true, MultiModel{:IntercalationBattery, JutulStorage{Nothing}, Vector{Jutul.CrossTermPair}, Nothing, DefaultContext, Dict{Symbol, Int64}}(JutulStorage{Nothing}(OrderedCollections.OrderedDict{Symbol, Any}(:NeAm =&gt; SimulationModel{DiscretizedDomain{DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}, @NamedTuple{flow::PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}}, Dict{JutulEntity, Int64}, Jutul.TrivialGlobalMap}, ActiveMaterial{nothing, BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}, JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Int64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_graphite_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}, Dict{Any, Any}}, FullyImplicitFormulation, DefaultContext}(DiscretizedDomain with DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19]), Jutul.IndirectionMap{Int64}([2, 13, 35, 24, 3, 14, 36, 25, 4, 15, 37, 26, 5, 16, 38, 27, 6, 17, 39, 28, 7, 18, 40, 29, 8, 19, 41, 30, 9, 20, 42, 31, 10, 21, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([2, 3, 4, 23, 24, 5, 6, 25, 26, 7, 8, 27, 28, 9, 10, 29, 30, 11, 12, 31, 32, 13, 14, 33, 34, 15, 16, 35, 36, 17, 18, 37, 38, 19, 20, 39, 40, 1, 21, 22, 41, 42], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 43]), Jutul.IndirectionMap{Int64}([11, 22, 44, 33, 23, 34, 12, 1, 1, 2, 24, 23, 34, 35, 13, 12, 2, 3, 25, 24, 35, 36, 14, 13, 3, 4, 26, 25, 36, 37, 15, 14, 4, 5, 27, 26, 37, 38, 16, 15, 5, 6, 28, 27, 38, 39, 17, 16, 6, 7, 29, 28, 39, 40, 18, 17, 7, 8, 30, 29, 40, 41, 19, 18, 8, 9, 31, 30, 41, 42, 20, 19, 9, 10, 32, 31, 42, 43, 21, 20, 10, 11, 33, 32, 43, 44, 22, 21, 1, 12, 13, 2, 24, 35, 34, 23, 2, 13, 14, 3, 25, 36, 35, 24, 3, 14, 15, 4, 26, 37, 36, 25, 4, 15, 16, 5, 27, 38, 37, 26, 5, 16, 17, 6, 28, 39, 38, 27, 6, 17, 18, 7, 29, 40, 39, 28, 7, 18, 19, 8, 30, 41, 40, 29, 8, 19, 20, 9, 31, 42, 41, 30, 9, 20, 21, 10, 32, 43, 42, 31, 10, 21, 22, 11, 33, 44, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169]), [10, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]), StaticArraysCore.SVector{3, Float64}[[0.0, 0.0, 0.0], [5.899999999999999e-6, 0.0, 0.0], [1.1799999999999999e-5, 0.0, 0.0], [1.7699999999999997e-5, 0.0, 0.0], [2.3599999999999998e-5, 0.0, 0.0], [2.95e-5, 0.0, 0.0], [3.54e-5, 0.0, 0.0], [4.13e-5, 0.0, 0.0], [4.72e-5, 0.0, 0.0], [5.31e-5, 0.0, 0.0], [5.9000000000000004e-5, 0.0, 0.0], [0.0, 0.007035, 0.0], [5.899999999999999e-6, 0.007035, 0.0], [1.1799999999999999e-5, 0.007035, 0.0], [1.7699999999999997e-5, 0.007035, 0.0], [2.3599999999999998e-5, 0.007035, 0.0], [2.95e-5, 0.007035, 0.0], [3.54e-5, 0.007035, 0.0], [4.13e-5, 0.007035, 0.0], [4.72e-5, 0.007035, 0.0], [5.31e-5, 0.007035, 0.0], [5.9000000000000004e-5, 0.007035, 0.0], [0.0, 0.0, 1.0], [5.899999999999999e-6, 0.0, 1.0], [1.1799999999999999e-5, 0.0, 1.0], [1.7699999999999997e-5, 0.0, 1.0], [2.3599999999999998e-5, 0.0, 1.0], [2.95e-5, 0.0, 1.0], [3.54e-5, 0.0, 1.0], [4.13e-5, 0.0, 1.0], [4.72e-5, 0.0, 1.0], [5.31e-5, 0.0, 1.0], [5.9000000000000004e-5, 0.0, 1.0], [0.0, 0.007035, 1.0], [5.899999999999999e-6, 0.007035, 1.0], [1.1799999999999999e-5, 0.007035, 1.0], [1.7699999999999997e-5, 0.007035, 1.0], [2.3599999999999998e-5, 0.007035, 1.0], [2.95e-5, 0.007035, 1.0], [3.54e-5, 0.007035, 1.0], [4.13e-5, 0.007035, 1.0], [4.72e-5, 0.007035, 1.0], [5.31e-5, 0.007035, 1.0], [5.9000000000000004e-5, 0.007035, 1.0]], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 42)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 18)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 10)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 9)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 42</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 18</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 9</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryDirichletFaces() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 3 4 5 6 7 8 9; 2 3 4 5 6 7 8 9 10], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0], Faces()), :face_centroids =&gt; ([5.8999999999999986e-6 1.1799999999999997e-5 1.7699999999999997e-5 2.3599999999999994e-5 2.95e-5 3.54e-5 4.13e-5 4.7199999999999995e-5 5.3099999999999996e-5; 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175; 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5], Faces()), :cell_centroids =&gt; ([2.9499999999999993e-6 8.849999999999998e-6 1.475e-5 2.0649999999999997e-5 2.6549999999999988e-5 3.2449999999999996e-5 3.834999999999999e-5 4.425000000000001e-5 5.014999999999999e-5 5.605000000000001e-5; 0.003517499999999998 0.0035174999999999985 0.003517499999999998 0.0035174999999999985 0.0035174999999999976 0.0035175 0.0035174999999999994 0.0035174999999999994 0.0035174999999999985 0.0035175; 0.5 0.5 0.49999999999999983 0.5 0.49999999999999983 0.5 0.5 0.5 0.5 0.5], Cells()), :volumes =&gt; ([4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999998e-6, 5.899999999999998e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.150649999999998e-8, 4.150649999999998e-8, 4.150650000000001e-8, 4.150650000000001e-8, 4.150650000000001e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8], BoundaryFaces()), :boundary_centroids =&gt; ([5.9000000000000004e-5 0.0 2.9499999999999993e-6 2.9499999999999993e-6 8.85e-6 8.85e-6 1.4749999999999996e-5 1.4749999999999996e-5 2.0649999999999997e-5 2.0649999999999997e-5 2.6549999999999995e-5 2.6549999999999995e-5 3.245e-5 3.245e-5 3.835e-5 3.835e-5 4.425e-5 4.425e-5 5.015e-5 5.015e-5 5.605000000000001e-5 5.605000000000001e-5 2.9499999999999997e-6 2.9499999999999997e-6 8.849999999999998e-6 8.849999999999998e-6 1.475e-5 1.4749999999999996e-5 2.0649999999999994e-5 2.0649999999999994e-5 2.6549999999999998e-5 2.655e-5 3.245e-5 3.245e-5 3.8350000000000004e-5 3.8350000000000004e-5 4.4250000000000005e-5 4.4250000000000005e-5 5.0150000000000006e-5 5.0150000000000006e-5 5.605000000000001e-5 5.605000000000001e-5; 0.0035175 0.0035175 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0035175 0.0035175 0.0035175 0.0035175 0.0035174999999999994 0.0035174999999999994 0.0035175 0.0035175 0.0035175 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175 0.0035175 0.0035175 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0], BoundaryFaces()), :boundary_normals =&gt; ([1.0 -1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0], BoundaryFaces()), :boundary_neighbors =&gt; ([10, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], BoundaryFaces()), :trans =&gt; ([1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294], Faces()), :halfTrans =&gt; ([2384.745762711865, 2384.7457627118647, 2384.745762711865, 2384.7457627118624, 2384.745762711866, 2384.745762711864, 2384.745762711866, 2384.7457627118692, 2384.7457627118556, 2384.745762711866, 2384.7457627118615, 2384.745762711872, 2384.7457627118556, 2384.7457627118556, 2384.745762711878, 2384.745762711866, 2384.7457627118615, 2384.7457627118556], HalfFaces()), :halftransfaces =&gt; ([2384.745762711865 2384.745762711865 2384.745762711866 2384.745762711866 2384.7457627118556 2384.7457627118615 2384.7457627118556 2384.745762711878 2384.7457627118615; 2384.7457627118647 2384.7457627118624 2384.745762711864 2384.7457627118692 2384.745762711866 2384.745762711872 2384.7457627118556 2384.745762711866 2384.7457627118556], Faces()), :bcTrans =&gt; ([2384.745762711866, 2384.745762711865, 0.0016773276474769021, 0.0016773276474769004, 0.0016773276474769017, 0.0016773276474769004, 0.0016773276474769015, 0.0016773276474769, 0.0016773276474769021, 0.0016773276474769006, 0.0016773276474769028, 0.0016773276474769002, 0.0016773276474769017, 0.001677327647476901, 0.001677327647476902, 0.001677327647476901, 0.001677327647476902, 0.001677327647476901, 0.0016773276474769021, 0.0016773276474769006, 0.0016773276474769017, 0.001677327647476901, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999992e-8, 8.301300000000002e-8, 8.301300000000002e-8, 8.301300000000004e-8, 8.301299999999996e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8], BoundaryFaces()), :bcDirHalfTrans =&gt; ([2384.745762711865], BoundaryDirichletFaces()), :bcDirCells =&gt; ([1], BoundaryDirichletFaces()), :bcDirInds =&gt; ([1], BoundaryDirichletFaces()), :volumeFraction =&gt; ([0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001], Cells()))) and discretizations for flow</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">, ActiveMaterial{nothing, BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}, JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Int64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_graphite_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}, Dict{Any, Any}}(JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Int64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_graphite_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}((volume_fraction = 0.7000000000000001, volume_fractions = [1.0, 0.0, 0.0], effective_density = 1862, n_charge_carriers = 1, maximum_concentration = 31540, volumetric_surface_area = 142373, theta0 = 0.001, theta100 = 0.51873811, activation_energy_of_reaction = 4000, setting_temperature_dependence = nothing, setting_butler_volmer = &quot;Standard&quot;, ecd_funcconstant = true, reaction_rate_constant_func = 1.764e-11, ocp_func = BattMo.open_circuit_potential_graphite_Xu_2015, diff_funcconstant = true, diff_func = 3.9e-14)), BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}((N = 10, rp = 1.475e-5, hT = [0.0, 3.707079331235956e-5, 0.00014828317324943824, 0.00033363713981123596, 0.0005931326929977529, 0.000926769832808989, 0.0013345485592449438, 0.001816468872305618, 0.0023725307719910118, 0.003002734258301124, 0.003707079331235956], D = 3.9e-14, div = [(1, 1, 1), (2, 1, -1), (2, 2, 1), (3, 2, -1), (3, 3, 1), (4, 3, -1), (4, 4, 1), (5, 4, -1), (5, 5, 1), (6, 5, -1), (6, 6, 1), (7, 6, -1), (7, 7, 1), (8, 7, -1), (8, 8, 1), (9, 8, -1), (9, 9, 1), (10, 9, -1)], vols = [1.3442024116700374e-17, 9.409416881690261e-17, 2.5539845821730693e-16, 4.973548923179139e-16, 8.19963471118723e-16, 1.2232241946197326e-15, 1.7071370628209474e-15, 2.2717020757223645e-15, 2.9169192333239812e-15, 3.642788535625803e-15])), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), DefaultContext(EquationMajorLayout(false), 9223372036854775807, 1), FullyImplicitFormulation(), DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19]), Jutul.IndirectionMap{Int64}([2, 13, 35, 24, 3, 14, 36, 25, 4, 15  …  41, 30, 9, 20, 42, 31, 10, 21, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([2, 3, 4, 23, 24, 5, 6, 25, 26, 7  …  38, 19, 20, 39, 40, 1, 21, 22, 41, 42], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 43]), Jutul.IndirectionMap{Int64}([11, 22, 44, 33, 23, 34, 12, 1, 1, 2  …  42, 31, 10, 21, 22, 11, 33, 44, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37  …  133, 137, 141, 145, 149, 153, 157, 161, 165, 169]), [10, 1, 1, 1, 2, 2, 3, 3, 4, 4  …  6, 6, 7, 7, 8, 8, 9, 9, 10, 10]), StaticArraysCore.SVector{3, Float64}[[0.0, 0.0, 0.0], [5.899999999999999e-6, 0.0, 0.0], [1.1799999999999999e-5, 0.0, 0.0], [1.7699999999999997e-5, 0.0, 0.0], [2.3599999999999998e-5, 0.0, 0.0], [2.95e-5, 0.0, 0.0], [3.54e-5, 0.0, 0.0], [4.13e-5, 0.0, 0.0], [4.72e-5, 0.0, 0.0], [5.31e-5, 0.0, 0.0]  …  [5.899999999999999e-6, 0.007035, 1.0], [1.1799999999999999e-5, 0.007035, 1.0], [1.7699999999999997e-5, 0.007035, 1.0], [2.3599999999999998e-5, 0.007035, 1.0], [2.95e-5, 0.007035, 1.0], [3.54e-5, 0.007035, 1.0], [4.13e-5, 0.007035, 1.0], [4.72e-5, 0.007035, 1.0], [5.31e-5, 0.007035, 1.0], [5.9000000000000004e-5, 0.007035, 1.0]], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, -1  …  -33, -34, -35, -36, -37, -38, -39, -40, -41, -42], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 42)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 18)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 10)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 9)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 42</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 18</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 9</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryDirichletFaces() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 … 8 9; 2 3 … 9 10], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 … 1.0 1.0; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0], Faces()), :face_centroids =&gt; ([5.8999999999999986e-6 1.1799999999999997e-5 … 4.7199999999999995e-5 5.3099999999999996e-5; 0.0035175 0.0035175 … 0.0035175 0.0035175; 0.5 0.5 … 0.5 0.5], Faces()), :cell_centroids =&gt; ([2.9499999999999993e-6 8.849999999999998e-6 … 5.014999999999999e-5 5.605000000000001e-5; 0.003517499999999998 0.0035174999999999985 … 0.0035174999999999985 0.0035175; 0.5 0.5 … 0.5 0.5], Cells()), :volumes =&gt; ([4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999998e-6, 5.899999999999998e-6, 5.900000000000001e-6, 5.900000000000001e-6  …  4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8], BoundaryFaces()), :boundary_centroids =&gt; ([5.9000000000000004e-5 0.0 … 5.605000000000001e-5 5.605000000000001e-5; 0.0035175 0.0035175 … 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 … 0.0 1.0], BoundaryFaces())…)), OrderedCollections.OrderedDict{Symbol, Any}(:Voltage =&gt; Voltage(), :ParticleConcentration =&gt; BattMo.ParticleConcentration(), :SurfaceConcentration =&gt; BattMo.SurfaceConcentration()), OrderedCollections.OrderedDict{Symbol, Any}(:Charge =&gt; Charge(), :OpenCircuitPotential =&gt; BattMo.OpenCircuitPotential(), :ReactionRateConstant =&gt; BattMo.ReactionRateConstant(), :SolidDiffFlux =&gt; BattMo.SolidDiffFlux(), :DiffusionCoefficient =&gt; BattMo.DiffusionCoefficient()), OrderedCollections.OrderedDict{Symbol, Any}(:ECTransmissibilities =&gt; BattMo.ECTransmissibilities(), :Volume =&gt; BattMo.Volume(), :Temperature =&gt; Temperature(), :Conductivity =&gt; BattMo.Conductivity(), :VolumeFraction =&gt; BattMo.VolumeFraction(), :BoundaryVoltage =&gt; BoundaryPotential{:Voltage}()), OrderedCollections.OrderedDict{Symbol, Any}(:charge_conservation =&gt; ConservationLaw{:Charge, PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}, Jutul.DefaultFlux, 1}(PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}(TPFA{Int64}[TPFA{Int64}(1, 2, 1), TPFA{Int64}(2, 3, 1), TPFA{Int64}(3, 4, 1), TPFA{Int64}(4, 5, 1), TPFA{Int64}(5, 6, 1), TPFA{Int64}(6, 7, 1), TPFA{Int64}(7, 8, 1), TPFA{Int64}(8, 9, 1), TPFA{Int64}(9, 10, 1)], SPU{Int64}[SPU{Int64}(1, 2), SPU{Int64}(2, 3), SPU{Int64}(3, 4), SPU{Int64}(4, 5), SPU{Int64}(5, 6), SPU{Int64}(6, 7), SPU{Int64}(7, 8), SPU{Int64}(8, 9), SPU{Int64}(9, 10)], (cells = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9], faces = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], face_pos = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19], face_sign = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1])), Jutul.DefaultFlux()), :mass_conservation =&gt; SolidMassCons(), :solid_diffusion_bc =&gt; BattMo.SolidDiffusionBc()), [:Voltage, :ParticleConcentration, :SurfaceConcentration, :Charge, :OpenCircuitPotential, :Temperature, :ReactionRateConstant, :DiffusionCoefficient], OrderedCollections.OrderedDict{Symbol, Any}()), :Elyte =&gt; SimulationModel{DiscretizedDomain{DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}, @NamedTuple{flow::PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}}, Dict{JutulEntity, Int64}, Jutul.TrivialGlobalMap}, Electrolyte{Dict{Any, Any}}, FullyImplicitFormulation, DefaultContext}(DiscretizedDomain with DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 45]), Jutul.IndirectionMap{Int64}([2, 26, 74, 50, 3, 27, 75, 51, 4, 28, 76, 52, 5, 29, 77, 53, 6, 30, 78, 54, 7, 31, 79, 55, 8, 32, 80, 56, 9, 33, 81, 57, 10, 34, 82, 58, 11, 35, 83, 59, 12, 36, 84, 60, 13, 37, 85, 61, 14, 38, 86, 62, 15, 39, 87, 63, 16, 40, 88, 64, 17, 41, 89, 65, 18, 42, 90, 66, 19, 43, 91, 67, 20, 44, 92, 68, 21, 45, 93, 69, 22, 46, 94, 70, 23, 47, 95, 71], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([1, 3, 4, 49, 50, 5, 6, 51, 52, 7, 8, 53, 54, 9, 10, 55, 56, 11, 12, 57, 58, 13, 14, 59, 60, 15, 16, 61, 62, 17, 18, 63, 64, 19, 20, 65, 66, 21, 22, 67, 68, 23, 24, 69, 70, 25, 26, 71, 72, 27, 28, 73, 74, 29, 30, 75, 76, 31, 32, 77, 78, 33, 34, 79, 80, 35, 36, 81, 82, 37, 38, 83, 84, 39, 40, 85, 86, 41, 42, 87, 88, 43, 44, 89, 90, 45, 46, 91, 92, 2, 47, 48, 93, 94], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 95]), Jutul.IndirectionMap{Int64}([49, 73, 25, 1, 24, 48, 96, 72, 1, 2, 50, 49, 73, 74, 26, 25, 2, 3, 51, 50, 74, 75, 27, 26, 3, 4, 52, 51, 75, 76, 28, 27, 4, 5, 53, 52, 76, 77, 29, 28, 5, 6, 54, 53, 77, 78, 30, 29, 6, 7, 55, 54, 78, 79, 31, 30, 7, 8, 56, 55, 79, 80, 32, 31, 8, 9, 57, 56, 80, 81, 33, 32, 9, 10, 58, 57, 81, 82, 34, 33, 10, 11, 59, 58, 82, 83, 35, 34, 11, 12, 60, 59, 83, 84, 36, 35, 12, 13, 61, 60, 84, 85, 37, 36, 13, 14, 62, 61, 85, 86, 38, 37, 14, 15, 63, 62, 86, 87, 39, 38, 15, 16, 64, 63, 87, 88, 40, 39, 16, 17, 65, 64, 88, 89, 41, 40, 17, 18, 66, 65, 89, 90, 42, 41, 18, 19, 67, 66, 90, 91, 43, 42, 19, 20, 68, 67, 91, 92, 44, 43, 20, 21, 69, 68, 92, 93, 45, 44, 21, 22, 70, 69, 93, 94, 46, 45, 22, 23, 71, 70, 94, 95, 47, 46, 23, 24, 72, 71, 95, 96, 48, 47, 1, 25, 26, 2, 50, 74, 73, 49, 2, 26, 27, 3, 51, 75, 74, 50, 3, 27, 28, 4, 52, 76, 75, 51, 4, 28, 29, 5, 53, 77, 76, 52, 5, 29, 30, 6, 54, 78, 77, 53, 6, 30, 31, 7, 55, 79, 78, 54, 7, 31, 32, 8, 56, 80, 79, 55, 8, 32, 33, 9, 57, 81, 80, 56, 9, 33, 34, 10, 58, 82, 81, 57, 10, 34, 35, 11, 59, 83, 82, 58, 11, 35, 36, 12, 60, 84, 83, 59, 12, 36, 37, 13, 61, 85, 84, 60, 13, 37, 38, 14, 62, 86, 85, 61, 14, 38, 39, 15, 63, 87, 86, 62, 15, 39, 40, 16, 64, 88, 87, 63, 16, 40, 41, 17, 65, 89, 88, 64, 17, 41, 42, 18, 66, 90, 89, 65, 18, 42, 43, 19, 67, 91, 90, 66, 19, 43, 44, 20, 68, 92, 91, 67, 20, 44, 45, 21, 69, 93, 92, 68, 21, 45, 46, 22, 70, 94, 93, 69, 22, 46, 47, 23, 71, 95, 94, 70, 23, 47, 48, 24, 72, 96, 95, 71], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177, 181, 185, 189, 193, 197, 201, 205, 209, 213, 217, 221, 225, 229, 233, 237, 241, 245, 249, 253, 257, 261, 265, 269, 273, 277, 281, 285, 289, 293, 297, 301, 305, 309, 313, 317, 321, 325, 329, 333, 337, 341, 345, 349, 353, 357, 361, 365, 369, 373, 377]), [1, 23, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23]), StaticArraysCore.SVector{3, Float64}[[0.0, 0.0, 0.0], [5.899999999999999e-6, 0.0, 0.0], [1.1799999999999999e-5, 0.0, 0.0], [1.7699999999999997e-5, 0.0, 0.0], [2.3599999999999998e-5, 0.0, 0.0], [2.95e-5, 0.0, 0.0], [3.54e-5, 0.0, 0.0], [4.13e-5, 0.0, 0.0], [4.72e-5, 0.0, 0.0], [5.31e-5, 0.0, 0.0], [5.9000000000000004e-5, 0.0, 0.0], [6.566666666666667e-5, 0.0, 0.0], [7.233333333333333e-5, 0.0, 0.0], [7.9e-5, 0.0, 0.0], [8.82e-5, 0.0, 0.0], [9.740000000000001e-5, 0.0, 0.0], [0.00010660000000000002, 0.0, 0.0], [0.00011580000000000002, 0.0, 0.0], [0.00012500000000000003, 0.0, 0.0], [0.00013420000000000004, 0.0, 0.0], [0.00014340000000000004, 0.0, 0.0], [0.00015260000000000005, 0.0, 0.0], [0.00016180000000000006, 0.0, 0.0], [0.00017100000000000006, 0.0, 0.0], [0.0, 0.007035, 0.0], [5.899999999999999e-6, 0.007035, 0.0], [1.1799999999999999e-5, 0.007035, 0.0], [1.7699999999999997e-5, 0.007035, 0.0], [2.3599999999999998e-5, 0.007035, 0.0], [2.95e-5, 0.007035, 0.0], [3.54e-5, 0.007035, 0.0], [4.13e-5, 0.007035, 0.0], [4.72e-5, 0.007035, 0.0], [5.31e-5, 0.007035, 0.0], [5.9000000000000004e-5, 0.007035, 0.0], [6.566666666666667e-5, 0.007035, 0.0], [7.233333333333333e-5, 0.007035, 0.0], [7.9e-5, 0.007035, 0.0], [8.82e-5, 0.007035, 0.0], [9.740000000000001e-5, 0.007035, 0.0], [0.00010660000000000002, 0.007035, 0.0], [0.00011580000000000002, 0.007035, 0.0], [0.00012500000000000003, 0.007035, 0.0], [0.00013420000000000004, 0.007035, 0.0], [0.00014340000000000004, 0.007035, 0.0], [0.00015260000000000005, 0.007035, 0.0], [0.00016180000000000006, 0.007035, 0.0], [0.00017100000000000006, 0.007035, 0.0], [0.0, 0.0, 1.0], [5.899999999999999e-6, 0.0, 1.0], [1.1799999999999999e-5, 0.0, 1.0], [1.7699999999999997e-5, 0.0, 1.0], [2.3599999999999998e-5, 0.0, 1.0], [2.95e-5, 0.0, 1.0], [3.54e-5, 0.0, 1.0], [4.13e-5, 0.0, 1.0], [4.72e-5, 0.0, 1.0], [5.31e-5, 0.0, 1.0], [5.9000000000000004e-5, 0.0, 1.0], [6.566666666666667e-5, 0.0, 1.0], [7.233333333333333e-5, 0.0, 1.0], [7.9e-5, 0.0, 1.0], [8.82e-5, 0.0, 1.0], [9.740000000000001e-5, 0.0, 1.0], [0.00010660000000000002, 0.0, 1.0], [0.00011580000000000002, 0.0, 1.0], [0.00012500000000000003, 0.0, 1.0], [0.00013420000000000004, 0.0, 1.0], [0.00014340000000000004, 0.0, 1.0], [0.00015260000000000005, 0.0, 1.0], [0.00016180000000000006, 0.0, 1.0], [0.00017100000000000006, 0.0, 1.0], [0.0, 0.007035, 1.0], [5.899999999999999e-6, 0.007035, 1.0], [1.1799999999999999e-5, 0.007035, 1.0], [1.7699999999999997e-5, 0.007035, 1.0], [2.3599999999999998e-5, 0.007035, 1.0], [2.95e-5, 0.007035, 1.0], [3.54e-5, 0.007035, 1.0], [4.13e-5, 0.007035, 1.0], [4.72e-5, 0.007035, 1.0], [5.31e-5, 0.007035, 1.0], [5.9000000000000004e-5, 0.007035, 1.0], [6.566666666666667e-5, 0.007035, 1.0], [7.233333333333333e-5, 0.007035, 1.0], [7.9e-5, 0.007035, 1.0], [8.82e-5, 0.007035, 1.0], [9.740000000000001e-5, 0.007035, 1.0], [0.00010660000000000002, 0.007035, 1.0], [0.00011580000000000002, 0.007035, 1.0], [0.00012500000000000003, 0.007035, 1.0], [0.00013420000000000004, 0.007035, 1.0], [0.00014340000000000004, 0.007035, 1.0], [0.00015260000000000005, 0.007035, 1.0], [0.00016180000000000006, 0.007035, 1.0], [0.00017100000000000006, 0.007035, 1.0]], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 94)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 44)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 23)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 22)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 94</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 44</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 23</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 22</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22; 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0], Faces()), :face_centroids =&gt; ([5.8999999999999986e-6 1.1799999999999997e-5 1.7699999999999997e-5 2.3599999999999994e-5 2.95e-5 3.54e-5 4.13e-5 4.7199999999999995e-5 5.3099999999999996e-5 5.9000000000000004e-5 6.566666666666667e-5 7.233333333333333e-5 7.9e-5 8.82e-5 9.740000000000001e-5 0.0001066 0.00011580000000000002 0.00012500000000000003 0.00013420000000000004 0.00014340000000000004 0.00015260000000000005 0.00016180000000000008; 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175; 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5], Faces()), :cell_centroids =&gt; ([2.9499999999999993e-6 8.849999999999998e-6 1.475e-5 2.0649999999999997e-5 2.6549999999999988e-5 3.2449999999999996e-5 3.834999999999999e-5 4.425000000000001e-5 5.014999999999999e-5 5.605000000000001e-5 6.233333333333334e-5 6.900000000000004e-5 7.566666666666664e-5 8.360000000000001e-5 9.280000000000005e-5 0.000102 0.0001112 0.00012040000000000008 0.00012960000000000006 0.00013880000000000007 0.0001480000000000001 0.0001572000000000001 0.00016640000000000006; 0.003517499999999998 0.0035174999999999985 0.003517499999999998 0.0035174999999999985 0.0035174999999999976 0.0035175 0.0035174999999999994 0.0035174999999999994 0.0035174999999999985 0.0035175 0.0035175000000000007 0.0035175000000000007 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175 0.003517500000000001 0.0035174999999999994 0.0035175000000000002 0.0035174999999999994 0.0035175 0.0035175000000000002 0.0035175; 0.5 0.5 0.49999999999999983 0.5 0.49999999999999983 0.5 0.5 0.5 0.5 0.5 0.5 0.49999999999999994 0.5 0.5000000000000001 0.5000000000000002 0.5 0.5000000000000002 0.5000000000000001 0.5000000000000003 0.5 0.5 0.5 0.5], Cells()), :volumes =&gt; ([4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8, 4.6900000000000016e-8, 4.6899999999999977e-8, 4.6899999999999924e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999998e-6, 5.899999999999998e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 6.666666666666668e-6, 6.666666666666668e-6, 6.6666666666666616e-6, 6.6666666666666616e-6, 6.6666666666666616e-6, 6.6666666666666616e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.150649999999998e-8, 4.150649999999998e-8, 4.150650000000001e-8, 4.150650000000001e-8, 4.150650000000001e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.690000000000001e-8, 4.69e-8, 4.689999999999996e-8, 4.6899999999999963e-8, 4.6899999999999963e-8, 4.6899999999999963e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8], BoundaryFaces()), :boundary_centroids =&gt; ([0.0 0.00017100000000000006 2.9499999999999993e-6 2.9499999999999993e-6 8.85e-6 8.85e-6 1.4749999999999996e-5 1.4749999999999996e-5 2.0649999999999997e-5 2.0649999999999997e-5 2.6549999999999995e-5 2.6549999999999995e-5 3.245e-5 3.245e-5 3.835e-5 3.835e-5 4.425e-5 4.425e-5 5.015e-5 5.015e-5 5.605000000000001e-5 5.605000000000001e-5 6.233333333333332e-5 6.233333333333332e-5 6.9e-5 6.9e-5 7.566666666666667e-5 7.566666666666667e-5 8.36e-5 8.36e-5 9.28e-5 9.28e-5 0.00010200000000000001 0.00010200000000000001 0.0001112 0.0001112 0.00012040000000000003 0.00012040000000000003 0.00012960000000000003 0.00012960000000000003 0.00013880000000000004 0.00013880000000000004 0.00014800000000000005 0.00014800000000000005 0.00015720000000000005 0.00015720000000000005 0.00016640000000000006 0.00016640000000000006 2.9499999999999997e-6 2.9499999999999997e-6 8.849999999999998e-6 8.849999999999998e-6 1.475e-5 1.4749999999999996e-5 2.0649999999999994e-5 2.0649999999999994e-5 2.6549999999999998e-5 2.655e-5 3.245e-5 3.245e-5 3.8350000000000004e-5 3.8350000000000004e-5 4.4250000000000005e-5 4.4250000000000005e-5 5.0150000000000006e-5 5.0150000000000006e-5 5.605000000000001e-5 5.605000000000001e-5 6.233333333333332e-5 6.233333333333334e-5 6.900000000000001e-5 6.9e-5 7.566666666666667e-5 7.566666666666666e-5 8.36e-5 8.36e-5 9.28e-5 9.28e-5 0.00010200000000000001 0.00010200000000000001 0.00011120000000000003 0.00011120000000000002 0.00012040000000000001 0.00012040000000000003 0.00012960000000000003 0.00012960000000000003 0.00013880000000000004 0.00013880000000000007 0.00014800000000000005 0.00014800000000000005 0.00015720000000000003 0.00015720000000000005 0.00016640000000000006 0.00016640000000000006; 0.0035175 0.0035175 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0035175 0.0035175 0.0035175 0.0035175 0.0035174999999999994 0.0035174999999999994 0.0035175 0.0035175 0.0035175 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175 0.0035175 0.0035175 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175 0.0035175 0.0035174999999999994 0.0035175 0.0035175 0.0035175 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.49999999999999994 0.5 0.49999999999999994 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0], BoundaryFaces()), :boundary_normals =&gt; ([-1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0], BoundaryFaces()), :boundary_neighbors =&gt; ([1, 23, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23], BoundaryFaces()), :trans =&gt; ([1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294, 1119.628647214855, 1055.2499999999943, 1055.2500000000093, 886.764705882349, 764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], Faces()), :halfTrans =&gt; ([2384.745762711865, 2384.7457627118647, 2384.745762711865, 2384.7457627118624, 2384.745762711866, 2384.745762711864, 2384.745762711866, 2384.7457627118692, 2384.7457627118556, 2384.745762711866, 2384.7457627118615, 2384.745762711872, 2384.7457627118556, 2384.7457627118556, 2384.745762711878, 2384.745762711866, 2384.7457627118615, 2384.7457627118556, 2384.745762711866, 2110.5000000000014, 2110.499999999997, 2110.4999999999804, 2110.500000000023, 2110.500000000014, 2110.4999999999886, 1529.3478260869508, 1529.34782608696, 1529.3478260869417, 1529.3478260869688, 1529.34782608696, 1529.3478260869554, 1529.3478260869554, 1529.3478260869508, 1529.3478260869372, 1529.3478260869736, 1529.3478260869465, 1529.3478260869642, 1529.3478260869465, 1529.3478260869642, 1529.3478260869372, 1529.3478260869736, 1529.3478260869372, 1529.3478260869642, 1529.3478260869642], HalfFaces()), :halftransfaces =&gt; ([2384.745762711865 2384.745762711865 2384.745762711866 2384.745762711866 2384.7457627118556 2384.7457627118615 2384.7457627118556 2384.745762711878 2384.7457627118615 2384.745762711866 2110.499999999997 2110.500000000023 2110.4999999999886 1529.34782608696 1529.3478260869688 1529.3478260869554 1529.3478260869508 1529.3478260869736 1529.3478260869642 1529.3478260869642 1529.3478260869736 1529.3478260869642; 2384.7457627118647 2384.7457627118624 2384.745762711864 2384.7457627118692 2384.745762711866 2384.745762711872 2384.7457627118556 2384.745762711866 2384.7457627118556 2110.5000000000014 2110.4999999999804 2110.500000000014 1529.3478260869508 1529.3478260869417 1529.34782608696 1529.3478260869554 1529.3478260869372 1529.3478260869465 1529.3478260869465 1529.3478260869372 1529.3478260869372 1529.3478260869642], Faces()), :bcTrans =&gt; ([2384.745762711865, 1529.3478260869554, 0.0016773276474769021, 0.0016773276474769004, 0.0016773276474769017, 0.0016773276474769004, 0.0016773276474769015, 0.0016773276474769, 0.0016773276474769021, 0.0016773276474769006, 0.0016773276474769028, 0.0016773276474769002, 0.0016773276474769017, 0.001677327647476901, 0.001677327647476902, 0.001677327647476901, 0.001677327647476902, 0.001677327647476901, 0.0016773276474769021, 0.0016773276474769006, 0.0016773276474769017, 0.001677327647476901, 0.0018952854773750297, 0.0018952854773750306, 0.0018952854773750276, 0.0018952854773750286, 0.0018952854773750282, 0.0018952854773750286, 0.0026154939587775426, 0.0026154939587775435, 0.0026154939587775426, 0.0026154939587775435, 0.002615493958777543, 0.002615493958777543, 0.0026154939587775417, 0.0026154939587775435, 0.0026154939587775435, 0.0026154939587775426, 0.0026154939587775426, 0.0026154939587775435, 0.0026154939587775435, 0.0026154939587775426, 0.002615493958777543, 0.002615493958777543, 0.0026154939587775426, 0.0026154939587775435, 0.002615493958777543, 0.002615493958777543, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999992e-8, 8.301300000000002e-8, 8.301300000000002e-8, 8.301300000000004e-8, 8.301299999999996e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 9.380000000000002e-8, 9.38e-8, 9.379999999999993e-8, 9.379999999999993e-8, 9.379999999999993e-8, 9.379999999999993e-8, 1.2944400000000006e-7, 1.294440000000001e-7, 1.2944400000000003e-7, 1.2944400000000014e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000003e-7, 1.2944400000000014e-7, 1.2944400000000006e-7, 1.294440000000001e-7, 1.2944399999999998e-7, 1.294440000000002e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7], BoundaryFaces()), :volumeFraction =&gt; ([0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.4, 0.4, 0.4, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28], Cells()), :separator_volume_fraction =&gt; ([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6, 0.6, 0.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], Cells()))) and discretizations for flow</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">, Electrolyte{Dict{Any, Any}}(JutulStorage{Nothing}(OrderedCollections.OrderedDict{Symbol, Any}(:transference =&gt; 0.2594, :charge =&gt; 1, :separator_porosity =&gt; 0.4, :bruggeman =&gt; 1.5, :electrolyte_density =&gt; 1210, :separator_density =&gt; 779, :diffusivity_func =&gt; RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:c, :T), BattMo.var&quot;#_RGF_ModTag&quot;, BattMo.var&quot;#_RGF_ModTag&quot;, (0xee2235f8, 0xd04ba524, 0x244c5077, 0x15da4b3a, 0xf624324c), Expr}(quote</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">    #= none:1 =#</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">    #= none:1 =#</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    return (8.794 * 10 ^ -11 * (c / 1000) ^ 2 - 3.972 * 10 ^ -10 * (c / 1000)) + 4.862 * 10 ^ -10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">end), :conductivity_func =&gt; RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:c, :T), BattMo.var&quot;#_RGF_ModTag&quot;, BattMo.var&quot;#_RGF_ModTag&quot;, (0x6d3933d7, 0x54a514ab, 0x5fe1ef12, 0x21826394, 0xabdf6a37), Expr}(quote</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">    #= none:1 =#</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">    #= none:1 =#</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    return (0.1297 * (c / 1000) ^ 3 - 2.51 * (c / 1000) ^ 1.5) + 3.329 * (c / 1000)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">end))), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), DefaultContext(EquationMajorLayout(false), 9223372036854775807, 1), FullyImplicitFormulation(), DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5  …  18, 18, 19, 19, 20, 20, 21, 21, 22, 22], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18  …  28, 30, 32, 34, 36, 38, 40, 42, 44, 45]), Jutul.IndirectionMap{Int64}([2, 26, 74, 50, 3, 27, 75, 51, 4, 28  …  93, 69, 22, 46, 94, 70, 23, 47, 95, 71], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37  …  53, 57, 61, 65, 69, 73, 77, 81, 85, 89]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11)  …  (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([1, 3, 4, 49, 50, 5, 6, 51, 52, 7  …  90, 45, 46, 91, 92, 2, 47, 48, 93, 94], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38  …  58, 62, 66, 70, 74, 78, 82, 86, 90, 95]), Jutul.IndirectionMap{Int64}([49, 73, 25, 1, 24, 48, 96, 72, 1, 2  …  94, 70, 23, 47, 48, 24, 72, 96, 95, 71], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37  …  341, 345, 349, 353, 357, 361, 365, 369, 373, 377]), [1, 23, 1, 1, 2, 2, 3, 3, 4, 4  …  19, 19, 20, 20, 21, 21, 22, 22, 23, 23]), StaticArraysCore.SVector{3, Float64}[[0.0, 0.0, 0.0], [5.899999999999999e-6, 0.0, 0.0], [1.1799999999999999e-5, 0.0, 0.0], [1.7699999999999997e-5, 0.0, 0.0], [2.3599999999999998e-5, 0.0, 0.0], [2.95e-5, 0.0, 0.0], [3.54e-5, 0.0, 0.0], [4.13e-5, 0.0, 0.0], [4.72e-5, 0.0, 0.0], [5.31e-5, 0.0, 0.0]  …  [8.82e-5, 0.007035, 1.0], [9.740000000000001e-5, 0.007035, 1.0], [0.00010660000000000002, 0.007035, 1.0], [0.00011580000000000002, 0.007035, 1.0], [0.00012500000000000003, 0.007035, 1.0], [0.00013420000000000004, 0.007035, 1.0], [0.00014340000000000004, 0.007035, 1.0], [0.00015260000000000005, 0.007035, 1.0], [0.00016180000000000006, 0.007035, 1.0], [0.00017100000000000006, 0.007035, 1.0]], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10  …  -85, -86, -87, -88, -89, -90, -91, -92, -93, -94], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 94)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 44)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 23)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 22)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 94</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 44</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 23</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 22</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 … 21 22; 2 3 … 22 23], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035  …  0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 … 1.0 1.0; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0], Faces()), :face_centroids =&gt; ([5.8999999999999986e-6 1.1799999999999997e-5 … 0.00015260000000000005 0.00016180000000000008; 0.0035175 0.0035175 … 0.0035175 0.0035175; 0.5 0.5 … 0.5 0.5], Faces()), :cell_centroids =&gt; ([2.9499999999999993e-6 8.849999999999998e-6 … 0.0001572000000000001 0.00016640000000000006; 0.003517499999999998 0.0035174999999999985 … 0.0035175000000000002 0.0035175; 0.5 0.5 … 0.5 0.5], Cells()), :volumes =&gt; ([4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8  …  6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6  …  18, 19, 19, 20, 20, 21, 21, 22, 22, 23], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5  …  18, 18, 19, 19, 20, 20, 21, 21, 22, 22], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999998e-6, 5.899999999999998e-6, 5.900000000000001e-6, 5.900000000000001e-6  …  6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8], BoundaryFaces()), :boundary_centroids =&gt; ([0.0 0.00017100000000000006 … 0.00016640000000000006 0.00016640000000000006; 0.0035175 0.0035175 … 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 … 0.0 1.0], BoundaryFaces())…)), OrderedCollections.OrderedDict{Symbol, Any}(:Voltage =&gt; Voltage(), :Concentration =&gt; Concentration()), OrderedCollections.OrderedDict{Symbol, Any}(:Conductivity =&gt; BattMo.Conductivity(), :Diffusivity =&gt; BattMo.Diffusivity(), :DmuDc =&gt; DmuDc(), :ChemCoef =&gt; ChemCoef(), :Charge =&gt; Charge(), :Mass =&gt; Mass()), OrderedCollections.OrderedDict{Symbol, Any}(:ECTransmissibilities =&gt; BattMo.ECTransmissibilities(), :Volume =&gt; BattMo.Volume(), :Temperature =&gt; Temperature(), :BruggemanCoefficient =&gt; BattMo.BruggemanCoefficient(), :VolumeFraction =&gt; BattMo.VolumeFraction()), OrderedCollections.OrderedDict{Symbol, Any}(:charge_conservation =&gt; ConservationLaw{:Charge, PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}, Jutul.DefaultFlux, 1}(PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}(TPFA{Int64}[TPFA{Int64}(1, 2, 1), TPFA{Int64}(2, 3, 1), TPFA{Int64}(3, 4, 1), TPFA{Int64}(4, 5, 1), TPFA{Int64}(5, 6, 1), TPFA{Int64}(6, 7, 1), TPFA{Int64}(7, 8, 1), TPFA{Int64}(8, 9, 1), TPFA{Int64}(9, 10, 1), TPFA{Int64}(10, 11, 1)  …  TPFA{Int64}(13, 14, 1), TPFA{Int64}(14, 15, 1), TPFA{Int64}(15, 16, 1), TPFA{Int64}(16, 17, 1), TPFA{Int64}(17, 18, 1), TPFA{Int64}(18, 19, 1), TPFA{Int64}(19, 20, 1), TPFA{Int64}(20, 21, 1), TPFA{Int64}(21, 22, 1), TPFA{Int64}(22, 23, 1)], SPU{Int64}[SPU{Int64}(1, 2), SPU{Int64}(2, 3), SPU{Int64}(3, 4), SPU{Int64}(4, 5), SPU{Int64}(5, 6), SPU{Int64}(6, 7), SPU{Int64}(7, 8), SPU{Int64}(8, 9), SPU{Int64}(9, 10), SPU{Int64}(10, 11)  …  SPU{Int64}(13, 14), SPU{Int64}(14, 15), SPU{Int64}(15, 16), SPU{Int64}(16, 17), SPU{Int64}(17, 18), SPU{Int64}(18, 19), SPU{Int64}(19, 20), SPU{Int64}(20, 21), SPU{Int64}(21, 22), SPU{Int64}(22, 23)], (cells = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5  …  19, 18, 20, 19, 21, 20, 22, 21, 23, 22], faces = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5  …  18, 18, 19, 19, 20, 20, 21, 21, 22, 22], face_pos = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18  …  28, 30, 32, 34, 36, 38, 40, 42, 44, 45], face_sign = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1  …  1, -1, 1, -1, 1, -1, 1, -1, 1, -1])), Jutul.DefaultFlux()), :mass_conservation =&gt; ConservationLaw{:Mass, PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}, Jutul.DefaultFlux, 1}(PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}(TPFA{Int64}[TPFA{Int64}(1, 2, 1), TPFA{Int64}(2, 3, 1), TPFA{Int64}(3, 4, 1), TPFA{Int64}(4, 5, 1), TPFA{Int64}(5, 6, 1), TPFA{Int64}(6, 7, 1), TPFA{Int64}(7, 8, 1), TPFA{Int64}(8, 9, 1), TPFA{Int64}(9, 10, 1), TPFA{Int64}(10, 11, 1)  …  TPFA{Int64}(13, 14, 1), TPFA{Int64}(14, 15, 1), TPFA{Int64}(15, 16, 1), TPFA{Int64}(16, 17, 1), TPFA{Int64}(17, 18, 1), TPFA{Int64}(18, 19, 1), TPFA{Int64}(19, 20, 1), TPFA{Int64}(20, 21, 1), TPFA{Int64}(21, 22, 1), TPFA{Int64}(22, 23, 1)], SPU{Int64}[SPU{Int64}(1, 2), SPU{Int64}(2, 3), SPU{Int64}(3, 4), SPU{Int64}(4, 5), SPU{Int64}(5, 6), SPU{Int64}(6, 7), SPU{Int64}(7, 8), SPU{Int64}(8, 9), SPU{Int64}(9, 10), SPU{Int64}(10, 11)  …  SPU{Int64}(13, 14), SPU{Int64}(14, 15), SPU{Int64}(15, 16), SPU{Int64}(16, 17), SPU{Int64}(17, 18), SPU{Int64}(18, 19), SPU{Int64}(19, 20), SPU{Int64}(20, 21), SPU{Int64}(21, 22), SPU{Int64}(22, 23)], (cells = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5  …  19, 18, 20, 19, 21, 20, 22, 21, 23, 22], faces = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5  …  18, 18, 19, 19, 20, 20, 21, 21, 22, 22], face_pos = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18  …  28, 30, 32, 34, 36, 38, 40, 42, 44, 45], face_sign = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1  …  1, -1, 1, -1, 1, -1, 1, -1, 1, -1])), Jutul.DefaultFlux())), [:Voltage, :Concentration, :Charge, :Mass, :Conductivity, :Diffusivity], OrderedCollections.OrderedDict{Symbol, Any}()), :PeAm =&gt; SimulationModel{DiscretizedDomain{DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}, @NamedTuple{flow::PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}}, Dict{JutulEntity, Int64}, Jutul.TrivialGlobalMap}, ActiveMaterial{nothing, BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}, JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Float64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_lfp_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}, Dict{Any, Any}}, FullyImplicitFormulation, DefaultContext}(DiscretizedDomain with DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19]), Jutul.IndirectionMap{Int64}([2, 13, 35, 24, 3, 14, 36, 25, 4, 15, 37, 26, 5, 16, 38, 27, 6, 17, 39, 28, 7, 18, 40, 29, 8, 19, 41, 30, 9, 20, 42, 31, 10, 21, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([1, 3, 4, 23, 24, 5, 6, 25, 26, 7, 8, 27, 28, 9, 10, 29, 30, 11, 12, 31, 32, 13, 14, 33, 34, 15, 16, 35, 36, 17, 18, 37, 38, 19, 20, 39, 40, 2, 21, 22, 41, 42], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 43]), Jutul.IndirectionMap{Int64}([23, 34, 12, 1, 11, 22, 44, 33, 1, 2, 24, 23, 34, 35, 13, 12, 2, 3, 25, 24, 35, 36, 14, 13, 3, 4, 26, 25, 36, 37, 15, 14, 4, 5, 27, 26, 37, 38, 16, 15, 5, 6, 28, 27, 38, 39, 17, 16, 6, 7, 29, 28, 39, 40, 18, 17, 7, 8, 30, 29, 40, 41, 19, 18, 8, 9, 31, 30, 41, 42, 20, 19, 9, 10, 32, 31, 42, 43, 21, 20, 10, 11, 33, 32, 43, 44, 22, 21, 1, 12, 13, 2, 24, 35, 34, 23, 2, 13, 14, 3, 25, 36, 35, 24, 3, 14, 15, 4, 26, 37, 36, 25, 4, 15, 16, 5, 27, 38, 37, 26, 5, 16, 17, 6, 28, 39, 38, 27, 6, 17, 18, 7, 29, 40, 39, 28, 7, 18, 19, 8, 30, 41, 40, 29, 8, 19, 20, 9, 31, 42, 41, 30, 9, 20, 21, 10, 32, 43, 42, 31, 10, 21, 22, 11, 33, 44, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169]), [1, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]), StaticArraysCore.SVector{3, Float64}[[7.9e-5, 0.0, 0.0], [8.82e-5, 0.0, 0.0], [9.740000000000001e-5, 0.0, 0.0], [0.00010660000000000002, 0.0, 0.0], [0.00011580000000000002, 0.0, 0.0], [0.00012500000000000003, 0.0, 0.0], [0.00013420000000000004, 0.0, 0.0], [0.00014340000000000004, 0.0, 0.0], [0.00015260000000000005, 0.0, 0.0], [0.00016180000000000006, 0.0, 0.0], [0.00017100000000000006, 0.0, 0.0], [7.9e-5, 0.007035, 0.0], [8.82e-5, 0.007035, 0.0], [9.740000000000001e-5, 0.007035, 0.0], [0.00010660000000000002, 0.007035, 0.0], [0.00011580000000000002, 0.007035, 0.0], [0.00012500000000000003, 0.007035, 0.0], [0.00013420000000000004, 0.007035, 0.0], [0.00014340000000000004, 0.007035, 0.0], [0.00015260000000000005, 0.007035, 0.0], [0.00016180000000000006, 0.007035, 0.0], [0.00017100000000000006, 0.007035, 0.0], [7.9e-5, 0.0, 1.0], [8.82e-5, 0.0, 1.0], [9.740000000000001e-5, 0.0, 1.0], [0.00010660000000000002, 0.0, 1.0], [0.00011580000000000002, 0.0, 1.0], [0.00012500000000000003, 0.0, 1.0], [0.00013420000000000004, 0.0, 1.0], [0.00014340000000000004, 0.0, 1.0], [0.00015260000000000005, 0.0, 1.0], [0.00016180000000000006, 0.0, 1.0], [0.00017100000000000006, 0.0, 1.0], [7.9e-5, 0.007035, 1.0], [8.82e-5, 0.007035, 1.0], [9.740000000000001e-5, 0.007035, 1.0], [0.00010660000000000002, 0.007035, 1.0], [0.00011580000000000002, 0.007035, 1.0], [0.00012500000000000003, 0.007035, 1.0], [0.00013420000000000004, 0.007035, 1.0], [0.00014340000000000004, 0.007035, 1.0], [0.00015260000000000005, 0.007035, 1.0], [0.00016180000000000006, 0.007035, 1.0], [0.00017100000000000006, 0.007035, 1.0]], nothing, [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 42)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 18)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 10)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 9)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 42</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 18</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 9</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 3 4 5 6 7 8 9; 2 3 4 5 6 7 8 9 10], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0], Faces()), :face_centroids =&gt; ([8.82e-5 9.740000000000001e-5 0.0001066 0.00011580000000000002 0.00012500000000000003 0.00013420000000000004 0.00014340000000000004 0.00015260000000000005 0.00016180000000000008; 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175; 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5], Faces()), :cell_centroids =&gt; ([8.360000000000001e-5 9.280000000000005e-5 0.000102 0.0001112 0.00012040000000000008 0.00012960000000000006 0.00013880000000000007 0.0001480000000000001 0.0001572000000000001 0.00016640000000000006; 0.0035175000000000002 0.0035175000000000002 0.0035175 0.003517500000000001 0.0035174999999999994 0.0035175000000000002 0.0035174999999999994 0.0035175 0.0035175000000000002 0.0035175; 0.5000000000000001 0.5000000000000002 0.5 0.5000000000000002 0.5000000000000001 0.5000000000000003 0.5 0.5 0.5 0.5], Cells()), :volumes =&gt; ([6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8], BoundaryFaces()), :boundary_centroids =&gt; ([7.9e-5 0.00017100000000000006 8.36e-5 8.36e-5 9.28e-5 9.28e-5 0.00010200000000000001 0.00010200000000000001 0.0001112 0.0001112 0.00012040000000000003 0.00012040000000000003 0.00012960000000000003 0.00012960000000000003 0.00013880000000000004 0.00013880000000000004 0.00014800000000000005 0.00014800000000000005 0.00015720000000000005 0.00015720000000000005 0.00016640000000000006 0.00016640000000000006 8.36e-5 8.36e-5 9.28e-5 9.28e-5 0.00010200000000000001 0.00010200000000000001 0.00011120000000000003 0.00011120000000000002 0.00012040000000000001 0.00012040000000000003 0.00012960000000000003 0.00012960000000000003 0.00013880000000000004 0.00013880000000000007 0.00014800000000000005 0.00014800000000000005 0.00015720000000000003 0.00015720000000000005 0.00016640000000000006 0.00016640000000000006; 0.0035175 0.0035175 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0], BoundaryFaces()), :boundary_normals =&gt; ([-1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0], BoundaryFaces()), :boundary_neighbors =&gt; ([1, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], BoundaryFaces()), :trans =&gt; ([764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], Faces()), :halfTrans =&gt; ([1529.34782608696, 1529.3478260869417, 1529.3478260869688, 1529.34782608696, 1529.3478260869554, 1529.3478260869554, 1529.3478260869508, 1529.3478260869372, 1529.3478260869736, 1529.3478260869465, 1529.3478260869642, 1529.3478260869465, 1529.3478260869642, 1529.3478260869372, 1529.3478260869736, 1529.3478260869372, 1529.3478260869642, 1529.3478260869642], HalfFaces()), :halftransfaces =&gt; ([1529.34782608696 1529.3478260869688 1529.3478260869554 1529.3478260869508 1529.3478260869736 1529.3478260869642 1529.3478260869642 1529.3478260869736 1529.3478260869642; 1529.3478260869417 1529.34782608696 1529.3478260869554 1529.3478260869372 1529.3478260869465 1529.3478260869465 1529.3478260869372 1529.3478260869372 1529.3478260869642], Faces()), :bcTrans =&gt; ([1529.3478260869508, 1529.3478260869554, 0.0026154939587775426, 0.0026154939587775435, 0.0026154939587775426, 0.0026154939587775435, 0.002615493958777543, 0.002615493958777543, 0.0026154939587775417, 0.0026154939587775435, 0.0026154939587775435, 0.0026154939587775426, 0.0026154939587775426, 0.0026154939587775435, 0.0026154939587775435, 0.0026154939587775426, 0.002615493958777543, 0.002615493958777543, 0.0026154939587775426, 0.0026154939587775435, 0.002615493958777543, 0.002615493958777543, 1.2944400000000006e-7, 1.294440000000001e-7, 1.2944400000000003e-7, 1.2944400000000014e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000003e-7, 1.2944400000000014e-7, 1.2944400000000006e-7, 1.294440000000001e-7, 1.2944399999999998e-7, 1.294440000000002e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7], BoundaryFaces()), :volumeFraction =&gt; ([0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72], Cells()))) and discretizations for flow</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">, ActiveMaterial{nothing, BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}, JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Float64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_lfp_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}, Dict{Any, Any}}(JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Float64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_lfp_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}((volume_fraction = 0.72, volume_fractions = [1.0, 0.0, 0.0], effective_density = 1080, n_charge_carriers = 1, maximum_concentration = 26390, volumetric_surface_area = 1.87826e6, theta0 = 0.999, theta100 = 0.14778, activation_energy_of_reaction = 4000, setting_temperature_dependence = nothing, setting_butler_volmer = &quot;Standard&quot;, ecd_funcconstant = true, reaction_rate_constant_func = 3.626e-11, ocp_func = BattMo.open_circuit_potential_lfp_Xu_2015, diff_funcconstant = true, diff_func = 1.25e-15)), BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}((N = 10, rp = 1.15e-6, hT = [0.0, 2.89026524130261e-6, 1.156106096521044e-5, 2.6012387171723485e-5, 4.624424386084176e-5, 7.225663103256524e-5, 0.00010404954868689394, 0.0001416229968238279, 0.00018497697544336703, 0.00023411148454551142, 0.00028902652413026096], D = 1.25e-15, div = [(1, 1, 1), (2, 1, -1), (2, 2, 1), (3, 2, -1), (3, 3, 1), (4, 3, -1), (4, 4, 1), (5, 4, -1), (5, 5, 1), (6, 5, -1), (6, 6, 1), (7, 6, -1), (7, 7, 1), (8, 7, -1), (8, 8, 1), (9, 8, -1), (9, 9, 1), (10, 9, -1)], vols = [6.370626302704502e-21, 4.459438411893151e-20, 1.210418997513855e-19, 2.357131732000666e-19, 3.886082044649746e-19, 5.797269935461095e-19, 8.090695404434723e-19, 1.0766358451570604e-18, 1.382425907686877e-18, 1.7264397280329197e-18])), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), DefaultContext(EquationMajorLayout(false), 9223372036854775807, 1), FullyImplicitFormulation(), DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19]), Jutul.IndirectionMap{Int64}([2, 13, 35, 24, 3, 14, 36, 25, 4, 15  …  41, 30, 9, 20, 42, 31, 10, 21, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([1, 3, 4, 23, 24, 5, 6, 25, 26, 7  …  38, 19, 20, 39, 40, 2, 21, 22, 41, 42], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 43]), Jutul.IndirectionMap{Int64}([23, 34, 12, 1, 11, 22, 44, 33, 1, 2  …  42, 31, 10, 21, 22, 11, 33, 44, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37  …  133, 137, 141, 145, 149, 153, 157, 161, 165, 169]), [1, 10, 1, 1, 2, 2, 3, 3, 4, 4  …  6, 6, 7, 7, 8, 8, 9, 9, 10, 10]), StaticArraysCore.SVector{3, Float64}[[7.9e-5, 0.0, 0.0], [8.82e-5, 0.0, 0.0], [9.740000000000001e-5, 0.0, 0.0], [0.00010660000000000002, 0.0, 0.0], [0.00011580000000000002, 0.0, 0.0], [0.00012500000000000003, 0.0, 0.0], [0.00013420000000000004, 0.0, 0.0], [0.00014340000000000004, 0.0, 0.0], [0.00015260000000000005, 0.0, 0.0], [0.00016180000000000006, 0.0, 0.0]  …  [8.82e-5, 0.007035, 1.0], [9.740000000000001e-5, 0.007035, 1.0], [0.00010660000000000002, 0.007035, 1.0], [0.00011580000000000002, 0.007035, 1.0], [0.00012500000000000003, 0.007035, 1.0], [0.00013420000000000004, 0.007035, 1.0], [0.00014340000000000004, 0.007035, 1.0], [0.00015260000000000005, 0.007035, 1.0], [0.00016180000000000006, 0.007035, 1.0], [0.00017100000000000006, 0.007035, 1.0]], nothing, [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9  …  -33, -34, -35, -36, -37, -38, -39, -40, -41, -42], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 42)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 18)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 10)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 9)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 42</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 18</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 9</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 … 8 9; 2 3 … 9 10], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 … 1.0 1.0; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0], Faces()), :face_centroids =&gt; ([8.82e-5 9.740000000000001e-5 … 0.00015260000000000005 0.00016180000000000008; 0.0035175 0.0035175 … 0.0035175 0.0035175; 0.5 0.5 … 0.5 0.5], Faces()), :cell_centroids =&gt; ([8.360000000000001e-5 9.280000000000005e-5 … 0.0001572000000000001 0.00016640000000000006; 0.0035175000000000002 0.0035175000000000002 … 0.0035175000000000002 0.0035175; 0.5000000000000001 0.5000000000000002 … 0.5 0.5], Cells()), :volumes =&gt; ([6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6  …  6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8], BoundaryFaces()), :boundary_centroids =&gt; ([7.9e-5 0.00017100000000000006 … 0.00016640000000000006 0.00016640000000000006; 0.0035175 0.0035175 … 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 … 0.0 1.0], BoundaryFaces())…)), OrderedCollections.OrderedDict{Symbol, Any}(:Voltage =&gt; Voltage(), :ParticleConcentration =&gt; BattMo.ParticleConcentration(), :SurfaceConcentration =&gt; BattMo.SurfaceConcentration()), OrderedCollections.OrderedDict{Symbol, Any}(:Charge =&gt; Charge(), :OpenCircuitPotential =&gt; BattMo.OpenCircuitPotential(), :ReactionRateConstant =&gt; BattMo.ReactionRateConstant(), :SolidDiffFlux =&gt; BattMo.SolidDiffFlux(), :DiffusionCoefficient =&gt; BattMo.DiffusionCoefficient()), OrderedCollections.OrderedDict{Symbol, Any}(:ECTransmissibilities =&gt; BattMo.ECTransmissibilities(), :Volume =&gt; BattMo.Volume(), :Temperature =&gt; Temperature(), :Conductivity =&gt; BattMo.Conductivity(), :VolumeFraction =&gt; BattMo.VolumeFraction()), OrderedCollections.OrderedDict{Symbol, Any}(:charge_conservation =&gt; ConservationLaw{:Charge, PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}, Jutul.DefaultFlux, 1}(PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}(TPFA{Int64}[TPFA{Int64}(1, 2, 1), TPFA{Int64}(2, 3, 1), TPFA{Int64}(3, 4, 1), TPFA{Int64}(4, 5, 1), TPFA{Int64}(5, 6, 1), TPFA{Int64}(6, 7, 1), TPFA{Int64}(7, 8, 1), TPFA{Int64}(8, 9, 1), TPFA{Int64}(9, 10, 1)], SPU{Int64}[SPU{Int64}(1, 2), SPU{Int64}(2, 3), SPU{Int64}(3, 4), SPU{Int64}(4, 5), SPU{Int64}(5, 6), SPU{Int64}(6, 7), SPU{Int64}(7, 8), SPU{Int64}(8, 9), SPU{Int64}(9, 10)], (cells = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9], faces = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], face_pos = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19], face_sign = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1])), Jutul.DefaultFlux()), :mass_conservation =&gt; SolidMassCons(), :solid_diffusion_bc =&gt; BattMo.SolidDiffusionBc()), [:Voltage, :ParticleConcentration, :SurfaceConcentration, :Charge, :OpenCircuitPotential, :Temperature, :ReactionRateConstant, :DiffusionCoefficient], OrderedCollections.OrderedDict{Symbol, Any}()), :Control =&gt; SimulationModel{CurrentAndVoltageDomain, CurrentAndVoltageSystem{BattMo.CCPolicy{Float64}}, FullyImplicitFormulation, DefaultContext}(CurrentAndVoltageDomain(), CurrentAndVoltageSystem{BattMo.CCPolicy{Float64}}(BattMo.CCPolicy{Float64}(0, &quot;discharging&quot;, 0.06357915909518233, 0.0, 2.25, 4.1, true, BattMo.var&quot;#cFun#113&quot;{Float64}(10.0, Core.Box(0.06357915909518233)), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;charging&quot; =&gt; 0.0001</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;discharging&quot; =&gt; 0.0001</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">})), DefaultContext(EquationMajorLayout(false), 9223372036854775807, 1), FullyImplicitFormulation(), DataDomain{CurrentAndVoltageDomain, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(CurrentAndVoltageDomain(), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}()), OrderedCollections.OrderedDict{Symbol, Any}(:Voltage =&gt; VoltageVar(), :Current =&gt; CurrentVar()), OrderedCollections.OrderedDict{Symbol, Any}(), OrderedCollections.OrderedDict{Symbol, Any}(:ImaxDischarge =&gt; BattMo.ImaxDischarge(), :ImaxCharge =&gt; BattMo.ImaxCharge()), OrderedCollections.OrderedDict{Symbol, Any}(:charge_conservation =&gt; BattMo.CurrentEquation(), :control =&gt; BattMo.ControlEquation()), [:Voltage, :Current, :Controller], OrderedCollections.OrderedDict{Symbol, Any}()))), Jutul.CrossTermPair[Jutul.CrossTermPair(:Elyte, :NeAm, :charge_conservation, :charge_conservation, ButlerVolmerActmatToElyteCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:Elyte, :NeAm, :mass_conservation, :mass_conservation, ButlerVolmerActmatToElyteCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:NeAm, :Elyte, :charge_conservation, :charge_conservation, ButlerVolmerElyteToActmatCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:NeAm, :Elyte, :solid_diffusion_bc, :solid_diffusion_bc, ButlerVolmerElyteToActmatCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:Elyte, :PeAm, :charge_conservation, :charge_conservation, ButlerVolmerActmatToElyteCT{Vector{Int64}}([14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:Elyte, :PeAm, :mass_conservation, :mass_conservation, ButlerVolmerActmatToElyteCT{Vector{Int64}}([14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:PeAm, :Elyte, :charge_conservation, :charge_conservation, ButlerVolmerElyteToActmatCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23])), Jutul.CrossTermPair(:PeAm, :Elyte, :solid_diffusion_bc, :solid_diffusion_bc, ButlerVolmerElyteToActmatCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23])), Jutul.CrossTermPair(:PeAm, :Control, :charge_conservation, :charge_conservation, TPFAInterfaceFluxCT{Vector{Int64}, Vector{Float64}}([10], [1], [9.343401568868082])), Jutul.CrossTermPair(:Control, :PeAm, :charge_conservation, :charge_conservation, AccumulatorInterfaceFluxCT{Vector{Int64}, Vector{Float64}}(1, [10], [9.343401568868082])), Jutul.CrossTermPair(:Control, :PeAm, :control, :control, AccumulatorInterfaceFluxCT{Vector{Int64}, Vector{Float64}}(1, [10], [0.0]))], nothing, DefaultContext(EquationMajorLayout(false), 9223372036854775807, 1), nothing, false, {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :Elyte =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :NeAm =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :Control =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :PeAm =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">})), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Electrolyte&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;TransferenceNumber&quot; =&gt; 0.2594</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Description&quot; =&gt; &quot;1.5 mol/l LiPF6 dissolved in a mixture of ethylene carbonate (EC):  dimethyl carbonate (DMC) (1:1)&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;DiffusionCoefficient&quot; =&gt; &quot;8.794*10^(-11)*(c/1000)^2 - 3.972*10^(-10)*(c/1000) + 4.862*10^(-10)&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;IonicConductivity&quot; =&gt; &quot;0.1297*(c/1000)^3 - 2.51*(c/1000)^(1.5) + 3.329*(c/1000)&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Density&quot; =&gt; 1210</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;ChargeNumber&quot; =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Concentration&quot; =&gt; 1500.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Cell&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;ElectrodeGeometricSurfaceArea&quot; =&gt; 0.007035</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;NominalCapacity&quot; =&gt; 16.5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;ElectrodeWidth&quot; =&gt; 0.067</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;ElectrodeLength&quot; =&gt; 0.105</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Name&quot; =&gt; &quot;LP2770120&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Case&quot; =&gt; &quot;Pouch&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;NominalVoltage&quot; =&gt; 3.2</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Metadata&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Description&quot; =&gt; &quot;Parameter set of a commercial Type LP2770120 prismatic LiFePO4/graphite cell, for an electrochemical pseudo-two-dimensional (P2D) model.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Source&quot; =&gt; &quot;https://doi.org/10.1016/j.energy.2014.11.073&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Models&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;CurrentCollectors&quot; =&gt; &quot;Generic&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;RampUp&quot; =&gt; &quot;Sinusoidal&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;TransportInSolid&quot; =&gt; &quot;FullDiffusion&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ModelFramework&quot; =&gt; Any[&quot;P2D&quot;, &quot;P4D Pouch&quot;]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Title&quot; =&gt; &quot;Xu2015&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;PositiveElectrode&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;ActiveMaterial&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ActivationEnergyOfDiffusion&quot; =&gt; 20000</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;NumberOfElectronsTransfered&quot; =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;StoichiometricCoefficientAtSOC0&quot; =&gt; 0.999</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;OpenCircuitPotential&quot; =&gt;             {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">                &quot;FilePath&quot; =&gt; &quot;function_parameters_Xu2015.jl&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">                &quot;FunctionName&quot; =&gt; &quot;open_circuit_potential_lfp_Xu_2015&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ReactionRateConstant&quot; =&gt; 3.626e-11</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;MassFraction&quot; =&gt; 1.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;StoichiometricCoefficientAtSOC100&quot; =&gt; 0.14778</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ActivationEnergyOfReaction&quot; =&gt; 4000</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;MaximumConcentration&quot; =&gt; 26390</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;VolumetricSurfaceArea&quot; =&gt; 1.87826e6</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Description&quot; =&gt; &quot;LiFePO4&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;DiffusionCoefficient&quot; =&gt; 1.25e-15</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ParticleRadius&quot; =&gt; 1.15e-6</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Density&quot; =&gt; 1500</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ElectronicConductivity&quot; =&gt; 0.01</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ChargeTransferCoefficient&quot; =&gt; 0.5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Binder&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Description&quot; =&gt; &quot;Unknown&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;MassFraction&quot; =&gt; 0.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Density&quot; =&gt; 1100.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ElectronicConductivity&quot; =&gt; 100.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Coating&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;BruggemanCoefficient&quot; =&gt; 1.5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;EffectiveDensity&quot; =&gt; 1080</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Thickness&quot; =&gt; 9.2e-5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;CurrentCollector&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Description&quot; =&gt; &quot;Aluminum&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;TabLength&quot; =&gt; 0.01</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Density&quot; =&gt; 2700</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ElectronicConductivity&quot; =&gt; 3.83e7</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Thickness&quot; =&gt; 1.6e-5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;TabWidth&quot; =&gt; 0.015</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;ConductiveAdditive&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Description&quot; =&gt; &quot;Unknown&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;MassFraction&quot; =&gt; 0.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Density&quot; =&gt; 1950.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ElectronicConductivity&quot; =&gt; 100.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Separator&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Density&quot; =&gt; 779</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;BruggemanCoefficient&quot; =&gt; 1.5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Thickness&quot; =&gt; 2.0e-5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Porosity&quot; =&gt; 0.4</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;NegativeElectrode&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;ActiveMaterial&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ActivationEnergyOfDiffusion&quot; =&gt; 4000</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;NumberOfElectronsTransfered&quot; =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;StoichiometricCoefficientAtSOC0&quot; =&gt; 0.001</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;OpenCircuitPotential&quot; =&gt;             {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">                &quot;FilePath&quot; =&gt; &quot;function_parameters_Xu2015.jl&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">                &quot;FunctionName&quot; =&gt; &quot;open_circuit_potential_graphite_Xu_2015&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ReactionRateConstant&quot; =&gt; 1.764e-11</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;MassFraction&quot; =&gt; 1.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;StoichiometricCoefficientAtSOC100&quot; =&gt; 0.51873811</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ActivationEnergyOfReaction&quot; =&gt; 4000</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;MaximumConcentration&quot; =&gt; 31540</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;VolumetricSurfaceArea&quot; =&gt; 142373</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Description&quot; =&gt; &quot;Graphite&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;DiffusionCoefficient&quot; =&gt; 3.9e-14</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ParticleRadius&quot; =&gt; 1.475e-5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Density&quot; =&gt; 2660</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ElectronicConductivity&quot; =&gt; 215.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ChargeTransferCoefficient&quot; =&gt; 0.5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Binder&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Description&quot; =&gt; &quot;Unknown&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;MassFraction&quot; =&gt; 0.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Density&quot; =&gt; 1100.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ElectronicConductivity&quot; =&gt; 100.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Coating&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;BruggemanCoefficient&quot; =&gt; 1.5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;EffectiveDensity&quot; =&gt; 1862</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Thickness&quot; =&gt; 5.9e-5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;CurrentCollector&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Description&quot; =&gt; &quot;Copper&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;TabLength&quot; =&gt; 0.01</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Density&quot; =&gt; 8900</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ElectronicConductivity&quot; =&gt; 6.33e7</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Thickness&quot; =&gt; 9.0e-6</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;TabWidth&quot; =&gt; 0.015</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;ConductiveAdditive&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Description&quot; =&gt; &quot;Unknown&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;MassFraction&quot; =&gt; 0.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;Density&quot; =&gt; 1950.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;ElectronicConductivity&quot; =&gt; 100.0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;TotalNumberOfCycles&quot; =&gt; 0</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;InitialControl&quot; =&gt; &quot;discharging&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;InitialStateOfCharge&quot; =&gt; 0.99</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Metadata&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Description&quot; =&gt; &quot;Parameter set for a constant current discharging protocol.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Title&quot; =&gt; &quot;CCDischarge&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;DRate&quot; =&gt; 0.5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;LowerVoltageLimit&quot; =&gt; 2.25</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Protocol&quot; =&gt; &quot;CC&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;UpperVoltageLimit&quot; =&gt; 4.1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;TimeStepDuration&quot; =&gt; 50</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;RampUpTime&quot; =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionElectrodeWidth&quot; =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionPositiveElectrodeCoating&quot; =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionNegativeElectrodeCoating&quot; =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionPositiveElectrodeCurrentCollectorTabLength&quot; =&gt; 3</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionNegativeElectrodeParticle&quot; =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionPositiveElectrodeCurrentCollectorTabWidth&quot; =&gt; 3</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionPositiveElectrodeParticle&quot; =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionPositiveElectrodeCurrentCollector&quot; =&gt; 2</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Grid&quot; =&gt; Any[]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;RampUpSteps&quot; =&gt; 5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionNegativeElectrodeCurrentCollector&quot; =&gt; 2</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionSeparator&quot; =&gt; 3</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionNegativeElectrodeCurrentCollectorTabLength&quot; =&gt; 3</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionElectrodeLength&quot; =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;GridResolutionNegativeElectrodeCurrentCollectorTabWidth&quot; =&gt; 3</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, [1.5625, 3.125, 6.25, 12.5, 25.0, 50.0, 50.0, 50.0, 50.0, 50.0  …  50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 21.56250000000091], {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :Elyte =&gt; NamedTuple()</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :NeAm =&gt; NamedTuple()</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :Control =&gt; NamedTuple()</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :PeAm =&gt; NamedTuple()</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :Elyte =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Concentration =&gt; [1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :DmuDc =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Charge =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Voltage =&gt; [-0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049, -0.1139038441049]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Mass =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Diffusivity =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Conductivity =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :ChemCoef =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :NeAm =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :OpenCircuitPotential =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :ReactionRateConstant =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :DiffusionCoefficient =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Charge =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Voltage =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :ParticleConcentration =&gt; [16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002; 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002; 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002; 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002; 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002; 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002; 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002; 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002; 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002; 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002 16197.705389506002]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :SurfaceConcentration =&gt; [16197.705389506002, 16197.705389506002, 16197.705389506002, 16197.705389506002, 16197.705389506002, 16197.705389506002, 16197.705389506002, 16197.705389506002, 16197.705389506002, 16197.705389506002]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :SolidDiffFlux =&gt; [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :Control =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Controller =&gt; BattMo.CCController{Int64, Float64}(0, 0.0, 0.0, false, &quot;discharging&quot;)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Voltage =&gt; [3.3186584026951]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Current =&gt; [0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :PeAm =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :OpenCircuitPotential =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :ReactionRateConstant =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :DiffusionCoefficient =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Charge =&gt; [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Voltage =&gt; [3.3186584026951, 3.3186584026951, 3.3186584026951, 3.3186584026951, 3.3186584026951, 3.3186584026951, 3.3186584026951, 3.3186584026951, 3.3186584026951, 3.3186584026951]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :ParticleConcentration =&gt; [4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158; 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158; 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158; 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158; 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158; 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158; 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158; 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158; 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158; 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158 4124.551158]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :SurfaceConcentration =&gt; [4124.551158, 4124.551158, 4124.551158, 4124.551158, 4124.551158, 4124.551158, 4124.551158, 4124.551158, 4124.551158, 4124.551158]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :SolidDiffFlux =&gt; [0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Electrolyte&quot; =&gt; UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 45]), Jutul.IndirectionMap{Int64}([2, 26, 74, 50, 3, 27, 75, 51, 4, 28, 76, 52, 5, 29, 77, 53, 6, 30, 78, 54, 7, 31, 79, 55, 8, 32, 80, 56, 9, 33, 81, 57, 10, 34, 82, 58, 11, 35, 83, 59, 12, 36, 84, 60, 13, 37, 85, 61, 14, 38, 86, 62, 15, 39, 87, 63, 16, 40, 88, 64, 17, 41, 89, 65, 18, 42, 90, 66, 19, 43, 91, 67, 20, 44, 92, 68, 21, 45, 93, 69, 22, 46, 94, 70, 23, 47, 95, 71], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([1, 3, 4, 49, 50, 5, 6, 51, 52, 7, 8, 53, 54, 9, 10, 55, 56, 11, 12, 57, 58, 13, 14, 59, 60, 15, 16, 61, 62, 17, 18, 63, 64, 19, 20, 65, 66, 21, 22, 67, 68, 23, 24, 69, 70, 25, 26, 71, 72, 27, 28, 73, 74, 29, 30, 75, 76, 31, 32, 77, 78, 33, 34, 79, 80, 35, 36, 81, 82, 37, 38, 83, 84, 39, 40, 85, 86, 41, 42, 87, 88, 43, 44, 89, 90, 45, 46, 91, 92, 2, 47, 48, 93, 94], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 95]), Jutul.IndirectionMap{Int64}([49, 73, 25, 1, 24, 48, 96, 72, 1, 2, 50, 49, 73, 74, 26, 25, 2, 3, 51, 50, 74, 75, 27, 26, 3, 4, 52, 51, 75, 76, 28, 27, 4, 5, 53, 52, 76, 77, 29, 28, 5, 6, 54, 53, 77, 78, 30, 29, 6, 7, 55, 54, 78, 79, 31, 30, 7, 8, 56, 55, 79, 80, 32, 31, 8, 9, 57, 56, 80, 81, 33, 32, 9, 10, 58, 57, 81, 82, 34, 33, 10, 11, 59, 58, 82, 83, 35, 34, 11, 12, 60, 59, 83, 84, 36, 35, 12, 13, 61, 60, 84, 85, 37, 36, 13, 14, 62, 61, 85, 86, 38, 37, 14, 15, 63, 62, 86, 87, 39, 38, 15, 16, 64, 63, 87, 88, 40, 39, 16, 17, 65, 64, 88, 89, 41, 40, 17, 18, 66, 65, 89, 90, 42, 41, 18, 19, 67, 66, 90, 91, 43, 42, 19, 20, 68, 67, 91, 92, 44, 43, 20, 21, 69, 68, 92, 93, 45, 44, 21, 22, 70, 69, 93, 94, 46, 45, 22, 23, 71, 70, 94, 95, 47, 46, 23, 24, 72, 71, 95, 96, 48, 47, 1, 25, 26, 2, 50, 74, 73, 49, 2, 26, 27, 3, 51, 75, 74, 50, 3, 27, 28, 4, 52, 76, 75, 51, 4, 28, 29, 5, 53, 77, 76, 52, 5, 29, 30, 6, 54, 78, 77, 53, 6, 30, 31, 7, 55, 79, 78, 54, 7, 31, 32, 8, 56, 80, 79, 55, 8, 32, 33, 9, 57, 81, 80, 56, 9, 33, 34, 10, 58, 82, 81, 57, 10, 34, 35, 11, 59, 83, 82, 58, 11, 35, 36, 12, 60, 84, 83, 59, 12, 36, 37, 13, 61, 85, 84, 60, 13, 37, 38, 14, 62, 86, 85, 61, 14, 38, 39, 15, 63, 87, 86, 62, 15, 39, 40, 16, 64, 88, 87, 63, 16, 40, 41, 17, 65, 89, 88, 64, 17, 41, 42, 18, 66, 90, 89, 65, 18, 42, 43, 19, 67, 91, 90, 66, 19, 43, 44, 20, 68, 92, 91, 67, 20, 44, 45, 21, 69, 93, 92, 68, 21, 45, 46, 22, 70, 94, 93, 69, 22, 46, 47, 23, 71, 95, 94, 70, 23, 47, 48, 24, 72, 96, 95, 71], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177, 181, 185, 189, 193, 197, 201, 205, 209, 213, 217, 221, 225, 229, 233, 237, 241, 245, 249, 253, 257, 261, 265, 269, 273, 277, 281, 285, 289, 293, 297, 301, 305, 309, 313, 317, 321, 325, 329, 333, 337, 341, 345, 349, 353, 357, 361, 365, 369, 373, 377]), [1, 23, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23]), StaticArraysCore.SVector{3, Float64}[[0.0, 0.0, 0.0], [5.899999999999999e-6, 0.0, 0.0], [1.1799999999999999e-5, 0.0, 0.0], [1.7699999999999997e-5, 0.0, 0.0], [2.3599999999999998e-5, 0.0, 0.0], [2.95e-5, 0.0, 0.0], [3.54e-5, 0.0, 0.0], [4.13e-5, 0.0, 0.0], [4.72e-5, 0.0, 0.0], [5.31e-5, 0.0, 0.0], [5.9000000000000004e-5, 0.0, 0.0], [6.566666666666667e-5, 0.0, 0.0], [7.233333333333333e-5, 0.0, 0.0], [7.9e-5, 0.0, 0.0], [8.82e-5, 0.0, 0.0], [9.740000000000001e-5, 0.0, 0.0], [0.00010660000000000002, 0.0, 0.0], [0.00011580000000000002, 0.0, 0.0], [0.00012500000000000003, 0.0, 0.0], [0.00013420000000000004, 0.0, 0.0], [0.00014340000000000004, 0.0, 0.0], [0.00015260000000000005, 0.0, 0.0], [0.00016180000000000006, 0.0, 0.0], [0.00017100000000000006, 0.0, 0.0], [0.0, 0.007035, 0.0], [5.899999999999999e-6, 0.007035, 0.0], [1.1799999999999999e-5, 0.007035, 0.0], [1.7699999999999997e-5, 0.007035, 0.0], [2.3599999999999998e-5, 0.007035, 0.0], [2.95e-5, 0.007035, 0.0], [3.54e-5, 0.007035, 0.0], [4.13e-5, 0.007035, 0.0], [4.72e-5, 0.007035, 0.0], [5.31e-5, 0.007035, 0.0], [5.9000000000000004e-5, 0.007035, 0.0], [6.566666666666667e-5, 0.007035, 0.0], [7.233333333333333e-5, 0.007035, 0.0], [7.9e-5, 0.007035, 0.0], [8.82e-5, 0.007035, 0.0], [9.740000000000001e-5, 0.007035, 0.0], [0.00010660000000000002, 0.007035, 0.0], [0.00011580000000000002, 0.007035, 0.0], [0.00012500000000000003, 0.007035, 0.0], [0.00013420000000000004, 0.007035, 0.0], [0.00014340000000000004, 0.007035, 0.0], [0.00015260000000000005, 0.007035, 0.0], [0.00016180000000000006, 0.007035, 0.0], [0.00017100000000000006, 0.007035, 0.0], [0.0, 0.0, 1.0], [5.899999999999999e-6, 0.0, 1.0], [1.1799999999999999e-5, 0.0, 1.0], [1.7699999999999997e-5, 0.0, 1.0], [2.3599999999999998e-5, 0.0, 1.0], [2.95e-5, 0.0, 1.0], [3.54e-5, 0.0, 1.0], [4.13e-5, 0.0, 1.0], [4.72e-5, 0.0, 1.0], [5.31e-5, 0.0, 1.0], [5.9000000000000004e-5, 0.0, 1.0], [6.566666666666667e-5, 0.0, 1.0], [7.233333333333333e-5, 0.0, 1.0], [7.9e-5, 0.0, 1.0], [8.82e-5, 0.0, 1.0], [9.740000000000001e-5, 0.0, 1.0], [0.00010660000000000002, 0.0, 1.0], [0.00011580000000000002, 0.0, 1.0], [0.00012500000000000003, 0.0, 1.0], [0.00013420000000000004, 0.0, 1.0], [0.00014340000000000004, 0.0, 1.0], [0.00015260000000000005, 0.0, 1.0], [0.00016180000000000006, 0.0, 1.0], [0.00017100000000000006, 0.0, 1.0], [0.0, 0.007035, 1.0], [5.899999999999999e-6, 0.007035, 1.0], [1.1799999999999999e-5, 0.007035, 1.0], [1.7699999999999997e-5, 0.007035, 1.0], [2.3599999999999998e-5, 0.007035, 1.0], [2.95e-5, 0.007035, 1.0], [3.54e-5, 0.007035, 1.0], [4.13e-5, 0.007035, 1.0], [4.72e-5, 0.007035, 1.0], [5.31e-5, 0.007035, 1.0], [5.9000000000000004e-5, 0.007035, 1.0], [6.566666666666667e-5, 0.007035, 1.0], [7.233333333333333e-5, 0.007035, 1.0], [7.9e-5, 0.007035, 1.0], [8.82e-5, 0.007035, 1.0], [9.740000000000001e-5, 0.007035, 1.0], [0.00010660000000000002, 0.007035, 1.0], [0.00011580000000000002, 0.007035, 1.0], [0.00012500000000000003, 0.007035, 1.0], [0.00013420000000000004, 0.007035, 1.0], [0.00014340000000000004, 0.007035, 1.0], [0.00015260000000000005, 0.007035, 1.0], [0.00016180000000000006, 0.007035, 1.0], [0.00017100000000000006, 0.007035, 1.0]], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 94)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 44)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 23)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 22)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;PositiveElectrode&quot; =&gt; UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19]), Jutul.IndirectionMap{Int64}([2, 13, 35, 24, 3, 14, 36, 25, 4, 15, 37, 26, 5, 16, 38, 27, 6, 17, 39, 28, 7, 18, 40, 29, 8, 19, 41, 30, 9, 20, 42, 31, 10, 21, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([1, 3, 4, 23, 24, 5, 6, 25, 26, 7, 8, 27, 28, 9, 10, 29, 30, 11, 12, 31, 32, 13, 14, 33, 34, 15, 16, 35, 36, 17, 18, 37, 38, 19, 20, 39, 40, 2, 21, 22, 41, 42], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 43]), Jutul.IndirectionMap{Int64}([23, 34, 12, 1, 11, 22, 44, 33, 1, 2, 24, 23, 34, 35, 13, 12, 2, 3, 25, 24, 35, 36, 14, 13, 3, 4, 26, 25, 36, 37, 15, 14, 4, 5, 27, 26, 37, 38, 16, 15, 5, 6, 28, 27, 38, 39, 17, 16, 6, 7, 29, 28, 39, 40, 18, 17, 7, 8, 30, 29, 40, 41, 19, 18, 8, 9, 31, 30, 41, 42, 20, 19, 9, 10, 32, 31, 42, 43, 21, 20, 10, 11, 33, 32, 43, 44, 22, 21, 1, 12, 13, 2, 24, 35, 34, 23, 2, 13, 14, 3, 25, 36, 35, 24, 3, 14, 15, 4, 26, 37, 36, 25, 4, 15, 16, 5, 27, 38, 37, 26, 5, 16, 17, 6, 28, 39, 38, 27, 6, 17, 18, 7, 29, 40, 39, 28, 7, 18, 19, 8, 30, 41, 40, 29, 8, 19, 20, 9, 31, 42, 41, 30, 9, 20, 21, 10, 32, 43, 42, 31, 10, 21, 22, 11, 33, 44, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169]), [1, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]), StaticArraysCore.SVector{3, Float64}[[7.9e-5, 0.0, 0.0], [8.82e-5, 0.0, 0.0], [9.740000000000001e-5, 0.0, 0.0], [0.00010660000000000002, 0.0, 0.0], [0.00011580000000000002, 0.0, 0.0], [0.00012500000000000003, 0.0, 0.0], [0.00013420000000000004, 0.0, 0.0], [0.00014340000000000004, 0.0, 0.0], [0.00015260000000000005, 0.0, 0.0], [0.00016180000000000006, 0.0, 0.0], [0.00017100000000000006, 0.0, 0.0], [7.9e-5, 0.007035, 0.0], [8.82e-5, 0.007035, 0.0], [9.740000000000001e-5, 0.007035, 0.0], [0.00010660000000000002, 0.007035, 0.0], [0.00011580000000000002, 0.007035, 0.0], [0.00012500000000000003, 0.007035, 0.0], [0.00013420000000000004, 0.007035, 0.0], [0.00014340000000000004, 0.007035, 0.0], [0.00015260000000000005, 0.007035, 0.0], [0.00016180000000000006, 0.007035, 0.0], [0.00017100000000000006, 0.007035, 0.0], [7.9e-5, 0.0, 1.0], [8.82e-5, 0.0, 1.0], [9.740000000000001e-5, 0.0, 1.0], [0.00010660000000000002, 0.0, 1.0], [0.00011580000000000002, 0.0, 1.0], [0.00012500000000000003, 0.0, 1.0], [0.00013420000000000004, 0.0, 1.0], [0.00014340000000000004, 0.0, 1.0], [0.00015260000000000005, 0.0, 1.0], [0.00016180000000000006, 0.0, 1.0], [0.00017100000000000006, 0.0, 1.0], [7.9e-5, 0.007035, 1.0], [8.82e-5, 0.007035, 1.0], [9.740000000000001e-5, 0.007035, 1.0], [0.00010660000000000002, 0.007035, 1.0], [0.00011580000000000002, 0.007035, 1.0], [0.00012500000000000003, 0.007035, 1.0], [0.00013420000000000004, 0.007035, 1.0], [0.00014340000000000004, 0.007035, 1.0], [0.00015260000000000005, 0.007035, 1.0], [0.00016180000000000006, 0.007035, 1.0], [0.00017100000000000006, 0.007035, 1.0]], nothing, [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 42)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 18)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 10)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 9)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Separator&quot; =&gt; UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2], [1, 2, 4, 5]), Jutul.IndirectionMap{Int64}([2, 6, 14, 10, 3, 7, 15, 11], [1, 5, 9]), [(1, 2), (2, 3)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([1, 3, 4, 9, 10, 5, 6, 11, 12, 2, 7, 8, 13, 14], [1, 6, 10, 15]), Jutul.IndirectionMap{Int64}([9, 13, 5, 1, 4, 8, 16, 12, 1, 2, 10, 9, 13, 14, 6, 5, 2, 3, 11, 10, 14, 15, 7, 6, 3, 4, 12, 11, 15, 16, 8, 7, 1, 5, 6, 2, 10, 14, 13, 9, 2, 6, 7, 3, 11, 15, 14, 10, 3, 7, 8, 4, 12, 16, 15, 11], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57]), [1, 3, 1, 1, 2, 2, 3, 3, 1, 1, 2, 2, 3, 3]), StaticArraysCore.SVector{3, Float64}[[5.9000000000000004e-5, 0.0, 0.0], [6.566666666666667e-5, 0.0, 0.0], [7.233333333333333e-5, 0.0, 0.0], [7.9e-5, 0.0, 0.0], [5.9000000000000004e-5, 0.007035, 0.0], [6.566666666666667e-5, 0.007035, 0.0], [7.233333333333333e-5, 0.007035, 0.0], [7.9e-5, 0.007035, 0.0], [5.9000000000000004e-5, 0.0, 1.0], [6.566666666666667e-5, 0.0, 1.0], [7.233333333333333e-5, 0.0, 1.0], [7.9e-5, 0.0, 1.0], [5.9000000000000004e-5, 0.007035, 1.0], [6.566666666666667e-5, 0.007035, 1.0], [7.233333333333333e-5, 0.007035, 1.0], [7.9e-5, 0.007035, 1.0]], nothing, [-1, 1, 2, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 14)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 4)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 3)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 2)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;NegativeElectrode&quot; =&gt; UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19]), Jutul.IndirectionMap{Int64}([2, 13, 35, 24, 3, 14, 36, 25, 4, 15, 37, 26, 5, 16, 38, 27, 6, 17, 39, 28, 7, 18, 40, 29, 8, 19, 41, 30, 9, 20, 42, 31, 10, 21, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([2, 3, 4, 23, 24, 5, 6, 25, 26, 7, 8, 27, 28, 9, 10, 29, 30, 11, 12, 31, 32, 13, 14, 33, 34, 15, 16, 35, 36, 17, 18, 37, 38, 19, 20, 39, 40, 1, 21, 22, 41, 42], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 43]), Jutul.IndirectionMap{Int64}([11, 22, 44, 33, 23, 34, 12, 1, 1, 2, 24, 23, 34, 35, 13, 12, 2, 3, 25, 24, 35, 36, 14, 13, 3, 4, 26, 25, 36, 37, 15, 14, 4, 5, 27, 26, 37, 38, 16, 15, 5, 6, 28, 27, 38, 39, 17, 16, 6, 7, 29, 28, 39, 40, 18, 17, 7, 8, 30, 29, 40, 41, 19, 18, 8, 9, 31, 30, 41, 42, 20, 19, 9, 10, 32, 31, 42, 43, 21, 20, 10, 11, 33, 32, 43, 44, 22, 21, 1, 12, 13, 2, 24, 35, 34, 23, 2, 13, 14, 3, 25, 36, 35, 24, 3, 14, 15, 4, 26, 37, 36, 25, 4, 15, 16, 5, 27, 38, 37, 26, 5, 16, 17, 6, 28, 39, 38, 27, 6, 17, 18, 7, 29, 40, 39, 28, 7, 18, 19, 8, 30, 41, 40, 29, 8, 19, 20, 9, 31, 42, 41, 30, 9, 20, 21, 10, 32, 43, 42, 31, 10, 21, 22, 11, 33, 44, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169]), [10, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]), StaticArraysCore.SVector{3, Float64}[[0.0, 0.0, 0.0], [5.899999999999999e-6, 0.0, 0.0], [1.1799999999999999e-5, 0.0, 0.0], [1.7699999999999997e-5, 0.0, 0.0], [2.3599999999999998e-5, 0.0, 0.0], [2.95e-5, 0.0, 0.0], [3.54e-5, 0.0, 0.0], [4.13e-5, 0.0, 0.0], [4.72e-5, 0.0, 0.0], [5.31e-5, 0.0, 0.0], [5.9000000000000004e-5, 0.0, 0.0], [0.0, 0.007035, 0.0], [5.899999999999999e-6, 0.007035, 0.0], [1.1799999999999999e-5, 0.007035, 0.0], [1.7699999999999997e-5, 0.007035, 0.0], [2.3599999999999998e-5, 0.007035, 0.0], [2.95e-5, 0.007035, 0.0], [3.54e-5, 0.007035, 0.0], [4.13e-5, 0.007035, 0.0], [4.72e-5, 0.007035, 0.0], [5.31e-5, 0.007035, 0.0], [5.9000000000000004e-5, 0.007035, 0.0], [0.0, 0.0, 1.0], [5.899999999999999e-6, 0.0, 1.0], [1.1799999999999999e-5, 0.0, 1.0], [1.7699999999999997e-5, 0.0, 1.0], [2.3599999999999998e-5, 0.0, 1.0], [2.95e-5, 0.0, 1.0], [3.54e-5, 0.0, 1.0], [4.13e-5, 0.0, 1.0], [4.72e-5, 0.0, 1.0], [5.31e-5, 0.0, 1.0], [5.9000000000000004e-5, 0.0, 1.0], [0.0, 0.007035, 1.0], [5.899999999999999e-6, 0.007035, 1.0], [1.1799999999999999e-5, 0.007035, 1.0], [1.7699999999999997e-5, 0.007035, 1.0], [2.3599999999999998e-5, 0.007035, 1.0], [2.95e-5, 0.007035, 1.0], [3.54e-5, 0.007035, 1.0], [4.13e-5, 0.007035, 1.0], [4.72e-5, 0.007035, 1.0], [5.31e-5, 0.007035, 1.0], [5.9000000000000004e-5, 0.007035, 1.0]], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 42)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 18)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 10)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 9)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Electrolyte&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;PositiveElectrode&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;faces&quot; =&gt; Any[]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;face_type&quot; =&gt; false</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [14, 15, 16, 17, 18, 19, 20, 21, 22, 23]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Separator&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;faces&quot; =&gt; Any[]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;face_type&quot; =&gt; false</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [11, 12, 13]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;NegativeElectrode&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;faces&quot; =&gt; Any[]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;face_type&quot; =&gt; false</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;PositiveElectrode&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Electrolyte&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;faces&quot; =&gt; Any[]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;face_type&quot; =&gt; false</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;External&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [10]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;boundaryfaces&quot; =&gt; [2]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Separator&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;faces&quot; =&gt; [1]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;face_type&quot; =&gt; true</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [1]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;Separator&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Electrolyte&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;faces&quot; =&gt; Any[]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;face_type&quot; =&gt; false</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [1, 2, 3]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;PositiveElectrode&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;faces&quot; =&gt; [2]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;face_type&quot; =&gt; true</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [3]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;NegativeElectrode&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;faces&quot; =&gt; [1]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;face_type&quot; =&gt; true</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [1]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;NegativeElectrode&quot; =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Electrolyte&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;faces&quot; =&gt; Any[]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;face_type&quot; =&gt; false</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;External&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [1]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;boundaryfaces&quot; =&gt; [2]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        &quot;Separator&quot; =&gt;         {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;faces&quot; =&gt; [1]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;face_type&quot; =&gt; true</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">            &quot;cells&quot; =&gt; [10]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :Elyte =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :BruggemanCoefficient =&gt; [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Volume =&gt; [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8, 4.6900000000000016e-8, 4.6899999999999977e-8, 4.6899999999999924e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Temperature =&gt; [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :VolumeFraction =&gt; [0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.4, 0.4, 0.4, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :ECTransmissibilities =&gt; [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294, 1119.628647214855, 1055.2499999999943, 1055.2500000000093, 886.764705882349, 764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :NeAm =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :BoundaryVoltage =&gt; [0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Volume =&gt; [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Temperature =&gt; [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :VolumeFraction =&gt; [0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Conductivity =&gt; [125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :ECTransmissibilities =&gt; [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :Control =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :ImaxDischarge =&gt; [0.06357915909518233]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :ImaxCharge =&gt; [0.0]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :PeAm =&gt;     {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Volume =&gt; [6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Temperature =&gt; [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :VolumeFraction =&gt; [0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :Conductivity =&gt; [0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">        :ECTransmissibilities =&gt; [764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821]</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, Simulator{Jutul.DefaultExecutor, MultiModel{:IntercalationBattery, JutulStorage{Nothing}, Vector{Jutul.CrossTermPair}, Nothing, DefaultContext, Dict{Symbol, Int64}}, JutulStorage{@NamedTuple{NeAm::JutulStorage{@NamedTuple{state0::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, state::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, parameters::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, ParticleConcentration::BattMo.ParticleConcentration, SurfaceConcentration::BattMo.SurfaceConcentration}, secondary_variables::@NamedTuple{Charge::Charge, OpenCircuitPotential::BattMo.OpenCircuitPotential, ReactionRateConstant::BattMo.ReactionRateConstant, SolidDiffFlux::BattMo.SolidDiffFlux, DiffusionCoefficient::BattMo.DiffusionCoefficient}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, Conductivity::BattMo.Conductivity, VolumeFraction::BattMo.VolumeFraction, BoundaryVoltage::BoundaryPotential{:Voltage}}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, mass_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{10, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, solid_diffusion_bc::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, solid_diffusion_bc::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, ParticleConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, SurfaceConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}, Elyte::JutulStorage{@NamedTuple{state0::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, Diffusivity::Vector{Float64}, Concentration::Vector{Float64}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{Float64}}, state::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Diffusivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Concentration::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, parameters::@NamedTuple{BruggemanCoefficient::Vector{Float64}, Volume::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, ECTransmissibilities::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Concentration::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, Concentration::Concentration}, secondary_variables::@NamedTuple{Conductivity::BattMo.Conductivity, Diffusivity::BattMo.Diffusivity, DmuDc::DmuDc, ChemCoef::ChemCoef, Charge::Charge, Mass::Mass}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, BruggemanCoefficient::BattMo.BruggemanCoefficient, VolumeFraction::BattMo.VolumeFraction}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, mass_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, Concentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}, PeAm::JutulStorage{@NamedTuple{state0::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, state::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, parameters::@NamedTuple{Volume::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, ParticleConcentration::BattMo.ParticleConcentration, SurfaceConcentration::BattMo.SurfaceConcentration}, secondary_variables::@NamedTuple{Charge::Charge, OpenCircuitPotential::BattMo.OpenCircuitPotential, ReactionRateConstant::BattMo.ReactionRateConstant, SolidDiffFlux::BattMo.SolidDiffFlux, DiffusionCoefficient::BattMo.DiffusionCoefficient}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, Conductivity::BattMo.Conductivity, VolumeFraction::BattMo.VolumeFraction}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, mass_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{10, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, solid_diffusion_bc::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, solid_diffusion_bc::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, ParticleConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, SurfaceConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}, Control::JutulStorage{@NamedTuple{state0::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{Float64}, Current::Vector{Float64}, ImaxCharge::Vector{Float64}}, state::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Current::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ImaxCharge::Vector{Float64}}, parameters::@NamedTuple{ImaxDischarge::Vector{Float64}, ImaxCharge::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Current::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::VoltageVar, Current::CurrentVar}, secondary_variables::@NamedTuple{}, parameters::@NamedTuple{ImaxDischarge::BattMo.ImaxDischarge, ImaxCharge::BattMo.ImaxCharge}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, control::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, control::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, Current::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}, state::JutulStorage{@NamedTuple{NeAm::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, Elyte::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Diffusivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Concentration::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, PeAm::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, Control::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Current::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ImaxCharge::Vector{Float64}}}}, state0::JutulStorage{@NamedTuple{NeAm::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, Elyte::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, Diffusivity::Vector{Float64}, Concentration::Vector{Float64}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{Float64}}, PeAm::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, Control::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{Float64}, Current::Vector{Float64}, ImaxCharge::Vector{Float64}}}}, cross_terms::Vector{Any}, LinearizedSystem::LinearizedSystem{EquationMajorLayout, SparseArrays.SparseMatrixCSC{Float64, Int64}, Vector{Float64}, Vector{Float64}, Vector{Float64}}, multi_model_maps::@NamedTuple{offset_map::Vector{Int64}}, eq_maps::Jutul.MutableWrapper, recorder::ProgressRecorder}}}(Jutul.DefaultExecutor(), MultiModel{:IntercalationBattery, JutulStorage{Nothing}, Vector{Jutul.CrossTermPair}, Nothing, DefaultContext, Dict{Symbol, Int64}}(JutulStorage{Nothing}(OrderedCollections.OrderedDict{Symbol, Any}(:NeAm =&gt; SimulationModel{DiscretizedDomain{DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}, @NamedTuple{flow::PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}}, Dict{JutulEntity, Int64}, Jutul.TrivialGlobalMap}, ActiveMaterial{nothing, BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}, JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Int64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_graphite_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}, Dict{Any, Any}}, FullyImplicitFormulation, DefaultContext}(DiscretizedDomain with DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19]), Jutul.IndirectionMap{Int64}([2, 13, 35, 24, 3, 14, 36, 25, 4, 15, 37, 26, 5, 16, 38, 27, 6, 17, 39, 28, 7, 18, 40, 29, 8, 19, 41, 30, 9, 20, 42, 31, 10, 21, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([2, 3, 4, 23, 24, 5, 6, 25, 26, 7, 8, 27, 28, 9, 10, 29, 30, 11, 12, 31, 32, 13, 14, 33, 34, 15, 16, 35, 36, 17, 18, 37, 38, 19, 20, 39, 40, 1, 21, 22, 41, 42], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 43]), Jutul.IndirectionMap{Int64}([11, 22, 44, 33, 23, 34, 12, 1, 1, 2, 24, 23, 34, 35, 13, 12, 2, 3, 25, 24, 35, 36, 14, 13, 3, 4, 26, 25, 36, 37, 15, 14, 4, 5, 27, 26, 37, 38, 16, 15, 5, 6, 28, 27, 38, 39, 17, 16, 6, 7, 29, 28, 39, 40, 18, 17, 7, 8, 30, 29, 40, 41, 19, 18, 8, 9, 31, 30, 41, 42, 20, 19, 9, 10, 32, 31, 42, 43, 21, 20, 10, 11, 33, 32, 43, 44, 22, 21, 1, 12, 13, 2, 24, 35, 34, 23, 2, 13, 14, 3, 25, 36, 35, 24, 3, 14, 15, 4, 26, 37, 36, 25, 4, 15, 16, 5, 27, 38, 37, 26, 5, 16, 17, 6, 28, 39, 38, 27, 6, 17, 18, 7, 29, 40, 39, 28, 7, 18, 19, 8, 30, 41, 40, 29, 8, 19, 20, 9, 31, 42, 41, 30, 9, 20, 21, 10, 32, 43, 42, 31, 10, 21, 22, 11, 33, 44, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169]), [10, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]), StaticArraysCore.SVector{3, Float64}[[0.0, 0.0, 0.0], [5.899999999999999e-6, 0.0, 0.0], [1.1799999999999999e-5, 0.0, 0.0], [1.7699999999999997e-5, 0.0, 0.0], [2.3599999999999998e-5, 0.0, 0.0], [2.95e-5, 0.0, 0.0], [3.54e-5, 0.0, 0.0], [4.13e-5, 0.0, 0.0], [4.72e-5, 0.0, 0.0], [5.31e-5, 0.0, 0.0], [5.9000000000000004e-5, 0.0, 0.0], [0.0, 0.007035, 0.0], [5.899999999999999e-6, 0.007035, 0.0], [1.1799999999999999e-5, 0.007035, 0.0], [1.7699999999999997e-5, 0.007035, 0.0], [2.3599999999999998e-5, 0.007035, 0.0], [2.95e-5, 0.007035, 0.0], [3.54e-5, 0.007035, 0.0], [4.13e-5, 0.007035, 0.0], [4.72e-5, 0.007035, 0.0], [5.31e-5, 0.007035, 0.0], [5.9000000000000004e-5, 0.007035, 0.0], [0.0, 0.0, 1.0], [5.899999999999999e-6, 0.0, 1.0], [1.1799999999999999e-5, 0.0, 1.0], [1.7699999999999997e-5, 0.0, 1.0], [2.3599999999999998e-5, 0.0, 1.0], [2.95e-5, 0.0, 1.0], [3.54e-5, 0.0, 1.0], [4.13e-5, 0.0, 1.0], [4.72e-5, 0.0, 1.0], [5.31e-5, 0.0, 1.0], [5.9000000000000004e-5, 0.0, 1.0], [0.0, 0.007035, 1.0], [5.899999999999999e-6, 0.007035, 1.0], [1.1799999999999999e-5, 0.007035, 1.0], [1.7699999999999997e-5, 0.007035, 1.0], [2.3599999999999998e-5, 0.007035, 1.0], [2.95e-5, 0.007035, 1.0], [3.54e-5, 0.007035, 1.0], [4.13e-5, 0.007035, 1.0], [4.72e-5, 0.007035, 1.0], [5.31e-5, 0.007035, 1.0], [5.9000000000000004e-5, 0.007035, 1.0]], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 42)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 18)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 10)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 9)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 42</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 18</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 9</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryDirichletFaces() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 3 4 5 6 7 8 9; 2 3 4 5 6 7 8 9 10], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0], Faces()), :face_centroids =&gt; ([5.8999999999999986e-6 1.1799999999999997e-5 1.7699999999999997e-5 2.3599999999999994e-5 2.95e-5 3.54e-5 4.13e-5 4.7199999999999995e-5 5.3099999999999996e-5; 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175; 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5], Faces()), :cell_centroids =&gt; ([2.9499999999999993e-6 8.849999999999998e-6 1.475e-5 2.0649999999999997e-5 2.6549999999999988e-5 3.2449999999999996e-5 3.834999999999999e-5 4.425000000000001e-5 5.014999999999999e-5 5.605000000000001e-5; 0.003517499999999998 0.0035174999999999985 0.003517499999999998 0.0035174999999999985 0.0035174999999999976 0.0035175 0.0035174999999999994 0.0035174999999999994 0.0035174999999999985 0.0035175; 0.5 0.5 0.49999999999999983 0.5 0.49999999999999983 0.5 0.5 0.5 0.5 0.5], Cells()), :volumes =&gt; ([4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999998e-6, 5.899999999999998e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.150649999999998e-8, 4.150649999999998e-8, 4.150650000000001e-8, 4.150650000000001e-8, 4.150650000000001e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8], BoundaryFaces()), :boundary_centroids =&gt; ([5.9000000000000004e-5 0.0 2.9499999999999993e-6 2.9499999999999993e-6 8.85e-6 8.85e-6 1.4749999999999996e-5 1.4749999999999996e-5 2.0649999999999997e-5 2.0649999999999997e-5 2.6549999999999995e-5 2.6549999999999995e-5 3.245e-5 3.245e-5 3.835e-5 3.835e-5 4.425e-5 4.425e-5 5.015e-5 5.015e-5 5.605000000000001e-5 5.605000000000001e-5 2.9499999999999997e-6 2.9499999999999997e-6 8.849999999999998e-6 8.849999999999998e-6 1.475e-5 1.4749999999999996e-5 2.0649999999999994e-5 2.0649999999999994e-5 2.6549999999999998e-5 2.655e-5 3.245e-5 3.245e-5 3.8350000000000004e-5 3.8350000000000004e-5 4.4250000000000005e-5 4.4250000000000005e-5 5.0150000000000006e-5 5.0150000000000006e-5 5.605000000000001e-5 5.605000000000001e-5; 0.0035175 0.0035175 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0035175 0.0035175 0.0035175 0.0035175 0.0035174999999999994 0.0035174999999999994 0.0035175 0.0035175 0.0035175 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175 0.0035175 0.0035175 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0], BoundaryFaces()), :boundary_normals =&gt; ([1.0 -1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0], BoundaryFaces()), :boundary_neighbors =&gt; ([10, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], BoundaryFaces()), :trans =&gt; ([1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294], Faces()), :halfTrans =&gt; ([2384.745762711865, 2384.7457627118647, 2384.745762711865, 2384.7457627118624, 2384.745762711866, 2384.745762711864, 2384.745762711866, 2384.7457627118692, 2384.7457627118556, 2384.745762711866, 2384.7457627118615, 2384.745762711872, 2384.7457627118556, 2384.7457627118556, 2384.745762711878, 2384.745762711866, 2384.7457627118615, 2384.7457627118556], HalfFaces()), :halftransfaces =&gt; ([2384.745762711865 2384.745762711865 2384.745762711866 2384.745762711866 2384.7457627118556 2384.7457627118615 2384.7457627118556 2384.745762711878 2384.7457627118615; 2384.7457627118647 2384.7457627118624 2384.745762711864 2384.7457627118692 2384.745762711866 2384.745762711872 2384.7457627118556 2384.745762711866 2384.7457627118556], Faces()), :bcTrans =&gt; ([2384.745762711866, 2384.745762711865, 0.0016773276474769021, 0.0016773276474769004, 0.0016773276474769017, 0.0016773276474769004, 0.0016773276474769015, 0.0016773276474769, 0.0016773276474769021, 0.0016773276474769006, 0.0016773276474769028, 0.0016773276474769002, 0.0016773276474769017, 0.001677327647476901, 0.001677327647476902, 0.001677327647476901, 0.001677327647476902, 0.001677327647476901, 0.0016773276474769021, 0.0016773276474769006, 0.0016773276474769017, 0.001677327647476901, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999992e-8, 8.301300000000002e-8, 8.301300000000002e-8, 8.301300000000004e-8, 8.301299999999996e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8], BoundaryFaces()), :bcDirHalfTrans =&gt; ([2384.745762711865], BoundaryDirichletFaces()), :bcDirCells =&gt; ([1], BoundaryDirichletFaces()), :bcDirInds =&gt; ([1], BoundaryDirichletFaces()), :volumeFraction =&gt; ([0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001], Cells()))) and discretizations for flow</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">, ActiveMaterial{nothing, BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}, JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Int64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_graphite_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}, Dict{Any, Any}}(JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Int64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_graphite_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}((volume_fraction = 0.7000000000000001, volume_fractions = [1.0, 0.0, 0.0], effective_density = 1862, n_charge_carriers = 1, maximum_concentration = 31540, volumetric_surface_area = 142373, theta0 = 0.001, theta100 = 0.51873811, activation_energy_of_reaction = 4000, setting_temperature_dependence = nothing, setting_butler_volmer = &quot;Standard&quot;, ecd_funcconstant = true, reaction_rate_constant_func = 1.764e-11, ocp_func = BattMo.open_circuit_potential_graphite_Xu_2015, diff_funcconstant = true, diff_func = 3.9e-14)), BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}((N = 10, rp = 1.475e-5, hT = [0.0, 3.707079331235956e-5, 0.00014828317324943824, 0.00033363713981123596, 0.0005931326929977529, 0.000926769832808989, 0.0013345485592449438, 0.001816468872305618, 0.0023725307719910118, 0.003002734258301124, 0.003707079331235956], D = 3.9e-14, div = [(1, 1, 1), (2, 1, -1), (2, 2, 1), (3, 2, -1), (3, 3, 1), (4, 3, -1), (4, 4, 1), (5, 4, -1), (5, 5, 1), (6, 5, -1), (6, 6, 1), (7, 6, -1), (7, 7, 1), (8, 7, -1), (8, 8, 1), (9, 8, -1), (9, 9, 1), (10, 9, -1)], vols = [1.3442024116700374e-17, 9.409416881690261e-17, 2.5539845821730693e-16, 4.973548923179139e-16, 8.19963471118723e-16, 1.2232241946197326e-15, 1.7071370628209474e-15, 2.2717020757223645e-15, 2.9169192333239812e-15, 3.642788535625803e-15])), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), DefaultContext(EquationMajorLayout(false), 9223372036854775807, 1), FullyImplicitFormulation(), DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19]), Jutul.IndirectionMap{Int64}([2, 13, 35, 24, 3, 14, 36, 25, 4, 15  …  41, 30, 9, 20, 42, 31, 10, 21, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([2, 3, 4, 23, 24, 5, 6, 25, 26, 7  …  38, 19, 20, 39, 40, 1, 21, 22, 41, 42], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 43]), Jutul.IndirectionMap{Int64}([11, 22, 44, 33, 23, 34, 12, 1, 1, 2  …  42, 31, 10, 21, 22, 11, 33, 44, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37  …  133, 137, 141, 145, 149, 153, 157, 161, 165, 169]), [10, 1, 1, 1, 2, 2, 3, 3, 4, 4  …  6, 6, 7, 7, 8, 8, 9, 9, 10, 10]), StaticArraysCore.SVector{3, Float64}[[0.0, 0.0, 0.0], [5.899999999999999e-6, 0.0, 0.0], [1.1799999999999999e-5, 0.0, 0.0], [1.7699999999999997e-5, 0.0, 0.0], [2.3599999999999998e-5, 0.0, 0.0], [2.95e-5, 0.0, 0.0], [3.54e-5, 0.0, 0.0], [4.13e-5, 0.0, 0.0], [4.72e-5, 0.0, 0.0], [5.31e-5, 0.0, 0.0]  …  [5.899999999999999e-6, 0.007035, 1.0], [1.1799999999999999e-5, 0.007035, 1.0], [1.7699999999999997e-5, 0.007035, 1.0], [2.3599999999999998e-5, 0.007035, 1.0], [2.95e-5, 0.007035, 1.0], [3.54e-5, 0.007035, 1.0], [4.13e-5, 0.007035, 1.0], [4.72e-5, 0.007035, 1.0], [5.31e-5, 0.007035, 1.0], [5.9000000000000004e-5, 0.007035, 1.0]], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, -1  …  -33, -34, -35, -36, -37, -38, -39, -40, -41, -42], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 42)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 18)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 10)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 9)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 42</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 18</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 9</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryDirichletFaces() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 … 8 9; 2 3 … 9 10], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 … 1.0 1.0; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0], Faces()), :face_centroids =&gt; ([5.8999999999999986e-6 1.1799999999999997e-5 … 4.7199999999999995e-5 5.3099999999999996e-5; 0.0035175 0.0035175 … 0.0035175 0.0035175; 0.5 0.5 … 0.5 0.5], Faces()), :cell_centroids =&gt; ([2.9499999999999993e-6 8.849999999999998e-6 … 5.014999999999999e-5 5.605000000000001e-5; 0.003517499999999998 0.0035174999999999985 … 0.0035174999999999985 0.0035175; 0.5 0.5 … 0.5 0.5], Cells()), :volumes =&gt; ([4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999998e-6, 5.899999999999998e-6, 5.900000000000001e-6, 5.900000000000001e-6  …  4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8], BoundaryFaces()), :boundary_centroids =&gt; ([5.9000000000000004e-5 0.0 … 5.605000000000001e-5 5.605000000000001e-5; 0.0035175 0.0035175 … 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 … 0.0 1.0], BoundaryFaces())…)), OrderedCollections.OrderedDict{Symbol, Any}(:Voltage =&gt; Voltage(), :ParticleConcentration =&gt; BattMo.ParticleConcentration(), :SurfaceConcentration =&gt; BattMo.SurfaceConcentration()), OrderedCollections.OrderedDict{Symbol, Any}(:Charge =&gt; Charge(), :OpenCircuitPotential =&gt; BattMo.OpenCircuitPotential(), :ReactionRateConstant =&gt; BattMo.ReactionRateConstant(), :SolidDiffFlux =&gt; BattMo.SolidDiffFlux(), :DiffusionCoefficient =&gt; BattMo.DiffusionCoefficient()), OrderedCollections.OrderedDict{Symbol, Any}(:ECTransmissibilities =&gt; BattMo.ECTransmissibilities(), :Volume =&gt; BattMo.Volume(), :Temperature =&gt; Temperature(), :Conductivity =&gt; BattMo.Conductivity(), :VolumeFraction =&gt; BattMo.VolumeFraction(), :BoundaryVoltage =&gt; BoundaryPotential{:Voltage}()), OrderedCollections.OrderedDict{Symbol, Any}(:charge_conservation =&gt; ConservationLaw{:Charge, PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}, Jutul.DefaultFlux, 1}(PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}(TPFA{Int64}[TPFA{Int64}(1, 2, 1), TPFA{Int64}(2, 3, 1), TPFA{Int64}(3, 4, 1), TPFA{Int64}(4, 5, 1), TPFA{Int64}(5, 6, 1), TPFA{Int64}(6, 7, 1), TPFA{Int64}(7, 8, 1), TPFA{Int64}(8, 9, 1), TPFA{Int64}(9, 10, 1)], SPU{Int64}[SPU{Int64}(1, 2), SPU{Int64}(2, 3), SPU{Int64}(3, 4), SPU{Int64}(4, 5), SPU{Int64}(5, 6), SPU{Int64}(6, 7), SPU{Int64}(7, 8), SPU{Int64}(8, 9), SPU{Int64}(9, 10)], (cells = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9], faces = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], face_pos = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19], face_sign = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1])), Jutul.DefaultFlux()), :mass_conservation =&gt; SolidMassCons(), :solid_diffusion_bc =&gt; BattMo.SolidDiffusionBc()), [:Voltage, :ParticleConcentration, :SurfaceConcentration, :Charge, :OpenCircuitPotential, :Temperature, :ReactionRateConstant, :DiffusionCoefficient], OrderedCollections.OrderedDict{Symbol, Any}()), :Elyte =&gt; SimulationModel{DiscretizedDomain{DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}, @NamedTuple{flow::PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}}, Dict{JutulEntity, Int64}, Jutul.TrivialGlobalMap}, Electrolyte{Dict{Any, Any}}, FullyImplicitFormulation, DefaultContext}(DiscretizedDomain with DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 45]), Jutul.IndirectionMap{Int64}([2, 26, 74, 50, 3, 27, 75, 51, 4, 28, 76, 52, 5, 29, 77, 53, 6, 30, 78, 54, 7, 31, 79, 55, 8, 32, 80, 56, 9, 33, 81, 57, 10, 34, 82, 58, 11, 35, 83, 59, 12, 36, 84, 60, 13, 37, 85, 61, 14, 38, 86, 62, 15, 39, 87, 63, 16, 40, 88, 64, 17, 41, 89, 65, 18, 42, 90, 66, 19, 43, 91, 67, 20, 44, 92, 68, 21, 45, 93, 69, 22, 46, 94, 70, 23, 47, 95, 71], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([1, 3, 4, 49, 50, 5, 6, 51, 52, 7, 8, 53, 54, 9, 10, 55, 56, 11, 12, 57, 58, 13, 14, 59, 60, 15, 16, 61, 62, 17, 18, 63, 64, 19, 20, 65, 66, 21, 22, 67, 68, 23, 24, 69, 70, 25, 26, 71, 72, 27, 28, 73, 74, 29, 30, 75, 76, 31, 32, 77, 78, 33, 34, 79, 80, 35, 36, 81, 82, 37, 38, 83, 84, 39, 40, 85, 86, 41, 42, 87, 88, 43, 44, 89, 90, 45, 46, 91, 92, 2, 47, 48, 93, 94], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 95]), Jutul.IndirectionMap{Int64}([49, 73, 25, 1, 24, 48, 96, 72, 1, 2, 50, 49, 73, 74, 26, 25, 2, 3, 51, 50, 74, 75, 27, 26, 3, 4, 52, 51, 75, 76, 28, 27, 4, 5, 53, 52, 76, 77, 29, 28, 5, 6, 54, 53, 77, 78, 30, 29, 6, 7, 55, 54, 78, 79, 31, 30, 7, 8, 56, 55, 79, 80, 32, 31, 8, 9, 57, 56, 80, 81, 33, 32, 9, 10, 58, 57, 81, 82, 34, 33, 10, 11, 59, 58, 82, 83, 35, 34, 11, 12, 60, 59, 83, 84, 36, 35, 12, 13, 61, 60, 84, 85, 37, 36, 13, 14, 62, 61, 85, 86, 38, 37, 14, 15, 63, 62, 86, 87, 39, 38, 15, 16, 64, 63, 87, 88, 40, 39, 16, 17, 65, 64, 88, 89, 41, 40, 17, 18, 66, 65, 89, 90, 42, 41, 18, 19, 67, 66, 90, 91, 43, 42, 19, 20, 68, 67, 91, 92, 44, 43, 20, 21, 69, 68, 92, 93, 45, 44, 21, 22, 70, 69, 93, 94, 46, 45, 22, 23, 71, 70, 94, 95, 47, 46, 23, 24, 72, 71, 95, 96, 48, 47, 1, 25, 26, 2, 50, 74, 73, 49, 2, 26, 27, 3, 51, 75, 74, 50, 3, 27, 28, 4, 52, 76, 75, 51, 4, 28, 29, 5, 53, 77, 76, 52, 5, 29, 30, 6, 54, 78, 77, 53, 6, 30, 31, 7, 55, 79, 78, 54, 7, 31, 32, 8, 56, 80, 79, 55, 8, 32, 33, 9, 57, 81, 80, 56, 9, 33, 34, 10, 58, 82, 81, 57, 10, 34, 35, 11, 59, 83, 82, 58, 11, 35, 36, 12, 60, 84, 83, 59, 12, 36, 37, 13, 61, 85, 84, 60, 13, 37, 38, 14, 62, 86, 85, 61, 14, 38, 39, 15, 63, 87, 86, 62, 15, 39, 40, 16, 64, 88, 87, 63, 16, 40, 41, 17, 65, 89, 88, 64, 17, 41, 42, 18, 66, 90, 89, 65, 18, 42, 43, 19, 67, 91, 90, 66, 19, 43, 44, 20, 68, 92, 91, 67, 20, 44, 45, 21, 69, 93, 92, 68, 21, 45, 46, 22, 70, 94, 93, 69, 22, 46, 47, 23, 71, 95, 94, 70, 23, 47, 48, 24, 72, 96, 95, 71], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177, 181, 185, 189, 193, 197, 201, 205, 209, 213, 217, 221, 225, 229, 233, 237, 241, 245, 249, 253, 257, 261, 265, 269, 273, 277, 281, 285, 289, 293, 297, 301, 305, 309, 313, 317, 321, 325, 329, 333, 337, 341, 345, 349, 353, 357, 361, 365, 369, 373, 377]), [1, 23, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23]), StaticArraysCore.SVector{3, Float64}[[0.0, 0.0, 0.0], [5.899999999999999e-6, 0.0, 0.0], [1.1799999999999999e-5, 0.0, 0.0], [1.7699999999999997e-5, 0.0, 0.0], [2.3599999999999998e-5, 0.0, 0.0], [2.95e-5, 0.0, 0.0], [3.54e-5, 0.0, 0.0], [4.13e-5, 0.0, 0.0], [4.72e-5, 0.0, 0.0], [5.31e-5, 0.0, 0.0], [5.9000000000000004e-5, 0.0, 0.0], [6.566666666666667e-5, 0.0, 0.0], [7.233333333333333e-5, 0.0, 0.0], [7.9e-5, 0.0, 0.0], [8.82e-5, 0.0, 0.0], [9.740000000000001e-5, 0.0, 0.0], [0.00010660000000000002, 0.0, 0.0], [0.00011580000000000002, 0.0, 0.0], [0.00012500000000000003, 0.0, 0.0], [0.00013420000000000004, 0.0, 0.0], [0.00014340000000000004, 0.0, 0.0], [0.00015260000000000005, 0.0, 0.0], [0.00016180000000000006, 0.0, 0.0], [0.00017100000000000006, 0.0, 0.0], [0.0, 0.007035, 0.0], [5.899999999999999e-6, 0.007035, 0.0], [1.1799999999999999e-5, 0.007035, 0.0], [1.7699999999999997e-5, 0.007035, 0.0], [2.3599999999999998e-5, 0.007035, 0.0], [2.95e-5, 0.007035, 0.0], [3.54e-5, 0.007035, 0.0], [4.13e-5, 0.007035, 0.0], [4.72e-5, 0.007035, 0.0], [5.31e-5, 0.007035, 0.0], [5.9000000000000004e-5, 0.007035, 0.0], [6.566666666666667e-5, 0.007035, 0.0], [7.233333333333333e-5, 0.007035, 0.0], [7.9e-5, 0.007035, 0.0], [8.82e-5, 0.007035, 0.0], [9.740000000000001e-5, 0.007035, 0.0], [0.00010660000000000002, 0.007035, 0.0], [0.00011580000000000002, 0.007035, 0.0], [0.00012500000000000003, 0.007035, 0.0], [0.00013420000000000004, 0.007035, 0.0], [0.00014340000000000004, 0.007035, 0.0], [0.00015260000000000005, 0.007035, 0.0], [0.00016180000000000006, 0.007035, 0.0], [0.00017100000000000006, 0.007035, 0.0], [0.0, 0.0, 1.0], [5.899999999999999e-6, 0.0, 1.0], [1.1799999999999999e-5, 0.0, 1.0], [1.7699999999999997e-5, 0.0, 1.0], [2.3599999999999998e-5, 0.0, 1.0], [2.95e-5, 0.0, 1.0], [3.54e-5, 0.0, 1.0], [4.13e-5, 0.0, 1.0], [4.72e-5, 0.0, 1.0], [5.31e-5, 0.0, 1.0], [5.9000000000000004e-5, 0.0, 1.0], [6.566666666666667e-5, 0.0, 1.0], [7.233333333333333e-5, 0.0, 1.0], [7.9e-5, 0.0, 1.0], [8.82e-5, 0.0, 1.0], [9.740000000000001e-5, 0.0, 1.0], [0.00010660000000000002, 0.0, 1.0], [0.00011580000000000002, 0.0, 1.0], [0.00012500000000000003, 0.0, 1.0], [0.00013420000000000004, 0.0, 1.0], [0.00014340000000000004, 0.0, 1.0], [0.00015260000000000005, 0.0, 1.0], [0.00016180000000000006, 0.0, 1.0], [0.00017100000000000006, 0.0, 1.0], [0.0, 0.007035, 1.0], [5.899999999999999e-6, 0.007035, 1.0], [1.1799999999999999e-5, 0.007035, 1.0], [1.7699999999999997e-5, 0.007035, 1.0], [2.3599999999999998e-5, 0.007035, 1.0], [2.95e-5, 0.007035, 1.0], [3.54e-5, 0.007035, 1.0], [4.13e-5, 0.007035, 1.0], [4.72e-5, 0.007035, 1.0], [5.31e-5, 0.007035, 1.0], [5.9000000000000004e-5, 0.007035, 1.0], [6.566666666666667e-5, 0.007035, 1.0], [7.233333333333333e-5, 0.007035, 1.0], [7.9e-5, 0.007035, 1.0], [8.82e-5, 0.007035, 1.0], [9.740000000000001e-5, 0.007035, 1.0], [0.00010660000000000002, 0.007035, 1.0], [0.00011580000000000002, 0.007035, 1.0], [0.00012500000000000003, 0.007035, 1.0], [0.00013420000000000004, 0.007035, 1.0], [0.00014340000000000004, 0.007035, 1.0], [0.00015260000000000005, 0.007035, 1.0], [0.00016180000000000006, 0.007035, 1.0], [0.00017100000000000006, 0.007035, 1.0]], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 94)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 44)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 23)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 22)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 94</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 44</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 23</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 22</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22; 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0], Faces()), :face_centroids =&gt; ([5.8999999999999986e-6 1.1799999999999997e-5 1.7699999999999997e-5 2.3599999999999994e-5 2.95e-5 3.54e-5 4.13e-5 4.7199999999999995e-5 5.3099999999999996e-5 5.9000000000000004e-5 6.566666666666667e-5 7.233333333333333e-5 7.9e-5 8.82e-5 9.740000000000001e-5 0.0001066 0.00011580000000000002 0.00012500000000000003 0.00013420000000000004 0.00014340000000000004 0.00015260000000000005 0.00016180000000000008; 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175; 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5], Faces()), :cell_centroids =&gt; ([2.9499999999999993e-6 8.849999999999998e-6 1.475e-5 2.0649999999999997e-5 2.6549999999999988e-5 3.2449999999999996e-5 3.834999999999999e-5 4.425000000000001e-5 5.014999999999999e-5 5.605000000000001e-5 6.233333333333334e-5 6.900000000000004e-5 7.566666666666664e-5 8.360000000000001e-5 9.280000000000005e-5 0.000102 0.0001112 0.00012040000000000008 0.00012960000000000006 0.00013880000000000007 0.0001480000000000001 0.0001572000000000001 0.00016640000000000006; 0.003517499999999998 0.0035174999999999985 0.003517499999999998 0.0035174999999999985 0.0035174999999999976 0.0035175 0.0035174999999999994 0.0035174999999999994 0.0035174999999999985 0.0035175 0.0035175000000000007 0.0035175000000000007 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175 0.003517500000000001 0.0035174999999999994 0.0035175000000000002 0.0035174999999999994 0.0035175 0.0035175000000000002 0.0035175; 0.5 0.5 0.49999999999999983 0.5 0.49999999999999983 0.5 0.5 0.5 0.5 0.5 0.5 0.49999999999999994 0.5 0.5000000000000001 0.5000000000000002 0.5 0.5000000000000002 0.5000000000000001 0.5000000000000003 0.5 0.5 0.5 0.5], Cells()), :volumes =&gt; ([4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8, 4.6900000000000016e-8, 4.6899999999999977e-8, 4.6899999999999924e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999998e-6, 5.899999999999998e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 5.900000000000001e-6, 6.666666666666668e-6, 6.666666666666668e-6, 6.6666666666666616e-6, 6.6666666666666616e-6, 6.6666666666666616e-6, 6.6666666666666616e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.1506499999999995e-8, 4.150649999999998e-8, 4.150649999999998e-8, 4.150650000000001e-8, 4.150650000000001e-8, 4.150650000000001e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.15065e-8, 4.690000000000001e-8, 4.69e-8, 4.689999999999996e-8, 4.6899999999999963e-8, 4.6899999999999963e-8, 4.6899999999999963e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8], BoundaryFaces()), :boundary_centroids =&gt; ([0.0 0.00017100000000000006 2.9499999999999993e-6 2.9499999999999993e-6 8.85e-6 8.85e-6 1.4749999999999996e-5 1.4749999999999996e-5 2.0649999999999997e-5 2.0649999999999997e-5 2.6549999999999995e-5 2.6549999999999995e-5 3.245e-5 3.245e-5 3.835e-5 3.835e-5 4.425e-5 4.425e-5 5.015e-5 5.015e-5 5.605000000000001e-5 5.605000000000001e-5 6.233333333333332e-5 6.233333333333332e-5 6.9e-5 6.9e-5 7.566666666666667e-5 7.566666666666667e-5 8.36e-5 8.36e-5 9.28e-5 9.28e-5 0.00010200000000000001 0.00010200000000000001 0.0001112 0.0001112 0.00012040000000000003 0.00012040000000000003 0.00012960000000000003 0.00012960000000000003 0.00013880000000000004 0.00013880000000000004 0.00014800000000000005 0.00014800000000000005 0.00015720000000000005 0.00015720000000000005 0.00016640000000000006 0.00016640000000000006 2.9499999999999997e-6 2.9499999999999997e-6 8.849999999999998e-6 8.849999999999998e-6 1.475e-5 1.4749999999999996e-5 2.0649999999999994e-5 2.0649999999999994e-5 2.6549999999999998e-5 2.655e-5 3.245e-5 3.245e-5 3.8350000000000004e-5 3.8350000000000004e-5 4.4250000000000005e-5 4.4250000000000005e-5 5.0150000000000006e-5 5.0150000000000006e-5 5.605000000000001e-5 5.605000000000001e-5 6.233333333333332e-5 6.233333333333334e-5 6.900000000000001e-5 6.9e-5 7.566666666666667e-5 7.566666666666666e-5 8.36e-5 8.36e-5 9.28e-5 9.28e-5 0.00010200000000000001 0.00010200000000000001 0.00011120000000000003 0.00011120000000000002 0.00012040000000000001 0.00012040000000000003 0.00012960000000000003 0.00012960000000000003 0.00013880000000000004 0.00013880000000000007 0.00014800000000000005 0.00014800000000000005 0.00015720000000000003 0.00015720000000000005 0.00016640000000000006 0.00016640000000000006; 0.0035175 0.0035175 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.0070350000000000005 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0035175 0.0035175 0.0035175 0.0035175 0.0035174999999999994 0.0035174999999999994 0.0035175 0.0035175 0.0035175 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175 0.0035175 0.0035175 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175 0.0035175 0.0035174999999999994 0.0035175 0.0035175 0.0035175 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.5 0.49999999999999994 0.49999999999999994 0.5 0.49999999999999994 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0], BoundaryFaces()), :boundary_normals =&gt; ([-1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0], BoundaryFaces()), :boundary_neighbors =&gt; ([1, 23, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23], BoundaryFaces()), :trans =&gt; ([1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294, 1119.628647214855, 1055.2499999999943, 1055.2500000000093, 886.764705882349, 764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], Faces()), :halfTrans =&gt; ([2384.745762711865, 2384.7457627118647, 2384.745762711865, 2384.7457627118624, 2384.745762711866, 2384.745762711864, 2384.745762711866, 2384.7457627118692, 2384.7457627118556, 2384.745762711866, 2384.7457627118615, 2384.745762711872, 2384.7457627118556, 2384.7457627118556, 2384.745762711878, 2384.745762711866, 2384.7457627118615, 2384.7457627118556, 2384.745762711866, 2110.5000000000014, 2110.499999999997, 2110.4999999999804, 2110.500000000023, 2110.500000000014, 2110.4999999999886, 1529.3478260869508, 1529.34782608696, 1529.3478260869417, 1529.3478260869688, 1529.34782608696, 1529.3478260869554, 1529.3478260869554, 1529.3478260869508, 1529.3478260869372, 1529.3478260869736, 1529.3478260869465, 1529.3478260869642, 1529.3478260869465, 1529.3478260869642, 1529.3478260869372, 1529.3478260869736, 1529.3478260869372, 1529.3478260869642, 1529.3478260869642], HalfFaces()), :halftransfaces =&gt; ([2384.745762711865 2384.745762711865 2384.745762711866 2384.745762711866 2384.7457627118556 2384.7457627118615 2384.7457627118556 2384.745762711878 2384.7457627118615 2384.745762711866 2110.499999999997 2110.500000000023 2110.4999999999886 1529.34782608696 1529.3478260869688 1529.3478260869554 1529.3478260869508 1529.3478260869736 1529.3478260869642 1529.3478260869642 1529.3478260869736 1529.3478260869642; 2384.7457627118647 2384.7457627118624 2384.745762711864 2384.7457627118692 2384.745762711866 2384.745762711872 2384.7457627118556 2384.745762711866 2384.7457627118556 2110.5000000000014 2110.4999999999804 2110.500000000014 1529.3478260869508 1529.3478260869417 1529.34782608696 1529.3478260869554 1529.3478260869372 1529.3478260869465 1529.3478260869465 1529.3478260869372 1529.3478260869372 1529.3478260869642], Faces()), :bcTrans =&gt; ([2384.745762711865, 1529.3478260869554, 0.0016773276474769021, 0.0016773276474769004, 0.0016773276474769017, 0.0016773276474769004, 0.0016773276474769015, 0.0016773276474769, 0.0016773276474769021, 0.0016773276474769006, 0.0016773276474769028, 0.0016773276474769002, 0.0016773276474769017, 0.001677327647476901, 0.001677327647476902, 0.001677327647476901, 0.001677327647476902, 0.001677327647476901, 0.0016773276474769021, 0.0016773276474769006, 0.0016773276474769017, 0.001677327647476901, 0.0018952854773750297, 0.0018952854773750306, 0.0018952854773750276, 0.0018952854773750286, 0.0018952854773750282, 0.0018952854773750286, 0.0026154939587775426, 0.0026154939587775435, 0.0026154939587775426, 0.0026154939587775435, 0.002615493958777543, 0.002615493958777543, 0.0026154939587775417, 0.0026154939587775435, 0.0026154939587775435, 0.0026154939587775426, 0.0026154939587775426, 0.0026154939587775435, 0.0026154939587775435, 0.0026154939587775426, 0.002615493958777543, 0.002615493958777543, 0.0026154939587775426, 0.0026154939587775435, 0.002615493958777543, 0.002615493958777543, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999999e-8, 8.301299999999992e-8, 8.301300000000002e-8, 8.301300000000002e-8, 8.301300000000004e-8, 8.301299999999996e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 8.3013e-8, 9.380000000000002e-8, 9.38e-8, 9.379999999999993e-8, 9.379999999999993e-8, 9.379999999999993e-8, 9.379999999999993e-8, 1.2944400000000006e-7, 1.294440000000001e-7, 1.2944400000000003e-7, 1.2944400000000014e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000003e-7, 1.2944400000000014e-7, 1.2944400000000006e-7, 1.294440000000001e-7, 1.2944399999999998e-7, 1.294440000000002e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7], BoundaryFaces()), :volumeFraction =&gt; ([0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.4, 0.4, 0.4, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28], Cells()), :separator_volume_fraction =&gt; ([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6, 0.6, 0.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], Cells()))) and discretizations for flow</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">, Electrolyte{Dict{Any, Any}}(JutulStorage{Nothing}(OrderedCollections.OrderedDict{Symbol, Any}(:transference =&gt; 0.2594, :charge =&gt; 1, :separator_porosity =&gt; 0.4, :bruggeman =&gt; 1.5, :electrolyte_density =&gt; 1210, :separator_density =&gt; 779, :diffusivity_func =&gt; RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:c, :T), BattMo.var&quot;#_RGF_ModTag&quot;, BattMo.var&quot;#_RGF_ModTag&quot;, (0xee2235f8, 0xd04ba524, 0x244c5077, 0x15da4b3a, 0xf624324c), Expr}(quote</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">    #= none:1 =#</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">    #= none:1 =#</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    return (8.794 * 10 ^ -11 * (c / 1000) ^ 2 - 3.972 * 10 ^ -10 * (c / 1000)) + 4.862 * 10 ^ -10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">end), :conductivity_func =&gt; RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:c, :T), BattMo.var&quot;#_RGF_ModTag&quot;, BattMo.var&quot;#_RGF_ModTag&quot;, (0x6d3933d7, 0x54a514ab, 0x5fe1ef12, 0x21826394, 0xabdf6a37), Expr}(quote</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">    #= none:1 =#</span></span>
<span class="line"><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">    #= none:1 =#</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    return (0.1297 * (c / 1000) ^ 3 - 2.51 * (c / 1000) ^ 1.5) + 3.329 * (c / 1000)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">end))), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), DefaultContext(EquationMajorLayout(false), 9223372036854775807, 1), FullyImplicitFormulation(), DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5  …  18, 18, 19, 19, 20, 20, 21, 21, 22, 22], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18  …  28, 30, 32, 34, 36, 38, 40, 42, 44, 45]), Jutul.IndirectionMap{Int64}([2, 26, 74, 50, 3, 27, 75, 51, 4, 28  …  93, 69, 22, 46, 94, 70, 23, 47, 95, 71], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37  …  53, 57, 61, 65, 69, 73, 77, 81, 85, 89]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11)  …  (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([1, 3, 4, 49, 50, 5, 6, 51, 52, 7  …  90, 45, 46, 91, 92, 2, 47, 48, 93, 94], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38  …  58, 62, 66, 70, 74, 78, 82, 86, 90, 95]), Jutul.IndirectionMap{Int64}([49, 73, 25, 1, 24, 48, 96, 72, 1, 2  …  94, 70, 23, 47, 48, 24, 72, 96, 95, 71], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37  …  341, 345, 349, 353, 357, 361, 365, 369, 373, 377]), [1, 23, 1, 1, 2, 2, 3, 3, 4, 4  …  19, 19, 20, 20, 21, 21, 22, 22, 23, 23]), StaticArraysCore.SVector{3, Float64}[[0.0, 0.0, 0.0], [5.899999999999999e-6, 0.0, 0.0], [1.1799999999999999e-5, 0.0, 0.0], [1.7699999999999997e-5, 0.0, 0.0], [2.3599999999999998e-5, 0.0, 0.0], [2.95e-5, 0.0, 0.0], [3.54e-5, 0.0, 0.0], [4.13e-5, 0.0, 0.0], [4.72e-5, 0.0, 0.0], [5.31e-5, 0.0, 0.0]  …  [8.82e-5, 0.007035, 1.0], [9.740000000000001e-5, 0.007035, 1.0], [0.00010660000000000002, 0.007035, 1.0], [0.00011580000000000002, 0.007035, 1.0], [0.00012500000000000003, 0.007035, 1.0], [0.00013420000000000004, 0.007035, 1.0], [0.00014340000000000004, 0.007035, 1.0], [0.00015260000000000005, 0.007035, 1.0], [0.00016180000000000006, 0.007035, 1.0], [0.00017100000000000006, 0.007035, 1.0]], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10  …  -85, -86, -87, -88, -89, -90, -91, -92, -93, -94], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 94)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 44)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 23)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 22)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 94</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 44</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 23</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 22</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 … 21 22; 2 3 … 22 23], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035  …  0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 … 1.0 1.0; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0], Faces()), :face_centroids =&gt; ([5.8999999999999986e-6 1.1799999999999997e-5 … 0.00015260000000000005 0.00016180000000000008; 0.0035175 0.0035175 … 0.0035175 0.0035175; 0.5 0.5 … 0.5 0.5], Faces()), :cell_centroids =&gt; ([2.9499999999999993e-6 8.849999999999998e-6 … 0.0001572000000000001 0.00016640000000000006; 0.003517499999999998 0.0035174999999999985 … 0.0035175000000000002 0.0035175; 0.5 0.5 … 0.5 0.5], Cells()), :volumes =&gt; ([4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8  …  6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6  …  18, 19, 19, 20, 20, 21, 21, 22, 22, 23], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5  …  18, 18, 19, 19, 20, 20, 21, 21, 22, 22], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999999e-6, 5.899999999999998e-6, 5.899999999999998e-6, 5.900000000000001e-6, 5.900000000000001e-6  …  6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8], BoundaryFaces()), :boundary_centroids =&gt; ([0.0 0.00017100000000000006 … 0.00016640000000000006 0.00016640000000000006; 0.0035175 0.0035175 … 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 … 0.0 1.0], BoundaryFaces())…)), OrderedCollections.OrderedDict{Symbol, Any}(:Voltage =&gt; Voltage(), :Concentration =&gt; Concentration()), OrderedCollections.OrderedDict{Symbol, Any}(:Conductivity =&gt; BattMo.Conductivity(), :Diffusivity =&gt; BattMo.Diffusivity(), :DmuDc =&gt; DmuDc(), :ChemCoef =&gt; ChemCoef(), :Charge =&gt; Charge(), :Mass =&gt; Mass()), OrderedCollections.OrderedDict{Symbol, Any}(:ECTransmissibilities =&gt; BattMo.ECTransmissibilities(), :Volume =&gt; BattMo.Volume(), :Temperature =&gt; Temperature(), :BruggemanCoefficient =&gt; BattMo.BruggemanCoefficient(), :VolumeFraction =&gt; BattMo.VolumeFraction()), OrderedCollections.OrderedDict{Symbol, Any}(:charge_conservation =&gt; ConservationLaw{:Charge, PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}, Jutul.DefaultFlux, 1}(PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}(TPFA{Int64}[TPFA{Int64}(1, 2, 1), TPFA{Int64}(2, 3, 1), TPFA{Int64}(3, 4, 1), TPFA{Int64}(4, 5, 1), TPFA{Int64}(5, 6, 1), TPFA{Int64}(6, 7, 1), TPFA{Int64}(7, 8, 1), TPFA{Int64}(8, 9, 1), TPFA{Int64}(9, 10, 1), TPFA{Int64}(10, 11, 1)  …  TPFA{Int64}(13, 14, 1), TPFA{Int64}(14, 15, 1), TPFA{Int64}(15, 16, 1), TPFA{Int64}(16, 17, 1), TPFA{Int64}(17, 18, 1), TPFA{Int64}(18, 19, 1), TPFA{Int64}(19, 20, 1), TPFA{Int64}(20, 21, 1), TPFA{Int64}(21, 22, 1), TPFA{Int64}(22, 23, 1)], SPU{Int64}[SPU{Int64}(1, 2), SPU{Int64}(2, 3), SPU{Int64}(3, 4), SPU{Int64}(4, 5), SPU{Int64}(5, 6), SPU{Int64}(6, 7), SPU{Int64}(7, 8), SPU{Int64}(8, 9), SPU{Int64}(9, 10), SPU{Int64}(10, 11)  …  SPU{Int64}(13, 14), SPU{Int64}(14, 15), SPU{Int64}(15, 16), SPU{Int64}(16, 17), SPU{Int64}(17, 18), SPU{Int64}(18, 19), SPU{Int64}(19, 20), SPU{Int64}(20, 21), SPU{Int64}(21, 22), SPU{Int64}(22, 23)], (cells = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5  …  19, 18, 20, 19, 21, 20, 22, 21, 23, 22], faces = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5  …  18, 18, 19, 19, 20, 20, 21, 21, 22, 22], face_pos = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18  …  28, 30, 32, 34, 36, 38, 40, 42, 44, 45], face_sign = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1  …  1, -1, 1, -1, 1, -1, 1, -1, 1, -1])), Jutul.DefaultFlux()), :mass_conservation =&gt; ConservationLaw{:Mass, PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}, Jutul.DefaultFlux, 1}(PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}(TPFA{Int64}[TPFA{Int64}(1, 2, 1), TPFA{Int64}(2, 3, 1), TPFA{Int64}(3, 4, 1), TPFA{Int64}(4, 5, 1), TPFA{Int64}(5, 6, 1), TPFA{Int64}(6, 7, 1), TPFA{Int64}(7, 8, 1), TPFA{Int64}(8, 9, 1), TPFA{Int64}(9, 10, 1), TPFA{Int64}(10, 11, 1)  …  TPFA{Int64}(13, 14, 1), TPFA{Int64}(14, 15, 1), TPFA{Int64}(15, 16, 1), TPFA{Int64}(16, 17, 1), TPFA{Int64}(17, 18, 1), TPFA{Int64}(18, 19, 1), TPFA{Int64}(19, 20, 1), TPFA{Int64}(20, 21, 1), TPFA{Int64}(21, 22, 1), TPFA{Int64}(22, 23, 1)], SPU{Int64}[SPU{Int64}(1, 2), SPU{Int64}(2, 3), SPU{Int64}(3, 4), SPU{Int64}(4, 5), SPU{Int64}(5, 6), SPU{Int64}(6, 7), SPU{Int64}(7, 8), SPU{Int64}(8, 9), SPU{Int64}(9, 10), SPU{Int64}(10, 11)  …  SPU{Int64}(13, 14), SPU{Int64}(14, 15), SPU{Int64}(15, 16), SPU{Int64}(16, 17), SPU{Int64}(17, 18), SPU{Int64}(18, 19), SPU{Int64}(19, 20), SPU{Int64}(20, 21), SPU{Int64}(21, 22), SPU{Int64}(22, 23)], (cells = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5  …  19, 18, 20, 19, 21, 20, 22, 21, 23, 22], faces = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5  …  18, 18, 19, 19, 20, 20, 21, 21, 22, 22], face_pos = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18  …  28, 30, 32, 34, 36, 38, 40, 42, 44, 45], face_sign = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1  …  1, -1, 1, -1, 1, -1, 1, -1, 1, -1])), Jutul.DefaultFlux())), [:Voltage, :Concentration, :Charge, :Mass, :Conductivity, :Diffusivity], OrderedCollections.OrderedDict{Symbol, Any}()), :PeAm =&gt; SimulationModel{DiscretizedDomain{DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}, @NamedTuple{flow::PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}}, Dict{JutulEntity, Int64}, Jutul.TrivialGlobalMap}, ActiveMaterial{nothing, BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}, JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Float64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_lfp_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}, Dict{Any, Any}}, FullyImplicitFormulation, DefaultContext}(DiscretizedDomain with DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19]), Jutul.IndirectionMap{Int64}([2, 13, 35, 24, 3, 14, 36, 25, 4, 15, 37, 26, 5, 16, 38, 27, 6, 17, 39, 28, 7, 18, 40, 29, 8, 19, 41, 30, 9, 20, 42, 31, 10, 21, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([1, 3, 4, 23, 24, 5, 6, 25, 26, 7, 8, 27, 28, 9, 10, 29, 30, 11, 12, 31, 32, 13, 14, 33, 34, 15, 16, 35, 36, 17, 18, 37, 38, 19, 20, 39, 40, 2, 21, 22, 41, 42], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 43]), Jutul.IndirectionMap{Int64}([23, 34, 12, 1, 11, 22, 44, 33, 1, 2, 24, 23, 34, 35, 13, 12, 2, 3, 25, 24, 35, 36, 14, 13, 3, 4, 26, 25, 36, 37, 15, 14, 4, 5, 27, 26, 37, 38, 16, 15, 5, 6, 28, 27, 38, 39, 17, 16, 6, 7, 29, 28, 39, 40, 18, 17, 7, 8, 30, 29, 40, 41, 19, 18, 8, 9, 31, 30, 41, 42, 20, 19, 9, 10, 32, 31, 42, 43, 21, 20, 10, 11, 33, 32, 43, 44, 22, 21, 1, 12, 13, 2, 24, 35, 34, 23, 2, 13, 14, 3, 25, 36, 35, 24, 3, 14, 15, 4, 26, 37, 36, 25, 4, 15, 16, 5, 27, 38, 37, 26, 5, 16, 17, 6, 28, 39, 38, 27, 6, 17, 18, 7, 29, 40, 39, 28, 7, 18, 19, 8, 30, 41, 40, 29, 8, 19, 20, 9, 31, 42, 41, 30, 9, 20, 21, 10, 32, 43, 42, 31, 10, 21, 22, 11, 33, 44, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169]), [1, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]), StaticArraysCore.SVector{3, Float64}[[7.9e-5, 0.0, 0.0], [8.82e-5, 0.0, 0.0], [9.740000000000001e-5, 0.0, 0.0], [0.00010660000000000002, 0.0, 0.0], [0.00011580000000000002, 0.0, 0.0], [0.00012500000000000003, 0.0, 0.0], [0.00013420000000000004, 0.0, 0.0], [0.00014340000000000004, 0.0, 0.0], [0.00015260000000000005, 0.0, 0.0], [0.00016180000000000006, 0.0, 0.0], [0.00017100000000000006, 0.0, 0.0], [7.9e-5, 0.007035, 0.0], [8.82e-5, 0.007035, 0.0], [9.740000000000001e-5, 0.007035, 0.0], [0.00010660000000000002, 0.007035, 0.0], [0.00011580000000000002, 0.007035, 0.0], [0.00012500000000000003, 0.007035, 0.0], [0.00013420000000000004, 0.007035, 0.0], [0.00014340000000000004, 0.007035, 0.0], [0.00015260000000000005, 0.007035, 0.0], [0.00016180000000000006, 0.007035, 0.0], [0.00017100000000000006, 0.007035, 0.0], [7.9e-5, 0.0, 1.0], [8.82e-5, 0.0, 1.0], [9.740000000000001e-5, 0.0, 1.0], [0.00010660000000000002, 0.0, 1.0], [0.00011580000000000002, 0.0, 1.0], [0.00012500000000000003, 0.0, 1.0], [0.00013420000000000004, 0.0, 1.0], [0.00014340000000000004, 0.0, 1.0], [0.00015260000000000005, 0.0, 1.0], [0.00016180000000000006, 0.0, 1.0], [0.00017100000000000006, 0.0, 1.0], [7.9e-5, 0.007035, 1.0], [8.82e-5, 0.007035, 1.0], [9.740000000000001e-5, 0.007035, 1.0], [0.00010660000000000002, 0.007035, 1.0], [0.00011580000000000002, 0.007035, 1.0], [0.00012500000000000003, 0.007035, 1.0], [0.00013420000000000004, 0.007035, 1.0], [0.00014340000000000004, 0.007035, 1.0], [0.00015260000000000005, 0.007035, 1.0], [0.00016180000000000006, 0.007035, 1.0], [0.00017100000000000006, 0.007035, 1.0]], nothing, [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 42)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 18)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 10)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 9)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 42</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 18</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 9</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 3 4 5 6 7 8 9; 2 3 4 5 6 7 8 9 10], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0], Faces()), :face_centroids =&gt; ([8.82e-5 9.740000000000001e-5 0.0001066 0.00011580000000000002 0.00012500000000000003 0.00013420000000000004 0.00014340000000000004 0.00015260000000000005 0.00016180000000000008; 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175 0.0035175; 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5], Faces()), :cell_centroids =&gt; ([8.360000000000001e-5 9.280000000000005e-5 0.000102 0.0001112 0.00012040000000000008 0.00012960000000000006 0.00013880000000000007 0.0001480000000000001 0.0001572000000000001 0.00016640000000000006; 0.0035175000000000002 0.0035175000000000002 0.0035175 0.003517500000000001 0.0035174999999999994 0.0035175000000000002 0.0035174999999999994 0.0035175 0.0035175000000000002 0.0035175; 0.5000000000000001 0.5000000000000002 0.5 0.5000000000000002 0.5000000000000001 0.5000000000000003 0.5 0.5 0.5 0.5], Cells()), :volumes =&gt; ([6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8], BoundaryFaces()), :boundary_centroids =&gt; ([7.9e-5 0.00017100000000000006 8.36e-5 8.36e-5 9.28e-5 9.28e-5 0.00010200000000000001 0.00010200000000000001 0.0001112 0.0001112 0.00012040000000000003 0.00012040000000000003 0.00012960000000000003 0.00012960000000000003 0.00013880000000000004 0.00013880000000000004 0.00014800000000000005 0.00014800000000000005 0.00015720000000000005 0.00015720000000000005 0.00016640000000000006 0.00016640000000000006 8.36e-5 8.36e-5 9.28e-5 9.28e-5 0.00010200000000000001 0.00010200000000000001 0.00011120000000000003 0.00011120000000000002 0.00012040000000000001 0.00012040000000000003 0.00012960000000000003 0.00012960000000000003 0.00013880000000000004 0.00013880000000000007 0.00014800000000000005 0.00014800000000000005 0.00015720000000000003 0.00015720000000000005 0.00016640000000000006 0.00016640000000000006; 0.0035175 0.0035175 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0 0.007035 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0], BoundaryFaces()), :boundary_normals =&gt; ([-1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0 -1.0 1.0], BoundaryFaces()), :boundary_neighbors =&gt; ([1, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], BoundaryFaces()), :trans =&gt; ([764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], Faces()), :halfTrans =&gt; ([1529.34782608696, 1529.3478260869417, 1529.3478260869688, 1529.34782608696, 1529.3478260869554, 1529.3478260869554, 1529.3478260869508, 1529.3478260869372, 1529.3478260869736, 1529.3478260869465, 1529.3478260869642, 1529.3478260869465, 1529.3478260869642, 1529.3478260869372, 1529.3478260869736, 1529.3478260869372, 1529.3478260869642, 1529.3478260869642], HalfFaces()), :halftransfaces =&gt; ([1529.34782608696 1529.3478260869688 1529.3478260869554 1529.3478260869508 1529.3478260869736 1529.3478260869642 1529.3478260869642 1529.3478260869736 1529.3478260869642; 1529.3478260869417 1529.34782608696 1529.3478260869554 1529.3478260869372 1529.3478260869465 1529.3478260869465 1529.3478260869372 1529.3478260869372 1529.3478260869642], Faces()), :bcTrans =&gt; ([1529.3478260869508, 1529.3478260869554, 0.0026154939587775426, 0.0026154939587775435, 0.0026154939587775426, 0.0026154939587775435, 0.002615493958777543, 0.002615493958777543, 0.0026154939587775417, 0.0026154939587775435, 0.0026154939587775435, 0.0026154939587775426, 0.0026154939587775426, 0.0026154939587775435, 0.0026154939587775435, 0.0026154939587775426, 0.002615493958777543, 0.002615493958777543, 0.0026154939587775426, 0.0026154939587775435, 0.002615493958777543, 0.002615493958777543, 1.2944400000000006e-7, 1.294440000000001e-7, 1.2944400000000003e-7, 1.2944400000000014e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000003e-7, 1.2944400000000014e-7, 1.2944400000000006e-7, 1.294440000000001e-7, 1.2944399999999998e-7, 1.294440000000002e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7, 1.2944400000000008e-7], BoundaryFaces()), :volumeFraction =&gt; ([0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72], Cells()))) and discretizations for flow</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">, ActiveMaterial{nothing, BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}, JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Float64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_lfp_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}, Dict{Any, Any}}(JutulStorage{@NamedTuple{volume_fraction::Float64, volume_fractions::Vector{Float64}, effective_density::Int64, n_charge_carriers::Int64, maximum_concentration::Int64, volumetric_surface_area::Float64, theta0::Float64, theta100::Float64, activation_energy_of_reaction::Int64, setting_temperature_dependence::Nothing, setting_butler_volmer::String, ecd_funcconstant::Bool, reaction_rate_constant_func::Float64, ocp_func::typeof(BattMo.open_circuit_potential_lfp_Xu_2015), diff_funcconstant::Bool, diff_func::Float64}}((volume_fraction = 0.72, volume_fractions = [1.0, 0.0, 0.0], effective_density = 1080, n_charge_carriers = 1, maximum_concentration = 26390, volumetric_surface_area = 1.87826e6, theta0 = 0.999, theta100 = 0.14778, activation_energy_of_reaction = 4000, setting_temperature_dependence = nothing, setting_butler_volmer = &quot;Standard&quot;, ecd_funcconstant = true, reaction_rate_constant_func = 3.626e-11, ocp_func = BattMo.open_circuit_potential_lfp_Xu_2015, diff_funcconstant = true, diff_func = 1.25e-15)), BattMo.P2Ddiscretization{@NamedTuple{N::Int64, rp::Float64, hT::StaticArraysCore.SVector{11, Float64}, D::Float64, div::StaticArraysCore.SVector{18, Tuple{Int64, Int64, Int64}}, vols::StaticArraysCore.SVector{10, Float64}}}((N = 10, rp = 1.15e-6, hT = [0.0, 2.89026524130261e-6, 1.156106096521044e-5, 2.6012387171723485e-5, 4.624424386084176e-5, 7.225663103256524e-5, 0.00010404954868689394, 0.0001416229968238279, 0.00018497697544336703, 0.00023411148454551142, 0.00028902652413026096], D = 1.25e-15, div = [(1, 1, 1), (2, 1, -1), (2, 2, 1), (3, 2, -1), (3, 3, 1), (4, 3, -1), (4, 4, 1), (5, 4, -1), (5, 5, 1), (6, 5, -1), (6, 6, 1), (7, 6, -1), (7, 7, 1), (8, 7, -1), (8, 8, 1), (9, 8, -1), (9, 9, 1), (10, 9, -1)], vols = [6.370626302704502e-21, 4.459438411893151e-20, 1.210418997513855e-19, 2.357131732000666e-19, 3.886082044649746e-19, 5.797269935461095e-19, 8.090695404434723e-19, 1.0766358451570604e-18, 1.382425907686877e-18, 1.7264397280329197e-18])), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), DefaultContext(EquationMajorLayout(false), 9223372036854775807, 1), FullyImplicitFormulation(), DataDomain{UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(UnstructuredMesh{3, Nothing, Nothing, Vector{Int64}, Jutul.IndirectionMap{Int64}, Float64, Nothing, Nothing, Int64}(nothing, Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Tuple{Int64, Int64}}(Jutul.IndirectionMap{Int64}([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19]), Jutul.IndirectionMap{Int64}([2, 13, 35, 24, 3, 14, 36, 25, 4, 15  …  41, 30, 9, 20, 42, 31, 10, 21, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]), [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]), Jutul.FaceMap{Jutul.IndirectionMap{Int64}, Int64}(Jutul.IndirectionMap{Int64}([1, 3, 4, 23, 24, 5, 6, 25, 26, 7  …  38, 19, 20, 39, 40, 2, 21, 22, 41, 42], [1, 6, 10, 14, 18, 22, 26, 30, 34, 38, 43]), Jutul.IndirectionMap{Int64}([23, 34, 12, 1, 11, 22, 44, 33, 1, 2  …  42, 31, 10, 21, 22, 11, 33, 44, 43, 32], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37  …  133, 137, 141, 145, 149, 153, 157, 161, 165, 169]), [1, 10, 1, 1, 2, 2, 3, 3, 4, 4  …  6, 6, 7, 7, 8, 8, 9, 9, 10, 10]), StaticArraysCore.SVector{3, Float64}[[7.9e-5, 0.0, 0.0], [8.82e-5, 0.0, 0.0], [9.740000000000001e-5, 0.0, 0.0], [0.00010660000000000002, 0.0, 0.0], [0.00011580000000000002, 0.0, 0.0], [0.00012500000000000003, 0.0, 0.0], [0.00013420000000000004, 0.0, 0.0], [0.00014340000000000004, 0.0, 0.0], [0.00015260000000000005, 0.0, 0.0], [0.00016180000000000006, 0.0, 0.0]  …  [8.82e-5, 0.007035, 1.0], [9.740000000000001e-5, 0.007035, 1.0], [0.00010660000000000002, 0.007035, 1.0], [0.00011580000000000002, 0.007035, 1.0], [0.00012500000000000003, 0.007035, 1.0], [0.00013420000000000004, 0.007035, 1.0], [0.00014340000000000004, 0.007035, 1.0], [0.00015260000000000005, 0.007035, 1.0], [0.00016180000000000006, 0.007035, 1.0], [0.00017100000000000006, 0.007035, 1.0]], nothing, [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9  …  -33, -34, -35, -36, -37, -38, -39, -40, -41, -42], nothing, nothing, Jutul.MeshEntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 42)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 18)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 10)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; Jutul.EntityTags{Int64}({</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, 9)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), false), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    BoundaryFaces() =&gt; 42</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    HalfFaces() =&gt; 18</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 10</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Faces() =&gt; 9</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}(:neighbors =&gt; ([1 2 … 8 9; 2 3 … 9 10], Faces()), :areas =&gt; ([0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035, 0.007035], Faces()), :normals =&gt; ([1.0 1.0 … 1.0 1.0; 0.0 0.0 … 0.0 0.0; 0.0 0.0 … 0.0 0.0], Faces()), :face_centroids =&gt; ([8.82e-5 9.740000000000001e-5 … 0.00015260000000000005 0.00016180000000000008; 0.0035175 0.0035175 … 0.0035175 0.0035175; 0.5 0.5 … 0.5 0.5], Faces()), :cell_centroids =&gt; ([8.360000000000001e-5 9.280000000000005e-5 … 0.0001572000000000001 0.00016640000000000006; 0.0035175000000000002 0.0035175000000000002 … 0.0035175000000000002 0.0035175; 0.5000000000000001 0.5000000000000002 … 0.5 0.5], Cells()), :volumes =&gt; ([6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Cells()), :half_face_cells =&gt; ([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10], HalfFaces()), :half_face_faces =&gt; ([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], HalfFaces()), :boundary_areas =&gt; ([0.007035, 0.007035, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6, 9.200000000000007e-6  …  6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8, 6.472200000000004e-8], BoundaryFaces()), :boundary_centroids =&gt; ([7.9e-5 0.00017100000000000006 … 0.00016640000000000006 0.00016640000000000006; 0.0035175 0.0035175 … 0.0035175000000000002 0.0035175000000000002; 0.5 0.5 … 0.0 1.0], BoundaryFaces())…)), OrderedCollections.OrderedDict{Symbol, Any}(:Voltage =&gt; Voltage(), :ParticleConcentration =&gt; BattMo.ParticleConcentration(), :SurfaceConcentration =&gt; BattMo.SurfaceConcentration()), OrderedCollections.OrderedDict{Symbol, Any}(:Charge =&gt; Charge(), :OpenCircuitPotential =&gt; BattMo.OpenCircuitPotential(), :ReactionRateConstant =&gt; BattMo.ReactionRateConstant(), :SolidDiffFlux =&gt; BattMo.SolidDiffFlux(), :DiffusionCoefficient =&gt; BattMo.DiffusionCoefficient()), OrderedCollections.OrderedDict{Symbol, Any}(:ECTransmissibilities =&gt; BattMo.ECTransmissibilities(), :Volume =&gt; BattMo.Volume(), :Temperature =&gt; Temperature(), :Conductivity =&gt; BattMo.Conductivity(), :VolumeFraction =&gt; BattMo.VolumeFraction()), OrderedCollections.OrderedDict{Symbol, Any}(:charge_conservation =&gt; ConservationLaw{:Charge, PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}, Jutul.DefaultFlux, 1}(PotentialFlow{:generic, Vector{TPFA{Int64}}, Vector{SPU{Int64}}, @NamedTuple{cells::Vector{Int64}, faces::Vector{Int64}, face_pos::Vector{Int64}, face_sign::Vector{Int64}}}(TPFA{Int64}[TPFA{Int64}(1, 2, 1), TPFA{Int64}(2, 3, 1), TPFA{Int64}(3, 4, 1), TPFA{Int64}(4, 5, 1), TPFA{Int64}(5, 6, 1), TPFA{Int64}(6, 7, 1), TPFA{Int64}(7, 8, 1), TPFA{Int64}(8, 9, 1), TPFA{Int64}(9, 10, 1)], SPU{Int64}[SPU{Int64}(1, 2), SPU{Int64}(2, 3), SPU{Int64}(3, 4), SPU{Int64}(4, 5), SPU{Int64}(5, 6), SPU{Int64}(6, 7), SPU{Int64}(7, 8), SPU{Int64}(8, 9), SPU{Int64}(9, 10)], (cells = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9], faces = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], face_pos = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19], face_sign = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1])), Jutul.DefaultFlux()), :mass_conservation =&gt; SolidMassCons(), :solid_diffusion_bc =&gt; BattMo.SolidDiffusionBc()), [:Voltage, :ParticleConcentration, :SurfaceConcentration, :Charge, :OpenCircuitPotential, :Temperature, :ReactionRateConstant, :DiffusionCoefficient], OrderedCollections.OrderedDict{Symbol, Any}()), :Control =&gt; SimulationModel{CurrentAndVoltageDomain, CurrentAndVoltageSystem{BattMo.CCPolicy{Float64}}, FullyImplicitFormulation, DefaultContext}(CurrentAndVoltageDomain(), CurrentAndVoltageSystem{BattMo.CCPolicy{Float64}}(BattMo.CCPolicy{Float64}(0, &quot;discharging&quot;, 0.06357915909518233, 0.0, 2.25, 4.1, true, BattMo.var&quot;#cFun#113&quot;{Float64}(10.0, Core.Box(0.06357915909518233)), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;charging&quot; =&gt; 0.0001</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    &quot;discharging&quot; =&gt; 0.0001</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">})), DefaultContext(EquationMajorLayout(false), 9223372036854775807, 1), FullyImplicitFormulation(), DataDomain{CurrentAndVoltageDomain, Dict{JutulEntity, Int64}, OrderedCollections.OrderedDict{Symbol, Any}}(CurrentAndVoltageDomain(), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    Cells() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    NoEntity() =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, OrderedCollections.OrderedDict{Symbol, Any}()), OrderedCollections.OrderedDict{Symbol, Any}(:Voltage =&gt; VoltageVar(), :Current =&gt; CurrentVar()), OrderedCollections.OrderedDict{Symbol, Any}(), OrderedCollections.OrderedDict{Symbol, Any}(:ImaxDischarge =&gt; BattMo.ImaxDischarge(), :ImaxCharge =&gt; BattMo.ImaxCharge()), OrderedCollections.OrderedDict{Symbol, Any}(:charge_conservation =&gt; BattMo.CurrentEquation(), :control =&gt; BattMo.ControlEquation()), [:Voltage, :Current, :Controller], OrderedCollections.OrderedDict{Symbol, Any}()))), Jutul.CrossTermPair[Jutul.CrossTermPair(:Elyte, :NeAm, :charge_conservation, :charge_conservation, ButlerVolmerActmatToElyteCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:Elyte, :NeAm, :mass_conservation, :mass_conservation, ButlerVolmerActmatToElyteCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:NeAm, :Elyte, :charge_conservation, :charge_conservation, ButlerVolmerElyteToActmatCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:NeAm, :Elyte, :solid_diffusion_bc, :solid_diffusion_bc, ButlerVolmerElyteToActmatCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:Elyte, :PeAm, :charge_conservation, :charge_conservation, ButlerVolmerActmatToElyteCT{Vector{Int64}}([14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:Elyte, :PeAm, :mass_conservation, :mass_conservation, ButlerVolmerActmatToElyteCT{Vector{Int64}}([14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])), Jutul.CrossTermPair(:PeAm, :Elyte, :charge_conservation, :charge_conservation, ButlerVolmerElyteToActmatCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23])), Jutul.CrossTermPair(:PeAm, :Elyte, :solid_diffusion_bc, :solid_diffusion_bc, ButlerVolmerElyteToActmatCT{Vector{Int64}}([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23])), Jutul.CrossTermPair(:PeAm, :Control, :charge_conservation, :charge_conservation, TPFAInterfaceFluxCT{Vector{Int64}, Vector{Float64}}([10], [1], [9.343401568868082])), Jutul.CrossTermPair(:Control, :PeAm, :charge_conservation, :charge_conservation, AccumulatorInterfaceFluxCT{Vector{Int64}, Vector{Float64}}(1, [10], [9.343401568868082])), Jutul.CrossTermPair(:Control, :PeAm, :control, :control, AccumulatorInterfaceFluxCT{Vector{Int64}, Vector{Float64}}(1, [10], [0.0]))], nothing, DefaultContext(EquationMajorLayout(false), 9223372036854775807, 1), nothing, false, {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :Elyte =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :NeAm =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :Control =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    :PeAm =&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}), JutulStorage{@NamedTuple{NeAm::JutulStorage{@NamedTuple{state0::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, state::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, parameters::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, ParticleConcentration::BattMo.ParticleConcentration, SurfaceConcentration::BattMo.SurfaceConcentration}, secondary_variables::@NamedTuple{Charge::Charge, OpenCircuitPotential::BattMo.OpenCircuitPotential, ReactionRateConstant::BattMo.ReactionRateConstant, SolidDiffFlux::BattMo.SolidDiffFlux, DiffusionCoefficient::BattMo.DiffusionCoefficient}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, Conductivity::BattMo.Conductivity, VolumeFraction::BattMo.VolumeFraction, BoundaryVoltage::BoundaryPotential{:Voltage}}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, mass_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{10, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, solid_diffusion_bc::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, solid_diffusion_bc::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, ParticleConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, SurfaceConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}, Elyte::JutulStorage{@NamedTuple{state0::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, Diffusivity::Vector{Float64}, Concentration::Vector{Float64}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{Float64}}, state::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Diffusivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Concentration::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, parameters::@NamedTuple{BruggemanCoefficient::Vector{Float64}, Volume::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, ECTransmissibilities::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Concentration::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, Concentration::Concentration}, secondary_variables::@NamedTuple{Conductivity::BattMo.Conductivity, Diffusivity::BattMo.Diffusivity, DmuDc::DmuDc, ChemCoef::ChemCoef, Charge::Charge, Mass::Mass}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, BruggemanCoefficient::BattMo.BruggemanCoefficient, VolumeFraction::BattMo.VolumeFraction}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, mass_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, Concentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}, PeAm::JutulStorage{@NamedTuple{state0::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, state::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, parameters::@NamedTuple{Volume::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, ParticleConcentration::BattMo.ParticleConcentration, SurfaceConcentration::BattMo.SurfaceConcentration}, secondary_variables::@NamedTuple{Charge::Charge, OpenCircuitPotential::BattMo.OpenCircuitPotential, ReactionRateConstant::BattMo.ReactionRateConstant, SolidDiffFlux::BattMo.SolidDiffFlux, DiffusionCoefficient::BattMo.DiffusionCoefficient}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, Conductivity::BattMo.Conductivity, VolumeFraction::BattMo.VolumeFraction}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, mass_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{10, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, solid_diffusion_bc::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, solid_diffusion_bc::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, ParticleConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, SurfaceConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}, Control::JutulStorage{@NamedTuple{state0::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{Float64}, Current::Vector{Float64}, ImaxCharge::Vector{Float64}}, state::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Current::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ImaxCharge::Vector{Float64}}, parameters::@NamedTuple{ImaxDischarge::Vector{Float64}, ImaxCharge::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Current::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::VoltageVar, Current::CurrentVar}, secondary_variables::@NamedTuple{}, parameters::@NamedTuple{ImaxDischarge::BattMo.ImaxDischarge, ImaxCharge::BattMo.ImaxCharge}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, control::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, control::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, Current::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}, state::JutulStorage{@NamedTuple{NeAm::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, Elyte::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Diffusivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Concentration::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, PeAm::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, Control::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Current::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ImaxCharge::Vector{Float64}}}}, state0::JutulStorage{@NamedTuple{NeAm::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, Elyte::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, Diffusivity::Vector{Float64}, Concentration::Vector{Float64}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{Float64}}, PeAm::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, Control::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{Float64}, Current::Vector{Float64}, ImaxCharge::Vector{Float64}}}}, cross_terms::Vector{Any}, LinearizedSystem::LinearizedSystem{EquationMajorLayout, SparseArrays.SparseMatrixCSC{Float64, Int64}, Vector{Float64}, Vector{Float64}, Vector{Float64}}, multi_model_maps::@NamedTuple{offset_map::Vector{Int64}}, eq_maps::Jutul.MutableWrapper, recorder::ProgressRecorder}}((NeAm = JutulStorage{@NamedTuple{state0::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, state::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, parameters::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, ParticleConcentration::BattMo.ParticleConcentration, SurfaceConcentration::BattMo.SurfaceConcentration}, secondary_variables::@NamedTuple{Charge::Charge, OpenCircuitPotential::BattMo.OpenCircuitPotential, ReactionRateConstant::BattMo.ReactionRateConstant, SolidDiffFlux::BattMo.SolidDiffFlux, DiffusionCoefficient::BattMo.DiffusionCoefficient}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, Conductivity::BattMo.Conductivity, VolumeFraction::BattMo.VolumeFraction, BoundaryVoltage::BoundaryPotential{:Voltage}}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, mass_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{10, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, solid_diffusion_bc::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, solid_diffusion_bc::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, ParticleConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, SurfaceConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}((state0 = (BoundaryVoltage = [0.0], Volume = [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8], SurfaceConcentration = [42.81532071735261, 42.769160520664606, 42.677625393676465, 42.54202247463053, 42.36345042067212, 42.143948467139936, 41.88555711574829, 41.591614660334244, 41.26579601016947, 40.90854902579595], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001], Conductivity = [125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838], ECTransmissibilities = [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294], OpenCircuitPotential = [1.2007500284715267, 1.2008428332981653, 1.2010268641776023, 1.201299493115447, 1.2016585112674305, 1.2020998187618956, 1.202619313181144, 1.2032102829034097, 1.2038653395434098, 1.2045835826799383], ReactionRateConstant = [1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11], DiffusionCoefficient = [3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14], Charge = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], Voltage = [-2.1173232928168587e-7, -5.922968748222838e-7, -9.299979381970803e-7, -1.2249073585544645e-6, -1.4771306021983557e-6, -1.6868062007057387e-6, -1.8541035993136588e-6, -1.9792213629153e-6, -2.0623828071074753e-6, -2.1038310525590007e-6], ParticleConcentration = [2191.999182857426 2189.2507271880345 … 2103.6815859459252 2084.1211330478104; 2148.787956795936 2146.1091605829815 … 2062.6912135604107 2043.6189249103516; … ; 642.017370776268 641.3896103895692 … 621.6591049969663 617.1112814419341; 256.43869791599593 256.21013243352434 … 248.97887089194455 247.30227501930904], SolidDiffFlux = [3.123655138693319e-17 3.118619592635258e-17 … 2.963113963875118e-17 2.927825523787915e-17; 2.4981707268577154e-16 2.4941942971595423e-16 … 2.3713430878979225e-16 2.3434527599351663e-16; … ; 1.5888510033663647e-14 1.586991972777687e-14 … 1.5289683749643333e-14 1.5156768065786096e-14; 2.25769106602225e-14 2.2553536474036587e-14 … 2.182166427360722e-14 2.1653544365963574e-14]), state = (BoundaryVoltage = [0.0], Volume = [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8], SurfaceConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(42.81532071735261,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.769160520664606,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.677625393676465,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.54202247463053,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.36345042067212,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.143948467139936,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(41.88555711574829,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(41.591614660334244,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(41.26579601016947,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(40.90854902579595,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0)], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001], Conductivity = [125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838], ECTransmissibilities = [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294], OpenCircuitPotential = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(1.2007500284715267,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2008428332981653,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2010268641776023,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.201299493115447,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2016585112674305,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2020998187618956,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.202619313181144,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2032102829034097,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2038653395434098,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2045835826799383,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234)], ReactionRateConstant = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], DiffusionCoefficient = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], Charge = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], Voltage = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-2.1173232928168587e-7,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-5.922968748222838e-7,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-9.299979381970803e-7,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.2249073585544645e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.4771306021983557e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.6868062007057387e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.8541035993136588e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.9792213629153e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-2.0623828071074753e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-2.1038310525590007e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], ParticleConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(2191.999182857426,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2189.2507271880345,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(2103.6815859459252,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2084.1211330478104,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); Dual{Cells()}(2148.787956795936,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2146.1091605829815,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(2062.6912135604107,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2043.6189249103516,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); … ; Dual{Cells()}(642.017370776268,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(641.3896103895692,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) … Dual{Cells()}(621.6591049969663,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(617.1112814419341,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0); Dual{Cells()}(256.43869791599593,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(256.21013243352434,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) … Dual{Cells()}(248.97887089194455,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(247.30227501930904,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0)], SolidDiffFlux = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(3.123655138693319e-17,-0.0,7.228804695910114e-19,-7.228804695910114e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(3.118619592635258e-17,-0.0,7.228804695910114e-19,-7.228804695910114e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) … Dual{Cells()}(2.963113963875118e-17,-0.0,7.228804695910114e-19,-7.228804695910114e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(2.927825523787915e-17,-0.0,7.228804695910114e-19,-7.228804695910114e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0); Dual{Cells()}(2.4981707268577154e-16,-0.0,-0.0,2.8915218783640456e-18,-2.8915218783640456e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(2.4941942971595423e-16,-0.0,-0.0,2.8915218783640456e-18,-2.8915218783640456e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) … Dual{Cells()}(2.3713430878979225e-16,-0.0,-0.0,2.8915218783640456e-18,-2.8915218783640456e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(2.3434527599351663e-16,-0.0,-0.0,2.8915218783640456e-18,-2.8915218783640456e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0); … ; Dual{Cells()}(1.5888510033663647e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,4.626435005382473e-17,-4.626435005382473e-17,-0.0,-0.0) Dual{Cells()}(1.586991972777687e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,4.626435005382473e-17,-4.626435005382473e-17,-0.0,-0.0) … Dual{Cells()}(1.5289683749643333e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,4.626435005382473e-17,-4.626435005382473e-17,-0.0,-0.0) Dual{Cells()}(1.5156768065786096e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,4.626435005382473e-17,-4.626435005382473e-17,-0.0,-0.0); Dual{Cells()}(2.25769106602225e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,5.855331803687191e-17,-5.855331803687191e-17,-0.0) Dual{Cells()}(2.2553536474036587e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,5.855331803687191e-17,-5.855331803687191e-17,-0.0) … Dual{Cells()}(2.182166427360722e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,5.855331803687191e-17,-5.855331803687191e-17,-0.0) Dual{Cells()}(2.1653544365963574e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,5.855331803687191e-17,-5.855331803687191e-17,-0.0)]), parameters = (BoundaryVoltage = [0.0], Volume = [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001], Conductivity = [125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838], ECTransmissibilities = [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294]), primary_variables = (Voltage = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-2.1173232928168587e-7,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-5.922968748222838e-7,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-9.299979381970803e-7,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.2249073585544645e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.4771306021983557e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.6868062007057387e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.8541035993136588e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.9792213629153e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-2.0623828071074753e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-2.1038310525590007e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], ParticleConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(2191.999182857426,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2189.2507271880345,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(2103.6815859459252,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2084.1211330478104,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); Dual{Cells()}(2148.787956795936,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2146.1091605829815,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(2062.6912135604107,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2043.6189249103516,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); … ; Dual{Cells()}(642.017370776268,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(641.3896103895692,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) … Dual{Cells()}(621.6591049969663,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(617.1112814419341,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0); Dual{Cells()}(256.43869791599593,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(256.21013243352434,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) … Dual{Cells()}(248.97887089194455,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(247.30227501930904,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0)], SurfaceConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(42.81532071735261,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.769160520664606,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.677625393676465,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.54202247463053,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.36345042067212,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.143948467139936,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(41.88555711574829,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(41.591614660334244,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(41.26579601016947,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(40.90854902579595,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0)]), variable_definitions = JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, ParticleConcentration::BattMo.ParticleConcentration, SurfaceConcentration::BattMo.SurfaceConcentration}, secondary_variables::@NamedTuple{Charge::Charge, OpenCircuitPotential::BattMo.OpenCircuitPotential, ReactionRateConstant::BattMo.ReactionRateConstant, SolidDiffFlux::BattMo.SolidDiffFlux, DiffusionCoefficient::BattMo.DiffusionCoefficient}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, Conductivity::BattMo.Conductivity, VolumeFraction::BattMo.VolumeFraction, BoundaryVoltage::BoundaryPotential{:Voltage}}, extra_variable_fields::Vector{Symbol}}}((primary_variables = (Voltage = Voltage(), ParticleConcentration = BattMo.ParticleConcentration(), SurfaceConcentration = BattMo.SurfaceConcentration()), secondary_variables = (Charge = Charge(), OpenCircuitPotential = BattMo.OpenCircuitPotential(), ReactionRateConstant = BattMo.ReactionRateConstant(), SolidDiffFlux = BattMo.SolidDiffFlux(), DiffusionCoefficient = BattMo.DiffusionCoefficient()), parameters = (ECTransmissibilities = BattMo.ECTransmissibilities(), Volume = BattMo.Volume(), Temperature = Temperature(), Conductivity = BattMo.Conductivity(), VolumeFraction = BattMo.VolumeFraction(), BoundaryVoltage = BoundaryPotential{:Voltage}()), extra_variable_fields = Symbol[])), equations = (charge_conservation = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-0.006441040744744157,450421.2430390257,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(0.057138118552992674,-150140.4143463419,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(-0.006223056746020895,-150140.41434634148,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(-0.006223056746020895,150140.41434634148,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], [1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 29], [1, 2, 1, 2, 3, 2, 3, 4, 3, 4  …  7, 8, 7, 8, 9, 8, 9, 10, 9, 10], [1 16 … 130 145; 159 174 … 288 303; … ; 1581 1596 … 1710 1725; 1739 1754 … 1868 1883], [1, 4, 7, 10, 13, 16, 19, 22, 25, 28], 10, 10, Jutul.TrivialGlobalMap()),), mass_conservation = (Cells = Jutul.GenericAutoDiffCache{10, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(4.930380657631324e-32,0.0,9.917209519250188e-19,-7.228804695910114e-19,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(-1.5407439555097887e-31,0.0,9.917209519250188e-19,-7.228804695910114e-19,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(6.162975822039155e-32,0.0,9.917209519250188e-19,-7.228804695910114e-19,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(-1.0477058897466563e-31,0.0,9.917209519250188e-19,-7.228804695910114e-19,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); Dual{Cells()}(-4.437342591868191e-31,0.0,-7.228804695910114e-19,5.4962857242931095e-18,-2.8915218783640456e-18,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2.465190328815662e-31,0.0,-7.228804695910114e-19,5.4962857242931095e-18,-2.8915218783640456e-18,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(-1.9721522630525295e-31,0.0,-7.228804695910114e-19,5.4962857242931095e-18,-2.8915218783640456e-18,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2.9582283945787943e-31,0.0,-7.228804695910114e-19,5.4962857242931095e-18,-2.8915218783640456e-18,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); … ; Dual{Cells()}(6.310887241768095e-30,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-4.626435005382473e-17,1.6315605275717627e-16,-5.855331803687191e-17,0.0) Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-4.626435005382473e-17,1.6315605275717627e-16,-5.855331803687191e-17,0.0) … Dual{Cells()}(3.1554436208840472e-30,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-4.626435005382473e-17,1.6315605275717627e-16,-5.855331803687191e-17,0.0) Dual{Cells()}(-9.466330862652142e-30,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-4.626435005382473e-17,1.6315605275717627e-16,-5.855331803687191e-17,0.0); Dual{Cells()}(-6.310887241768095e-30,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-5.855331803687191e-17,2.759851826675902e-16,-1.4457609391820227e-16) Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-5.855331803687191e-17,2.759851826675902e-16,-1.4457609391820227e-16) … Dual{Cells()}(-6.310887241768095e-30,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-5.855331803687191e-17,2.759851826675902e-16,-1.4457609391820227e-16) Dual{Cells()}(6.310887241768095e-30,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-5.855331803687191e-17,2.759851826675902e-16,-1.4457609391820227e-16)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [3 19 … 131 146; 161 177 … 289 304; … ; 1592 1608 … 1720 1735; 1750 1766 … 1878 1893], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 10, Jutul.TrivialGlobalMap()),), solid_diffusion_bc = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(3.0884833444994604e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.4457609391820227e-16,-1.4457609391820227e-16) Dual{Cells()}(3.085846200126598e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.4457609391820227e-16,-1.4457609391820227e-16) … Dual{Cells()}(3.003034502214609e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.4457609391820227e-16,-1.4457609391820227e-16) Dual{Cells()}(2.9839598713365855e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.4457609391820227e-16,-1.4457609391820227e-16)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [13 29 … 141 156; 171 187 … 299 314; … ; 1593 1609 … 1721 1736; 1751 1767 … 1879 1894], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 10, Jutul.TrivialGlobalMap()),)), views = (equations = JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, solid_diffusion_bc::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}((charge_conservation = [2.765458366645046e-9 2.7863353291301962e-9 … 3.563921535491843e-9 3.779754377541966e-9], mass_conservation = [4.930380657631324e-32 -1.5407439555097887e-31 … 6.162975822039155e-32 -1.0477058897466563e-31; -4.437342591868191e-31 2.465190328815662e-31 … -1.9721522630525295e-31 2.9582283945787943e-31; … ; 6.310887241768095e-30 0.0 … 3.1554436208840472e-30 -9.466330862652142e-30; -6.310887241768095e-30 0.0 … -6.310887241768095e-30 6.310887241768095e-30], solid_diffusion_bc = [-1.3260391420927493e-20 -1.3360496569757267e-20 … -1.7089027348781897e-20 -1.812394765865577e-20])), primary_variables = JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, ParticleConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, SurfaceConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}((Voltage = [-1.7938292191854823e-20 -1.0749579247864948e-13 … -2.5040897192166665e-12 -2.6903185339930464e-12], ParticleConcentration = [9.735835464636837e-7 9.146079392935884e-7 … -1.151423484837017e-6 -1.6866655971719218e-6; 1.3356611533040058e-6 1.2547523999631866e-6 … -1.5796398726699225e-6 -2.3139392113352756e-6; … ; 0.0002922322722276379 0.00027453003178427437 … -0.0003456129296066977 -0.0005062718784753237; 0.0007191280572108599 0.0006755662094169467 … -0.0008504877054390117 -0.0012458388309755572], SurfaceConcentration = [0.0012544087624240473 0.0011784217903412222 … -0.0014835455513036615 -0.002173175042335325]))))), Elyte = JutulStorage{@NamedTuple{state0::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, Diffusivity::Vector{Float64}, Concentration::Vector{Float64}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{Float64}}, state::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Diffusivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Concentration::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, parameters::@NamedTuple{BruggemanCoefficient::Vector{Float64}, Volume::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, ECTransmissibilities::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Concentration::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, Concentration::Concentration}, secondary_variables::@NamedTuple{Conductivity::BattMo.Conductivity, Diffusivity::BattMo.Diffusivity, DmuDc::DmuDc, ChemCoef::ChemCoef, Charge::Charge, Mass::Mass}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, BruggemanCoefficient::BattMo.BruggemanCoefficient, VolumeFraction::BattMo.VolumeFraction}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, mass_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, Concentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}((state0 = (Volume = [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8  …  6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Mass = [2.1945849665328002e-5, 2.189294310654668e-5, 2.1788159652078428e-5, 2.163350235673774e-5, 2.143183995010795e-5, 2.118675614738006e-5, 2.090236453736898e-5, 2.0583107312917517e-5, 2.0233552882849377e-5, 1.9858212251584003e-5  …  2.6962942774499457e-5, 2.6195126142548415e-5, 2.5488520319982227e-5, 2.4829365185367293e-5, 2.4219220858580352e-5, 2.3680355645565634e-5, 2.3326590308752604e-5, 2.331792868915411e-5, 2.3312359983804338e-5, 2.3309619161914075e-5], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15  …  298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993  …  0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28], Conductivity = [0.1157449730305673, 0.11606652775731731, 0.1167029139425651, 0.11764086106148108, 0.11886092094663214, 0.12033805911527962, 0.12204250420571466, 0.12394081665202009, 0.12599712264463436, 0.12817439036063968  …  0.12223210515543873, 0.12470256060591244, 0.1268727830634557, 0.1287974170887019, 0.13048445743835868, 0.13189248187227626, 0.13277231764761704, 0.1327934003584807, 0.13280694303359453, 0.1328136051239624], ECTransmissibilities = [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294, 1119.628647214855  …  886.764705882349, 764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], ChemCoef = [2.49924314084208e-6, 2.512242824584917e-6, 2.53816541298458e-6, 2.5768558816166825e-6, 2.6280789286046275e-6, 2.691518103344934e-6, 2.766778953977508e-6, 2.8533969043610383e-6, 2.9508507852345443e-6, 3.058580270962546e-6  …  3.1264347161128786e-6, 3.2831160941939524e-6, 3.4328529896996194e-6, 3.577444465080222e-6, 3.715608771309762e-6, 3.8411669458111565e-6, 3.925433617396579e-6, 3.927515294236022e-6, 3.928854109256943e-6, 3.929513185992811e-6], Charge = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0  …  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], Voltage = [-1.3333801662120677, -1.3335186267408705, -1.3337939932604224, -1.3342032330881073, -1.334741981489335, -1.3354047472456956, -1.3361851735397174, -1.3370763289440977, -1.33807101353097, -1.339162048925923  …  -1.3432461884978053, -1.3449585405270637, -1.3465874448838475, -1.3481553488622278, -1.3496504395542033, -1.35100748903293, -1.3519175094983524, -1.3519389686800418, -1.3519527744242112, -1.3519595741357189], Diffusivity = [9.74683587046272e-12, 9.807991206671544e-12, 9.930651571839526e-12, 1.0115434063765826e-11, 1.0363074303412139e-11, 1.0674239728143869e-11, 1.1049344655182878e-11, 1.1488396906887688e-11, 1.1990902541164651e-11, 1.2555834192377068e-11  …  1.3319680584303935e-11, 1.4193780294292571e-11, 1.5039529795914494e-11, 1.586420095207016e-11, 1.665828011750182e-11, 1.7384156750658177e-11, 1.7873223453154592e-11, 1.7885322346624746e-11, 1.7893104078844682e-11, 1.7896935018421153e-11], Concentration = [1762.442803362365, 1758.19394605236, 1749.7789223437649, 1737.3585949781148, 1721.1633479180332, 1701.4809846955745, 1678.641862308231, 1653.0027275179805, 1624.9304633289887, 1594.7873426719511  …  1487.8437655610273, 1445.4748298518714, 1406.4835714938083, 1370.1106923990997, 1336.4422816364233, 1306.7071279342865, 1287.1859816242977, 1286.7080242727204, 1286.4007372081624, 1286.249495750732], BruggemanCoefficient = [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5  …  1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5], DmuDc = [1.4065460875513616, 1.4099451514824881, 1.4167258491615136, 1.4268539821127804, 1.4402799319431263, 1.456940778004591, 1.4767634986736697, 1.4996690497447613, 1.5255773004118334, 1.5544122801031732  …  1.666140684245592, 1.7149776519155477, 1.7625211412668826, 1.8093114982276866, 1.854892698072227, 1.8971022477862027, 1.9258732343201848, 1.9265886143855804, 1.9270488253780043, 1.9272754141338038]), state = (Volume = [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8  …  6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Mass = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(2.1945849665328002e-5,0.0,1.245195e-8), Dual{Cells()}(2.189294310654668e-5,0.0,1.2451949999999999e-8), Dual{Cells()}(2.1788159652078428e-5,0.0,1.2451949999999992e-8), Dual{Cells()}(2.163350235673774e-5,0.0,1.2451950000000002e-8), Dual{Cells()}(2.143183995010795e-5,0.0,1.2451949999999999e-8), Dual{Cells()}(2.118675614738006e-5,0.0,1.2451950000000002e-8), Dual{Cells()}(2.090236453736898e-5,0.0,1.2451950000000002e-8), Dual{Cells()}(2.0583107312917517e-5,0.0,1.2451950000000002e-8), Dual{Cells()}(2.0233552882849377e-5,0.0,1.2451949999999985e-8), Dual{Cells()}(1.9858212251584003e-5,0.0,1.2451950000000002e-8)  …  Dual{Cells()}(2.6962942774499457e-5,0.0,1.812216000000002e-8), Dual{Cells()}(2.6195126142548415e-5,0.0,1.8122160000000016e-8), Dual{Cells()}(2.5488520319982227e-5,0.0,1.8122159999999996e-8), Dual{Cells()}(2.4829365185367293e-5,0.0,1.8122160000000016e-8), Dual{Cells()}(2.4219220858580352e-5,0.0,1.812216000000002e-8), Dual{Cells()}(2.3680355645565634e-5,0.0,1.8122160000000016e-8), Dual{Cells()}(2.3326590308752604e-5,0.0,1.8122160000000016e-8), Dual{Cells()}(2.331792868915411e-5,0.0,1.812215999999999e-8), Dual{Cells()}(2.3312359983804338e-5,0.0,1.812216000000005e-8), Dual{Cells()}(2.3309619161914075e-5,0.0,1.812215999999999e-8)], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15  …  298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993  …  0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28], Conductivity = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.1157449730305673,0.0,-7.569708961683358e-5), Dual{Cells()}(0.11606652775731731,0.0,-7.566289385672752e-5), Dual{Cells()}(0.1167029139425651,0.0,-7.558481530844872e-5), Dual{Cells()}(0.11764086106148108,0.0,-7.54443722630224e-5), Dual{Cells()}(0.11886092094663214,0.0,-7.521594685776246e-5), Dual{Cells()}(0.12033805911527962,0.0,-7.486897982287601e-5), Dual{Cells()}(0.12204250420571466,0.0,-7.437040206809859e-5), Dual{Cells()}(0.12394081665202009,0.0,-7.368699738746046e-5), Dual{Cells()}(0.12599712264463436,0.0,-7.278742672309706e-5), Dual{Cells()}(0.12817439036063968,0.0,-7.16437401368234e-5)  …  Dual{Cells()}(0.12223210515543873,0.0,-5.95758371767477e-5), Dual{Cells()}(0.12470256060591244,0.0,-5.6982530486228713e-5), Dual{Cells()}(0.1268727830634557,0.0,-5.428591168201883e-5), Dual{Cells()}(0.1287974170887019,0.0,-5.149783786383138e-5), Dual{Cells()}(0.13048445743835868,0.0,-4.8678668929459585e-5), Dual{Cells()}(0.13189248187227626,0.0,-4.5995178350362036e-5), Dual{Cells()}(0.13277231764761704,0.0,-4.4133316323389085e-5), Dual{Cells()}(0.1327934003584807,0.0,-4.408672622169074e-5), Dual{Cells()}(0.13280694303359453,0.0,-4.405674720033449e-5), Dual{Cells()}(0.1328136051239624,0.0,-4.404198472484535e-5)], ECTransmissibilities = [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294, 1119.628647214855  …  886.764705882349, 764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], ChemCoef = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(2.49924314084208e-6,0.0,-3.0525586751447265e-9), Dual{Cells()}(2.512242824584917e-6,0.0,-3.0665891075633623e-9), Dual{Cells()}(2.53816541298458e-6,0.0,-3.094453578020248e-9), Dual{Cells()}(2.5768558816166825e-6,0.0,-3.135769122273897e-9), Dual{Cells()}(2.6280789286046275e-6,0.0,-3.1899851734599384e-9), Dual{Cells()}(2.691518103344934e-6,0.0,-3.256410539310913e-9), Dual{Cells()}(2.766778953977508e-6,0.0,-3.3342476368009096e-9), Dual{Cells()}(2.8533969043610383e-6,0.0,-3.422630812438334e-9), Dual{Cells()}(2.9508507852345443e-6,0.0,-3.5206663631830405e-9), Dual{Cells()}(3.058580270962546e-6,0.0,-3.6274701917503455e-9)  …  Dual{Cells()}(3.1264347161128786e-6,0.0,-3.625141186424429e-9), Dual{Cells()}(3.2831160941939524e-6,0.0,-3.771518184926822e-9), Dual{Cells()}(3.4328529896996194e-6,0.0,-3.909572424853449e-9), Dual{Cells()}(3.577444465080222e-6,0.0,-4.0414532782613454e-9), Dual{Cells()}(3.715608771309762e-6,0.0,-4.166372815332034e-9), Dual{Cells()}(3.8411669458111565e-6,0.0,-4.279116825148593e-9), Dual{Cells()}(3.925433617396579e-6,0.0,-4.3544324364930995e-9), Dual{Cells()}(3.927515294236022e-6,0.0,-4.356289799598029e-9), Dual{Cells()}(3.928854109256943e-6,0.0,-4.3574842714331276e-9), Dual{Cells()}(3.929513185992811e-6,0.0,-4.358072268154327e-9)], Charge = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0)  …  Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0)], Voltage = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(-1.3333801662120677,1.0,0.0), Dual{Cells()}(-1.3335186267408705,1.0,0.0), Dual{Cells()}(-1.3337939932604224,1.0,0.0), Dual{Cells()}(-1.3342032330881073,1.0,0.0), Dual{Cells()}(-1.334741981489335,1.0,0.0), Dual{Cells()}(-1.3354047472456956,1.0,0.0), Dual{Cells()}(-1.3361851735397174,1.0,0.0), Dual{Cells()}(-1.3370763289440977,1.0,0.0), Dual{Cells()}(-1.33807101353097,1.0,0.0), Dual{Cells()}(-1.339162048925923,1.0,0.0)  …  Dual{Cells()}(-1.3432461884978053,1.0,0.0), Dual{Cells()}(-1.3449585405270637,1.0,0.0), Dual{Cells()}(-1.3465874448838475,1.0,0.0), Dual{Cells()}(-1.3481553488622278,1.0,0.0), Dual{Cells()}(-1.3496504395542033,1.0,0.0), Dual{Cells()}(-1.35100748903293,1.0,0.0), Dual{Cells()}(-1.3519175094983524,1.0,0.0), Dual{Cells()}(-1.3519389686800418,1.0,0.0), Dual{Cells()}(-1.3519527744242112,1.0,0.0), Dual{Cells()}(-1.3519595741357189,1.0,0.0)], Diffusivity = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(9.74683587046272e-12,0.0,-1.4331964731875067e-14), Dual{Cells()}(9.807991206671544e-12,0.0,-1.4454756848449344e-14), Dual{Cells()}(9.930651571839526e-12,0.0,-1.4697951311527192e-14), Dual{Cells()}(1.0115434063765826e-11,0.0,-1.5056899182565878e-14), Dual{Cells()}(1.0363074303412139e-11,0.0,-1.5524942357437354e-14), Dual{Cells()}(1.0674239728143869e-11,0.0,-1.6093763304560763e-14), Dual{Cells()}(1.1049344655182878e-11,0.0,-1.6753814695798794e-14), Dual{Cells()}(1.1488396906887688e-11,0.0,-1.7494786537949018e-14), Dual{Cells()}(1.1990902541164651e-11,0.0,-1.830607590007502e-14), Dual{Cells()}(1.2555834192377068e-11,0.0,-1.9177213082515927e-14)  …  Dual{Cells()}(1.3319680584303935e-11,0.0,-2.0078633571864362e-14), Dual{Cells()}(1.4193780294292571e-11,0.0,-2.1182714883472946e-14), Dual{Cells()}(1.5039529795914494e-11,0.0,-2.2198778160699346e-14), Dual{Cells()}(1.586420095207016e-11,0.0,-2.314660975915009e-14), Dual{Cells()}(1.665828011750182e-11,0.0,-2.4023966305696516e-14), Dual{Cells()}(1.7384156750658177e-11,0.0,-2.479882710762228e-14), Dual{Cells()}(1.7873223453154592e-11,0.0,-2.5307523690656305e-14), Dual{Cells()}(1.7885322346624746e-11,0.0,-2.5319978659628024e-14), Dual{Cells()}(1.7893104078844682e-11,0.0,-2.53279861750305e-14), Dual{Cells()}(1.7896935018421153e-11,0.0,-2.5331927337674647e-14)], Concentration = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(1762.442803362365,0.0,1.0), Dual{Cells()}(1758.19394605236,0.0,1.0), Dual{Cells()}(1749.7789223437649,0.0,1.0), Dual{Cells()}(1737.3585949781148,0.0,1.0), Dual{Cells()}(1721.1633479180332,0.0,1.0), Dual{Cells()}(1701.4809846955745,0.0,1.0), Dual{Cells()}(1678.641862308231,0.0,1.0), Dual{Cells()}(1653.0027275179805,0.0,1.0), Dual{Cells()}(1624.9304633289887,0.0,1.0), Dual{Cells()}(1594.7873426719511,0.0,1.0)  …  Dual{Cells()}(1487.8437655610273,0.0,1.0), Dual{Cells()}(1445.4748298518714,0.0,1.0), Dual{Cells()}(1406.4835714938083,0.0,1.0), Dual{Cells()}(1370.1106923990997,0.0,1.0), Dual{Cells()}(1336.4422816364233,0.0,1.0), Dual{Cells()}(1306.7071279342865,0.0,1.0), Dual{Cells()}(1287.1859816242977,0.0,1.0), Dual{Cells()}(1286.7080242727204,0.0,1.0), Dual{Cells()}(1286.4007372081624,0.0,1.0), Dual{Cells()}(1286.249495750732,0.0,1.0)], BruggemanCoefficient = [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5  …  1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5], DmuDc = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(1.4065460875513616,0.0,-0.000798066232202243), Dual{Cells()}(1.4099451514824881,0.0,-0.00080192811188334), Dual{Cells()}(1.4167258491615136,0.0,-0.000809659912501324), Dual{Cells()}(1.4268539821127804,0.0,-0.0008212777639786876), Dual{Cells()}(1.4402799319431263,0.0,-0.0008368060670623324), Dual{Cells()}(1.456940778004591,0.0,-0.0008562780255021562), Dual{Cells()}(1.4767634986736697,0.0,-0.0008797370849807316), Dual{Cells()}(1.4996690497447613,0.0,-0.0009072393074611237), Dual{Cells()}(1.5255773004118334,0.0,-0.0009388569756310612), Dual{Cells()}(1.5544122801031732,0.0,-0.000974683105710425)  …  Dual{Cells()}(1.666140684245592,0.0,-0.0011198357803497824), Dual{Cells()}(1.7149776519155477,0.0,-0.0011864458768135687), Dual{Cells()}(1.7625211412668826,0.0,-0.0012531402264407052), Dual{Cells()}(1.8093114982276866,0.0,-0.0013205586295071787), Dual{Cells()}(1.854892698072227,0.0,-0.001387933263979781), Dual{Cells()}(1.8971022477862027,0.0,-0.0014518190091954613), Dual{Cells()}(1.9258732343201848,0.0,-0.0014961887884219565), Dual{Cells()}(1.9265886143855804,0.0,-0.0014973005359739918), Dual{Cells()}(1.9270488253780043,0.0,-0.0014980159522919906), Dual{Cells()}(1.9272754141338038,0.0,-0.0014983682563147911)]), parameters = (BruggemanCoefficient = [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5  …  1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5], Volume = [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8  …  6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15  …  298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993  …  0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28], ECTransmissibilities = [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294, 1119.628647214855  …  886.764705882349, 764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821]), primary_variables = (Voltage = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(-1.3333801662120677,1.0,0.0), Dual{Cells()}(-1.3335186267408705,1.0,0.0), Dual{Cells()}(-1.3337939932604224,1.0,0.0), Dual{Cells()}(-1.3342032330881073,1.0,0.0), Dual{Cells()}(-1.334741981489335,1.0,0.0), Dual{Cells()}(-1.3354047472456956,1.0,0.0), Dual{Cells()}(-1.3361851735397174,1.0,0.0), Dual{Cells()}(-1.3370763289440977,1.0,0.0), Dual{Cells()}(-1.33807101353097,1.0,0.0), Dual{Cells()}(-1.339162048925923,1.0,0.0)  …  Dual{Cells()}(-1.3432461884978053,1.0,0.0), Dual{Cells()}(-1.3449585405270637,1.0,0.0), Dual{Cells()}(-1.3465874448838475,1.0,0.0), Dual{Cells()}(-1.3481553488622278,1.0,0.0), Dual{Cells()}(-1.3496504395542033,1.0,0.0), Dual{Cells()}(-1.35100748903293,1.0,0.0), Dual{Cells()}(-1.3519175094983524,1.0,0.0), Dual{Cells()}(-1.3519389686800418,1.0,0.0), Dual{Cells()}(-1.3519527744242112,1.0,0.0), Dual{Cells()}(-1.3519595741357189,1.0,0.0)], Concentration = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(1762.442803362365,0.0,1.0), Dual{Cells()}(1758.19394605236,0.0,1.0), Dual{Cells()}(1749.7789223437649,0.0,1.0), Dual{Cells()}(1737.3585949781148,0.0,1.0), Dual{Cells()}(1721.1633479180332,0.0,1.0), Dual{Cells()}(1701.4809846955745,0.0,1.0), Dual{Cells()}(1678.641862308231,0.0,1.0), Dual{Cells()}(1653.0027275179805,0.0,1.0), Dual{Cells()}(1624.9304633289887,0.0,1.0), Dual{Cells()}(1594.7873426719511,0.0,1.0)  …  Dual{Cells()}(1487.8437655610273,0.0,1.0), Dual{Cells()}(1445.4748298518714,0.0,1.0), Dual{Cells()}(1406.4835714938083,0.0,1.0), Dual{Cells()}(1370.1106923990997,0.0,1.0), Dual{Cells()}(1336.4422816364233,0.0,1.0), Dual{Cells()}(1306.7071279342865,0.0,1.0), Dual{Cells()}(1287.1859816242977,0.0,1.0), Dual{Cells()}(1286.7080242727204,0.0,1.0), Dual{Cells()}(1286.4007372081624,0.0,1.0), Dual{Cells()}(1286.249495750732,0.0,1.0)]), variable_definitions = JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, Concentration::Concentration}, secondary_variables::@NamedTuple{Conductivity::BattMo.Conductivity, Diffusivity::BattMo.Diffusivity, DmuDc::DmuDc, ChemCoef::ChemCoef, Charge::Charge, Mass::Mass}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, BruggemanCoefficient::BattMo.BruggemanCoefficient, VolumeFraction::BattMo.VolumeFraction}, extra_variable_fields::Vector{Symbol}}}((primary_variables = (Voltage = Voltage(), Concentration = Concentration()), secondary_variables = (Conductivity = BattMo.Conductivity(), Diffusivity = BattMo.Diffusivity(), DmuDc = DmuDc(), ChemCoef = ChemCoef(), Charge = Charge(), Mass = Mass()), parameters = (ECTransmissibilities = BattMo.ECTransmissibilities(), Volume = BattMo.Volume(), Temperature = Temperature(), BruggemanCoefficient = BattMo.BruggemanCoefficient(), VolumeFraction = BattMo.VolumeFraction()), extra_variable_fields = Symbol[])), equations = (charge_conservation = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.006441040744728873,138.20260763932802,-0.0029862532510886125) Dual{Cells()}(0.006441040744728873,-138.20260763932802,0.0029892591126174876) … Dual{Cells()}(-0.0002361436088830672,-101.55655190831087,0.0030044067427411397) Dual{Cells()}(-0.0002361436088830672,101.55655190831087,-0.0030046816841144946)], [1, 3, 6, 9, 12, 15, 18, 21, 24, 27  …  42, 45, 48, 51, 54, 57, 60, 63, 66, 68], [1, 2, 1, 2, 3, 2, 3, 4, 3, 4  …  20, 21, 20, 21, 22, 21, 22, 23, 22, 23], [1899 1905 … 2059 2066; 2073 2079 … 2233 2240], [1, 4, 7, 10, 13, 16, 19, 22, 25, 28  …  40, 43, 46, 49, 52, 55, 58, 61, 64, 67], 23, 23, Jutul.TrivialGlobalMap()),), mass_conservation = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(6.675668260806354e-8,0.0003715565396742461,3.842199275644987e-9) Dual{Cells()}(6.675668260806354e-8,-0.0003715565396742461,-3.6579977745141994e-9) … Dual{Cells()}(-2.4474560204939573e-9,-0.00027303392933638145,-5.605067483977291e-9) Dual{Cells()}(-2.4474560204939573e-9,0.00027303392933638145,5.969700925965907e-9)], [1, 3, 6, 9, 12, 15, 18, 21, 24, 27  …  42, 45, 48, 51, 54, 57, 60, 63, 66, 68], [1, 2, 1, 2, 3, 2, 3, 4, 3, 4  …  20, 21, 20, 21, 22, 21, 22, 23, 22, 23], [1901 1908 … 2062 2068; 2075 2082 … 2236 2242], [1, 4, 7, 10, 13, 16, 19, 22, 25, 28  …  40, 43, 46, 49, 52, 55, 58, 61, 64, 67], 23, 23, Jutul.TrivialGlobalMap()),)), views = (equations = JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}((charge_conservation = [-2.765473651293593e-9 -2.7863169254488396e-9 … -2.2077229367561957e-14 1.586670248313049e-14], mass_conservation = [-2.122706059440975e-14 -2.1387306397624872e-14 … 3.1036809031327328e-21 -6.742967354553541e-21])), primary_variables = JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, Concentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}((Voltage = [5.089421937053159e-5 5.089452088301337e-5 … 5.090002729662921e-5 5.090002099062152e-5], Concentration = [-0.0001277145014164608 -0.00011904544722608618 … 8.836098726142572e-6 8.616141112972429e-6]))))), PeAm = JutulStorage{@NamedTuple{state0::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, state::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, parameters::@NamedTuple{Volume::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, ParticleConcentration::BattMo.ParticleConcentration, SurfaceConcentration::BattMo.SurfaceConcentration}, secondary_variables::@NamedTuple{Charge::Charge, OpenCircuitPotential::BattMo.OpenCircuitPotential, ReactionRateConstant::BattMo.ReactionRateConstant, SolidDiffFlux::BattMo.SolidDiffFlux, DiffusionCoefficient::BattMo.DiffusionCoefficient}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, Conductivity::BattMo.Conductivity, VolumeFraction::BattMo.VolumeFraction}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, mass_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{10, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, solid_diffusion_bc::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, solid_diffusion_bc::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, ParticleConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, SurfaceConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}((state0 = (Volume = [6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], SurfaceConcentration = [12300.273634543519, 6031.887595109305, 4957.662033148967, 4905.101516896389, 5757.909992675495, 9580.446284038751, 22458.710081556204, 23773.61874328285, 23883.078149521818, 23992.988981688424], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72], Conductivity = [0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177], ECTransmissibilities = [764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], OpenCircuitPotential = [3.4323, 3.4323, 3.4323728316711297, 3.4323847817695574, 3.4323, 3.4323, 3.4307514964923835, 3.4114110121014636, 3.3979141986152332, 3.3843617223791536], ReactionRateConstant = [3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11], DiffusionCoefficient = [1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15], Charge = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], Voltage = [2.0883762055433417, 2.0871569600645272, 2.0856622850108075, 2.0839989859828756, 2.0820254061760157, 2.079170583133549, 2.072865688207688, 2.059415481245223, 2.0459085748930637, 2.032349698027513], ParticleConcentration = [12077.087615050246 5981.837127397039 … 23875.24108198864 23985.34043254; 12081.547714709204 5982.83057440759 … 23875.369074180962 23985.46587182354; … ; 12237.7405158248 6017.788341113599 … 23880.54281399142 23990.52090023291; 12277.935090433031 6026.841280962342 … 23882.12596587545 23992.062866752647], SolidDiffFlux = [-8.056794385644804e-21 -1.7945783522944986e-21 … -2.312071153938283e-22 -2.2659550069327974e-22; -6.445717272718053e-20 -1.436256210931154e-20 … -1.870612809349116e-21 -1.8328116860868876e-21; … ; -4.1293097112526826e-18 -9.276692200727734e-19 … -1.5176660062816157e-19 -1.479989070457847e-19; -5.881257207630181e-18 -1.324623242181575e-18 … -2.3164627364475824e-19 -2.2562004440942414e-19]), state = (Volume = [6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], SurfaceConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(12300.273634543519,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(6031.887595109305,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(4957.662033148967,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(4905.101516896389,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(5757.909992675495,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(9580.446284038751,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(22458.710081556204,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(23773.61874328285,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(23883.078149521818,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(23992.988981688424,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0)], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72], Conductivity = [0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177], ECTransmissibilities = [764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], OpenCircuitPotential = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(3.4323,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.4323,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.4323728316711297,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-2.2735884804830986e-7), Dual{Cells()}(3.4323847817695574,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-2.2735884804830986e-7), Dual{Cells()}(3.4323,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.4323,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.4307514964923835,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-1.2807881773398772e-5), Dual{Cells()}(3.4114110121014636,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0001233042819249718), Dual{Cells()}(3.3979141986152332,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0001233042819249718), Dual{Cells()}(3.3843617223791536,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0001233042819249718)], ReactionRateConstant = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], DiffusionCoefficient = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], Charge = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], Voltage = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(2.0883762055433417,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0871569600645272,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0856622850108075,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0839989859828756,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0820254061760157,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.079170583133549,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.072865688207688,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.059415481245223,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0459085748930637,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.032349698027513,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], ParticleConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(12077.087615050246,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(5981.837127397039,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(23875.24108198864,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(23985.34043254,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); Dual{Cells()}(12081.547714709204,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(5982.83057440759,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(23875.369074180962,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(23985.46587182354,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); … ; Dual{Cells()}(12237.7405158248,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(6017.788341113599,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) … Dual{Cells()}(23880.54281399142,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(23990.52090023291,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0); Dual{Cells()}(12277.935090433031,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(6026.841280962342,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) … Dual{Cells()}(23882.12596587545,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(23992.062866752647,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0)], SolidDiffFlux = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-8.056794385644804e-21,-0.0,1.806415775814131e-21,-1.806415775814131e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(-1.7945783522944986e-21,-0.0,1.806415775814131e-21,-1.806415775814131e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) … Dual{Cells()}(-2.312071153938283e-22,-0.0,1.806415775814131e-21,-1.806415775814131e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(-2.2659550069327974e-22,-0.0,1.806415775814131e-21,-1.806415775814131e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0); Dual{Cells()}(-6.445717272718053e-20,-0.0,-0.0,7.225663103256525e-21,-7.225663103256525e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(-1.436256210931154e-20,-0.0,-0.0,7.225663103256525e-21,-7.225663103256525e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) … Dual{Cells()}(-1.870612809349116e-21,-0.0,-0.0,7.225663103256525e-21,-7.225663103256525e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(-1.8328116860868876e-21,-0.0,-0.0,7.225663103256525e-21,-7.225663103256525e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0); … ; Dual{Cells()}(-4.1293097112526826e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.156106096521044e-19,-1.156106096521044e-19,-0.0,-0.0) Dual{Cells()}(-9.276692200727734e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.156106096521044e-19,-1.156106096521044e-19,-0.0,-0.0) … Dual{Cells()}(-1.5176660062816157e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.156106096521044e-19,-1.156106096521044e-19,-0.0,-0.0) Dual{Cells()}(-1.479989070457847e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.156106096521044e-19,-1.156106096521044e-19,-0.0,-0.0); Dual{Cells()}(-5.881257207630181e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.4631967784094464e-19,-1.4631967784094464e-19,-0.0) Dual{Cells()}(-1.324623242181575e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.4631967784094464e-19,-1.4631967784094464e-19,-0.0) … Dual{Cells()}(-2.3164627364475824e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.4631967784094464e-19,-1.4631967784094464e-19,-0.0) Dual{Cells()}(-2.2562004440942414e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.4631967784094464e-19,-1.4631967784094464e-19,-0.0)]), parameters = (Volume = [6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72], Conductivity = [0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177], ECTransmissibilities = [764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821]), primary_variables = (Voltage = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(2.0883762055433417,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0871569600645272,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0856622850108075,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0839989859828756,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0820254061760157,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.079170583133549,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.072865688207688,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.059415481245223,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0459085748930637,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.032349698027513,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], ParticleConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(12077.087615050246,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(5981.837127397039,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(23875.24108198864,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(23985.34043254,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); Dual{Cells()}(12081.547714709204,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(5982.83057440759,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(23875.369074180962,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(23985.46587182354,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); … ; Dual{Cells()}(12237.7405158248,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(6017.788341113599,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) … Dual{Cells()}(23880.54281399142,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(23990.52090023291,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0); Dual{Cells()}(12277.935090433031,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(6026.841280962342,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) … Dual{Cells()}(23882.12596587545,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(23992.062866752647,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0)], SurfaceConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(12300.273634543519,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(6031.887595109305,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(4957.662033148967,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(4905.101516896389,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(5757.909992675495,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(9580.446284038751,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(22458.710081556204,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(23773.61874328285,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(23883.078149521818,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(23992.988981688424,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0)]), variable_definitions = JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::Voltage, ParticleConcentration::BattMo.ParticleConcentration, SurfaceConcentration::BattMo.SurfaceConcentration}, secondary_variables::@NamedTuple{Charge::Charge, OpenCircuitPotential::BattMo.OpenCircuitPotential, ReactionRateConstant::BattMo.ReactionRateConstant, SolidDiffFlux::BattMo.SolidDiffFlux, DiffusionCoefficient::BattMo.DiffusionCoefficient}, parameters::@NamedTuple{ECTransmissibilities::BattMo.ECTransmissibilities, Volume::BattMo.Volume, Temperature::Temperature, Conductivity::BattMo.Conductivity, VolumeFraction::BattMo.VolumeFraction}, extra_variable_fields::Vector{Symbol}}}((primary_variables = (Voltage = Voltage(), ParticleConcentration = BattMo.ParticleConcentration(), SurfaceConcentration = BattMo.SurfaceConcentration()), secondary_variables = (Charge = Charge(), OpenCircuitPotential = BattMo.OpenCircuitPotential(), ReactionRateConstant = BattMo.ReactionRateConstant(), SolidDiffFlux = BattMo.SolidDiffFlux(), DiffusionCoefficient = BattMo.DiffusionCoefficient()), parameters = (ECTransmissibilities = BattMo.ECTransmissibilities(), Volume = BattMo.Volume(), Temperature = Temperature(), Conductivity = BattMo.Conductivity(), VolumeFraction = BattMo.VolumeFraction()), extra_variable_fields = Symbol[])), equations = (charge_conservation = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(0.0056959500597951905,4.671700784434027,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(0.0056959500597951905,-4.671700784434027,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(-0.06334301568883755,-4.671700784434067,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(-0.06334301568883755,4.671700784434067,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], [1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 29], [1, 2, 1, 2, 3, 2, 3, 4, 3, 4  …  7, 8, 7, 8, 9, 8, 9, 10, 9, 10], [2247 2262 … 2376 2391; 2407 2422 … 2536 2551; … ; 3847 3862 … 3976 3991; 4007 4022 … 4136 4151], [1, 4, 7, 10, 13, 16, 19, 22, 25, 28], 10, 10, Jutul.TrivialGlobalMap()),), mass_conservation = (Cells = Jutul.GenericAutoDiffCache{10, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(2.5714174023107704e-33,0.0,1.9338283018682212e-21,-1.806415775814131e-21,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(7.432885879119488e-34,0.0,1.9338283018682212e-21,-1.806415775814131e-21,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(1.5316221193474077e-33,0.0,1.9338283018682212e-21,-1.806415775814131e-21,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(1.834805622311492e-33,0.0,1.9338283018682212e-21,-1.806415775814131e-21,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); Dual{Cells()}(-1.0075021021575728e-32,0.0,-1.806415775814131e-21,9.923966561449286e-21,-7.225663103256525e-21,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(-4.841908250811035e-33,0.0,-1.806415775814131e-21,9.923966561449286e-21,-7.225663103256525e-21,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(1.167632644603988e-32,0.0,-1.806415775814131e-21,9.923966561449286e-21,-7.225663103256525e-21,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2.9088313007707998e-33,0.0,-1.806415775814131e-21,9.923966561449286e-21,-7.225663103256525e-21,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); … ; Dual{Cells()}(1.1940765655200862e-31,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.156106096521044e-19,2.895788056467866e-19,-1.4631967784094464e-19,0.0) Dual{Cells()}(-6.162975822039155e-33,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.156106096521044e-19,2.895788056467866e-19,-1.4631967784094464e-19,0.0) … Dual{Cells()}(-1.663521989464475e-31,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.156106096521044e-19,2.895788056467866e-19,-1.4631967784094464e-19,0.0) Dual{Cells()}(3.019376670313089e-31,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.156106096521044e-19,2.895788056467866e-19,-1.4631967784094464e-19,0.0); Dual{Cells()}(6.162975822039155e-32,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.4631967784094464e-19,5.421316275644292e-19,-3.612831551628262e-19) Dual{Cells()}(1.020742870525235e-31,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.4631967784094464e-19,5.421316275644292e-19,-3.612831551628262e-19) … Dual{Cells()}(1.4749252996603549e-30,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.4631967784094464e-19,5.421316275644292e-19,-3.612831551628262e-19) Dual{Cells()}(-2.8990060487888868e-31,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.4631967784094464e-19,5.421316275644292e-19,-3.612831551628262e-19)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2249 2265 … 2377 2392; 2409 2425 … 2537 2552; … ; 3858 3874 … 3986 4001; 4018 4034 … 4146 4161], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 10, Jutul.TrivialGlobalMap()),), solid_diffusion_bc = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-8.070539697980864e-18,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.612831551628262e-19,-3.612831551628262e-19) Dual{Cells()}(-1.8231482969574853e-18,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.612831551628262e-19,-3.612831551628262e-19) … Dual{Cells()}(-3.440079120543524e-19,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.612831551628262e-19,-3.612831551628262e-19) Dual{Cells()}(-3.3458972604098697e-19,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.612831551628262e-19,-3.612831551628262e-19)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2259 2275 … 2387 2402; 2419 2435 … 2547 2562; … ; 3859 3875 … 3987 4002; 4019 4035 … 4147 4162], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 10, Jutul.TrivialGlobalMap()),)), views = (equations = JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, mass_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, solid_diffusion_bc::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}((charge_conservation = [2.8041804989165087e-15 -2.7976752858815956e-15 … 1.4837306730464128e-16 1.4016565685892601e-15], mass_conservation = [2.5714174023107704e-33 7.432885879119488e-34 … 1.5316221193474077e-33 1.834805622311492e-33; -1.0075021021575728e-32 -4.841908250811035e-33 … 1.167632644603988e-32 2.9088313007707998e-33; … ; 1.1940765655200862e-31 -6.162975822039155e-33 … -1.663521989464475e-31 3.019376670313089e-31; 6.162975822039155e-32 1.020742870525235e-31 … 1.4749252996603549e-30 -2.8990060487888868e-31], solid_diffusion_bc = [-3.412747861454182e-30 1.657455310139655e-30 … 1.5613995541633418e-30 -1.1529579612074187e-30])), primary_variables = JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, ParticleConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, SurfaceConcentration::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}((Voltage = [5.0900438102197997e-5 5.0900355785888486e-5 … 5.0900078623847156e-5 5.090007475858988e-5], ParticleConcentration = [8.12338324650245e-7 4.375439935279435e-9 … -3.644984582891777e-8 -3.813499482115312e-8; 8.696342399634713e-7 4.6841600818703985e-9 … -3.902111500175212e-8 -4.082620341237674e-8; … ; 4.999146185683689e-6 2.692537963147667e-8 … -2.2430713506350988e-7 -2.3468316028169056e-7; 7.057556884496863e-6 3.801196133455584e-8 … -3.1666596383674405e-7 -3.313171038277928e-7], SurfaceConcentration = [8.565721354580744e-6 4.613575131204068e-8 … -3.843363206968431e-7 -4.021158419828603e-7]))))), Control = JutulStorage{@NamedTuple{state0::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{Float64}, Current::Vector{Float64}, ImaxCharge::Vector{Float64}}, state::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Current::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ImaxCharge::Vector{Float64}}, parameters::@NamedTuple{ImaxDischarge::Vector{Float64}, ImaxCharge::Vector{Float64}}, primary_variables::@NamedTuple{Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Current::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, variable_definitions::JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::VoltageVar, Current::CurrentVar}, secondary_variables::@NamedTuple{}, parameters::@NamedTuple{ImaxDischarge::BattMo.ImaxDischarge, ImaxCharge::BattMo.ImaxCharge}, extra_variable_fields::Vector{Symbol}}}, equations::@NamedTuple{charge_conservation::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, control::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}}, views::@NamedTuple{equations::JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, control::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}, primary_variables::JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, Current::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}}}}((state0 = (Controller = BattMo.CCController{Int64, Float64}(0, 0.06357915909518233, 6748.4375, false, &quot;discharging&quot;), ImaxDischarge = [0.06357915909518233], Voltage = [2.025544985757671], Current = [0.06357915909518233], ImaxCharge = [0.0]), state = (Controller = BattMo.CCController{Int64, Float64}(0, 0.06357915909518233, 6748.4375, false, &quot;discharging&quot;), ImaxDischarge = [0.06357915909518233], Voltage = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(2.025544985757671,1.0,0.0)], Current = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.06357915909518233,0.0,1.0)], ImaxCharge = [0.0]), parameters = (ImaxDischarge = [0.06357915909518233], ImaxCharge = [0.0]), primary_variables = (Voltage = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(2.025544985757671,1.0,0.0)], Current = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.06357915909518233,0.0,1.0)]), variable_definitions = JutulStorage{@NamedTuple{primary_variables::@NamedTuple{Voltage::VoltageVar, Current::CurrentVar}, secondary_variables::@NamedTuple{}, parameters::@NamedTuple{ImaxDischarge::BattMo.ImaxDischarge, ImaxCharge::BattMo.ImaxCharge}, extra_variable_fields::Vector{Symbol}}}((primary_variables = (Voltage = VoltageVar(), Current = CurrentVar()), secondary_variables = NamedTuple(), parameters = (ImaxDischarge = BattMo.ImaxDischarge(), ImaxCharge = BattMo.ImaxCharge()), extra_variable_fields = [:Controller])), equations = (charge_conservation = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.06357915929773683,1.0e-10,1.0);;], [1, 2], [1], [4166; 4169;;], [1], 1, 1, Jutul.TrivialGlobalMap()),), control = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.0,0.0,1.0);;], [1, 2], [1], [4167; 4170;;], [1], 1, 1, Jutul.TrivialGlobalMap()),)), views = (equations = JutulStorage{@NamedTuple{charge_conservation::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, control::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}((charge_conservation = [-1.0547118733938987e-15;;], control = [0.0;;])), primary_variables = JutulStorage{@NamedTuple{Voltage::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, Current::LinearAlgebra.Adjoint{Float64, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}}}((Voltage = [5.0900074757814885e-5;;], Current = [-0.0;;]))))), state = JutulStorage{@NamedTuple{NeAm::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, Elyte::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Diffusivity::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Concentration::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}}, PeAm::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ReactionRateConstant::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, DiffusionCoefficient::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Charge::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 12}}, ParticleConcentration::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, SolidDiffFlux::Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}}, Control::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, Current::Vector{ForwardDiff.Dual{Cells(), Float64, 2}}, ImaxCharge::Vector{Float64}}}}((NeAm = (BoundaryVoltage = [0.0], Volume = [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8], SurfaceConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(42.81532071735261,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.769160520664606,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.677625393676465,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.54202247463053,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.36345042067212,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(42.143948467139936,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(41.88555711574829,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(41.591614660334244,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(41.26579601016947,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(40.90854902579595,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0)], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001], Conductivity = [125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838], ECTransmissibilities = [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294], OpenCircuitPotential = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(1.2007500284715267,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2008428332981653,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2010268641776023,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.201299493115447,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2016585112674305,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2020998187618956,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.202619313181144,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2032102829034097,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2038653395434098,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234), Dual{Cells()}(1.2045835826799383,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0020104946100190234)], ReactionRateConstant = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.764e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], DiffusionCoefficient = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.9e-14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], Charge = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], Voltage = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-2.1173232928168587e-7,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-5.922968748222838e-7,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-9.299979381970803e-7,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.2249073585544645e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.4771306021983557e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.6868062007057387e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.8541035993136588e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-1.9792213629153e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-2.0623828071074753e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(-2.1038310525590007e-6,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], ParticleConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(2191.999182857426,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2189.2507271880345,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(2103.6815859459252,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2084.1211330478104,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); Dual{Cells()}(2148.787956795936,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2146.1091605829815,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(2062.6912135604107,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(2043.6189249103516,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); … ; Dual{Cells()}(642.017370776268,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(641.3896103895692,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) … Dual{Cells()}(621.6591049969663,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(617.1112814419341,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0); Dual{Cells()}(256.43869791599593,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(256.21013243352434,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) … Dual{Cells()}(248.97887089194455,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(247.30227501930904,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0)], SolidDiffFlux = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(3.123655138693319e-17,-0.0,7.228804695910114e-19,-7.228804695910114e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(3.118619592635258e-17,-0.0,7.228804695910114e-19,-7.228804695910114e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) … Dual{Cells()}(2.963113963875118e-17,-0.0,7.228804695910114e-19,-7.228804695910114e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(2.927825523787915e-17,-0.0,7.228804695910114e-19,-7.228804695910114e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0); Dual{Cells()}(2.4981707268577154e-16,-0.0,-0.0,2.8915218783640456e-18,-2.8915218783640456e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(2.4941942971595423e-16,-0.0,-0.0,2.8915218783640456e-18,-2.8915218783640456e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) … Dual{Cells()}(2.3713430878979225e-16,-0.0,-0.0,2.8915218783640456e-18,-2.8915218783640456e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(2.3434527599351663e-16,-0.0,-0.0,2.8915218783640456e-18,-2.8915218783640456e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0); … ; Dual{Cells()}(1.5888510033663647e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,4.626435005382473e-17,-4.626435005382473e-17,-0.0,-0.0) Dual{Cells()}(1.586991972777687e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,4.626435005382473e-17,-4.626435005382473e-17,-0.0,-0.0) … Dual{Cells()}(1.5289683749643333e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,4.626435005382473e-17,-4.626435005382473e-17,-0.0,-0.0) Dual{Cells()}(1.5156768065786096e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,4.626435005382473e-17,-4.626435005382473e-17,-0.0,-0.0); Dual{Cells()}(2.25769106602225e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,5.855331803687191e-17,-5.855331803687191e-17,-0.0) Dual{Cells()}(2.2553536474036587e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,5.855331803687191e-17,-5.855331803687191e-17,-0.0) … Dual{Cells()}(2.182166427360722e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,5.855331803687191e-17,-5.855331803687191e-17,-0.0) Dual{Cells()}(2.1653544365963574e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,5.855331803687191e-17,-5.855331803687191e-17,-0.0)]), Elyte = (Volume = [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8  …  6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Mass = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(2.1945849665328002e-5,0.0,1.245195e-8), Dual{Cells()}(2.189294310654668e-5,0.0,1.2451949999999999e-8), Dual{Cells()}(2.1788159652078428e-5,0.0,1.2451949999999992e-8), Dual{Cells()}(2.163350235673774e-5,0.0,1.2451950000000002e-8), Dual{Cells()}(2.143183995010795e-5,0.0,1.2451949999999999e-8), Dual{Cells()}(2.118675614738006e-5,0.0,1.2451950000000002e-8), Dual{Cells()}(2.090236453736898e-5,0.0,1.2451950000000002e-8), Dual{Cells()}(2.0583107312917517e-5,0.0,1.2451950000000002e-8), Dual{Cells()}(2.0233552882849377e-5,0.0,1.2451949999999985e-8), Dual{Cells()}(1.9858212251584003e-5,0.0,1.2451950000000002e-8)  …  Dual{Cells()}(2.6962942774499457e-5,0.0,1.812216000000002e-8), Dual{Cells()}(2.6195126142548415e-5,0.0,1.8122160000000016e-8), Dual{Cells()}(2.5488520319982227e-5,0.0,1.8122159999999996e-8), Dual{Cells()}(2.4829365185367293e-5,0.0,1.8122160000000016e-8), Dual{Cells()}(2.4219220858580352e-5,0.0,1.812216000000002e-8), Dual{Cells()}(2.3680355645565634e-5,0.0,1.8122160000000016e-8), Dual{Cells()}(2.3326590308752604e-5,0.0,1.8122160000000016e-8), Dual{Cells()}(2.331792868915411e-5,0.0,1.812215999999999e-8), Dual{Cells()}(2.3312359983804338e-5,0.0,1.812216000000005e-8), Dual{Cells()}(2.3309619161914075e-5,0.0,1.812215999999999e-8)], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15  …  298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993  …  0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28], Conductivity = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.1157449730305673,0.0,-7.569708961683358e-5), Dual{Cells()}(0.11606652775731731,0.0,-7.566289385672752e-5), Dual{Cells()}(0.1167029139425651,0.0,-7.558481530844872e-5), Dual{Cells()}(0.11764086106148108,0.0,-7.54443722630224e-5), Dual{Cells()}(0.11886092094663214,0.0,-7.521594685776246e-5), Dual{Cells()}(0.12033805911527962,0.0,-7.486897982287601e-5), Dual{Cells()}(0.12204250420571466,0.0,-7.437040206809859e-5), Dual{Cells()}(0.12394081665202009,0.0,-7.368699738746046e-5), Dual{Cells()}(0.12599712264463436,0.0,-7.278742672309706e-5), Dual{Cells()}(0.12817439036063968,0.0,-7.16437401368234e-5)  …  Dual{Cells()}(0.12223210515543873,0.0,-5.95758371767477e-5), Dual{Cells()}(0.12470256060591244,0.0,-5.6982530486228713e-5), Dual{Cells()}(0.1268727830634557,0.0,-5.428591168201883e-5), Dual{Cells()}(0.1287974170887019,0.0,-5.149783786383138e-5), Dual{Cells()}(0.13048445743835868,0.0,-4.8678668929459585e-5), Dual{Cells()}(0.13189248187227626,0.0,-4.5995178350362036e-5), Dual{Cells()}(0.13277231764761704,0.0,-4.4133316323389085e-5), Dual{Cells()}(0.1327934003584807,0.0,-4.408672622169074e-5), Dual{Cells()}(0.13280694303359453,0.0,-4.405674720033449e-5), Dual{Cells()}(0.1328136051239624,0.0,-4.404198472484535e-5)], ECTransmissibilities = [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294, 1119.628647214855  …  886.764705882349, 764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], ChemCoef = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(2.49924314084208e-6,0.0,-3.0525586751447265e-9), Dual{Cells()}(2.512242824584917e-6,0.0,-3.0665891075633623e-9), Dual{Cells()}(2.53816541298458e-6,0.0,-3.094453578020248e-9), Dual{Cells()}(2.5768558816166825e-6,0.0,-3.135769122273897e-9), Dual{Cells()}(2.6280789286046275e-6,0.0,-3.1899851734599384e-9), Dual{Cells()}(2.691518103344934e-6,0.0,-3.256410539310913e-9), Dual{Cells()}(2.766778953977508e-6,0.0,-3.3342476368009096e-9), Dual{Cells()}(2.8533969043610383e-6,0.0,-3.422630812438334e-9), Dual{Cells()}(2.9508507852345443e-6,0.0,-3.5206663631830405e-9), Dual{Cells()}(3.058580270962546e-6,0.0,-3.6274701917503455e-9)  …  Dual{Cells()}(3.1264347161128786e-6,0.0,-3.625141186424429e-9), Dual{Cells()}(3.2831160941939524e-6,0.0,-3.771518184926822e-9), Dual{Cells()}(3.4328529896996194e-6,0.0,-3.909572424853449e-9), Dual{Cells()}(3.577444465080222e-6,0.0,-4.0414532782613454e-9), Dual{Cells()}(3.715608771309762e-6,0.0,-4.166372815332034e-9), Dual{Cells()}(3.8411669458111565e-6,0.0,-4.279116825148593e-9), Dual{Cells()}(3.925433617396579e-6,0.0,-4.3544324364930995e-9), Dual{Cells()}(3.927515294236022e-6,0.0,-4.356289799598029e-9), Dual{Cells()}(3.928854109256943e-6,0.0,-4.3574842714331276e-9), Dual{Cells()}(3.929513185992811e-6,0.0,-4.358072268154327e-9)], Charge = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0)  …  Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0)], Voltage = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(-1.3333801662120677,1.0,0.0), Dual{Cells()}(-1.3335186267408705,1.0,0.0), Dual{Cells()}(-1.3337939932604224,1.0,0.0), Dual{Cells()}(-1.3342032330881073,1.0,0.0), Dual{Cells()}(-1.334741981489335,1.0,0.0), Dual{Cells()}(-1.3354047472456956,1.0,0.0), Dual{Cells()}(-1.3361851735397174,1.0,0.0), Dual{Cells()}(-1.3370763289440977,1.0,0.0), Dual{Cells()}(-1.33807101353097,1.0,0.0), Dual{Cells()}(-1.339162048925923,1.0,0.0)  …  Dual{Cells()}(-1.3432461884978053,1.0,0.0), Dual{Cells()}(-1.3449585405270637,1.0,0.0), Dual{Cells()}(-1.3465874448838475,1.0,0.0), Dual{Cells()}(-1.3481553488622278,1.0,0.0), Dual{Cells()}(-1.3496504395542033,1.0,0.0), Dual{Cells()}(-1.35100748903293,1.0,0.0), Dual{Cells()}(-1.3519175094983524,1.0,0.0), Dual{Cells()}(-1.3519389686800418,1.0,0.0), Dual{Cells()}(-1.3519527744242112,1.0,0.0), Dual{Cells()}(-1.3519595741357189,1.0,0.0)], Diffusivity = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(9.74683587046272e-12,0.0,-1.4331964731875067e-14), Dual{Cells()}(9.807991206671544e-12,0.0,-1.4454756848449344e-14), Dual{Cells()}(9.930651571839526e-12,0.0,-1.4697951311527192e-14), Dual{Cells()}(1.0115434063765826e-11,0.0,-1.5056899182565878e-14), Dual{Cells()}(1.0363074303412139e-11,0.0,-1.5524942357437354e-14), Dual{Cells()}(1.0674239728143869e-11,0.0,-1.6093763304560763e-14), Dual{Cells()}(1.1049344655182878e-11,0.0,-1.6753814695798794e-14), Dual{Cells()}(1.1488396906887688e-11,0.0,-1.7494786537949018e-14), Dual{Cells()}(1.1990902541164651e-11,0.0,-1.830607590007502e-14), Dual{Cells()}(1.2555834192377068e-11,0.0,-1.9177213082515927e-14)  …  Dual{Cells()}(1.3319680584303935e-11,0.0,-2.0078633571864362e-14), Dual{Cells()}(1.4193780294292571e-11,0.0,-2.1182714883472946e-14), Dual{Cells()}(1.5039529795914494e-11,0.0,-2.2198778160699346e-14), Dual{Cells()}(1.586420095207016e-11,0.0,-2.314660975915009e-14), Dual{Cells()}(1.665828011750182e-11,0.0,-2.4023966305696516e-14), Dual{Cells()}(1.7384156750658177e-11,0.0,-2.479882710762228e-14), Dual{Cells()}(1.7873223453154592e-11,0.0,-2.5307523690656305e-14), Dual{Cells()}(1.7885322346624746e-11,0.0,-2.5319978659628024e-14), Dual{Cells()}(1.7893104078844682e-11,0.0,-2.53279861750305e-14), Dual{Cells()}(1.7896935018421153e-11,0.0,-2.5331927337674647e-14)], Concentration = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(1762.442803362365,0.0,1.0), Dual{Cells()}(1758.19394605236,0.0,1.0), Dual{Cells()}(1749.7789223437649,0.0,1.0), Dual{Cells()}(1737.3585949781148,0.0,1.0), Dual{Cells()}(1721.1633479180332,0.0,1.0), Dual{Cells()}(1701.4809846955745,0.0,1.0), Dual{Cells()}(1678.641862308231,0.0,1.0), Dual{Cells()}(1653.0027275179805,0.0,1.0), Dual{Cells()}(1624.9304633289887,0.0,1.0), Dual{Cells()}(1594.7873426719511,0.0,1.0)  …  Dual{Cells()}(1487.8437655610273,0.0,1.0), Dual{Cells()}(1445.4748298518714,0.0,1.0), Dual{Cells()}(1406.4835714938083,0.0,1.0), Dual{Cells()}(1370.1106923990997,0.0,1.0), Dual{Cells()}(1336.4422816364233,0.0,1.0), Dual{Cells()}(1306.7071279342865,0.0,1.0), Dual{Cells()}(1287.1859816242977,0.0,1.0), Dual{Cells()}(1286.7080242727204,0.0,1.0), Dual{Cells()}(1286.4007372081624,0.0,1.0), Dual{Cells()}(1286.249495750732,0.0,1.0)], BruggemanCoefficient = [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5  …  1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5], DmuDc = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(1.4065460875513616,0.0,-0.000798066232202243), Dual{Cells()}(1.4099451514824881,0.0,-0.00080192811188334), Dual{Cells()}(1.4167258491615136,0.0,-0.000809659912501324), Dual{Cells()}(1.4268539821127804,0.0,-0.0008212777639786876), Dual{Cells()}(1.4402799319431263,0.0,-0.0008368060670623324), Dual{Cells()}(1.456940778004591,0.0,-0.0008562780255021562), Dual{Cells()}(1.4767634986736697,0.0,-0.0008797370849807316), Dual{Cells()}(1.4996690497447613,0.0,-0.0009072393074611237), Dual{Cells()}(1.5255773004118334,0.0,-0.0009388569756310612), Dual{Cells()}(1.5544122801031732,0.0,-0.000974683105710425)  …  Dual{Cells()}(1.666140684245592,0.0,-0.0011198357803497824), Dual{Cells()}(1.7149776519155477,0.0,-0.0011864458768135687), Dual{Cells()}(1.7625211412668826,0.0,-0.0012531402264407052), Dual{Cells()}(1.8093114982276866,0.0,-0.0013205586295071787), Dual{Cells()}(1.854892698072227,0.0,-0.001387933263979781), Dual{Cells()}(1.8971022477862027,0.0,-0.0014518190091954613), Dual{Cells()}(1.9258732343201848,0.0,-0.0014961887884219565), Dual{Cells()}(1.9265886143855804,0.0,-0.0014973005359739918), Dual{Cells()}(1.9270488253780043,0.0,-0.0014980159522919906), Dual{Cells()}(1.9272754141338038,0.0,-0.0014983682563147911)]), PeAm = (Volume = [6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], SurfaceConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(12300.273634543519,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(6031.887595109305,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(4957.662033148967,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(4905.101516896389,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(5757.909992675495,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(9580.446284038751,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(22458.710081556204,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(23773.61874328285,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(23883.078149521818,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0), Dual{Cells()}(23992.988981688424,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0)], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72], Conductivity = [0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177], ECTransmissibilities = [764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], OpenCircuitPotential = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(3.4323,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.4323,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.4323728316711297,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-2.2735884804830986e-7), Dual{Cells()}(3.4323847817695574,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-2.2735884804830986e-7), Dual{Cells()}(3.4323,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.4323,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.4307514964923835,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-1.2807881773398772e-5), Dual{Cells()}(3.4114110121014636,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0001233042819249718), Dual{Cells()}(3.3979141986152332,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0001233042819249718), Dual{Cells()}(3.3843617223791536,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0001233042819249718)], ReactionRateConstant = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(3.626e-11,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], DiffusionCoefficient = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(1.25e-15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], Charge = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], Voltage = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(2.0883762055433417,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0871569600645272,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0856622850108075,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0839989859828756,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0820254061760157,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.079170583133549,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.072865688207688,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.059415481245223,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.0459085748930637,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0), Dual{Cells()}(2.032349698027513,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)], ParticleConcentration = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(12077.087615050246,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(5981.837127397039,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(23875.24108198864,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(23985.34043254,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); Dual{Cells()}(12081.547714709204,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(5982.83057440759,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) … Dual{Cells()}(23875.369074180962,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0) Dual{Cells()}(23985.46587182354,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0); … ; Dual{Cells()}(12237.7405158248,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(6017.788341113599,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) … Dual{Cells()}(23880.54281399142,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0) Dual{Cells()}(23990.52090023291,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0); Dual{Cells()}(12277.935090433031,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(6026.841280962342,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) … Dual{Cells()}(23882.12596587545,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0) Dual{Cells()}(23992.062866752647,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0)], SolidDiffFlux = ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-8.056794385644804e-21,-0.0,1.806415775814131e-21,-1.806415775814131e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(-1.7945783522944986e-21,-0.0,1.806415775814131e-21,-1.806415775814131e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) … Dual{Cells()}(-2.312071153938283e-22,-0.0,1.806415775814131e-21,-1.806415775814131e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(-2.2659550069327974e-22,-0.0,1.806415775814131e-21,-1.806415775814131e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0); Dual{Cells()}(-6.445717272718053e-20,-0.0,-0.0,7.225663103256525e-21,-7.225663103256525e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(-1.436256210931154e-20,-0.0,-0.0,7.225663103256525e-21,-7.225663103256525e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) … Dual{Cells()}(-1.870612809349116e-21,-0.0,-0.0,7.225663103256525e-21,-7.225663103256525e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0) Dual{Cells()}(-1.8328116860868876e-21,-0.0,-0.0,7.225663103256525e-21,-7.225663103256525e-21,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0); … ; Dual{Cells()}(-4.1293097112526826e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.156106096521044e-19,-1.156106096521044e-19,-0.0,-0.0) Dual{Cells()}(-9.276692200727734e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.156106096521044e-19,-1.156106096521044e-19,-0.0,-0.0) … Dual{Cells()}(-1.5176660062816157e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.156106096521044e-19,-1.156106096521044e-19,-0.0,-0.0) Dual{Cells()}(-1.479989070457847e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.156106096521044e-19,-1.156106096521044e-19,-0.0,-0.0); Dual{Cells()}(-5.881257207630181e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.4631967784094464e-19,-1.4631967784094464e-19,-0.0) Dual{Cells()}(-1.324623242181575e-18,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.4631967784094464e-19,-1.4631967784094464e-19,-0.0) … Dual{Cells()}(-2.3164627364475824e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.4631967784094464e-19,-1.4631967784094464e-19,-0.0) Dual{Cells()}(-2.2562004440942414e-19,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.4631967784094464e-19,-1.4631967784094464e-19,-0.0)]), Control = (Controller = BattMo.CCController{Int64, Float64}(0, 0.06357915909518233, 6748.4375, false, &quot;discharging&quot;), ImaxDischarge = [0.06357915909518233], Voltage = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(2.025544985757671,1.0,0.0)], Current = ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.06357915909518233,0.0,1.0)], ImaxCharge = [0.0]))), state0 = JutulStorage{@NamedTuple{NeAm::@NamedTuple{BoundaryVoltage::Vector{Float64}, Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, Elyte::@NamedTuple{Volume::Vector{Float64}, Mass::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, ChemCoef::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, Diffusivity::Vector{Float64}, Concentration::Vector{Float64}, BruggemanCoefficient::Vector{Float64}, DmuDc::Vector{Float64}}, PeAm::@NamedTuple{Volume::Vector{Float64}, SurfaceConcentration::Vector{Float64}, Temperature::Vector{Float64}, VolumeFraction::Vector{Float64}, Conductivity::Vector{Float64}, ECTransmissibilities::Vector{Float64}, OpenCircuitPotential::Vector{Float64}, ReactionRateConstant::Vector{Float64}, DiffusionCoefficient::Vector{Float64}, Charge::Vector{Float64}, Voltage::Vector{Float64}, ParticleConcentration::Matrix{Float64}, SolidDiffFlux::Matrix{Float64}}, Control::@NamedTuple{Controller::BattMo.CCController{Int64, Float64}, ImaxDischarge::Vector{Float64}, Voltage::Vector{Float64}, Current::Vector{Float64}, ImaxCharge::Vector{Float64}}}}((NeAm = (BoundaryVoltage = [0.0], Volume = [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8], SurfaceConcentration = [42.81532071735261, 42.769160520664606, 42.677625393676465, 42.54202247463053, 42.36345042067212, 42.143948467139936, 41.88555711574829, 41.591614660334244, 41.26579601016947, 40.90854902579595], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001, 0.7000000000000001], Conductivity = [125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838, 125.91733399337838], ECTransmissibilities = [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294], OpenCircuitPotential = [1.2007500284715267, 1.2008428332981653, 1.2010268641776023, 1.201299493115447, 1.2016585112674305, 1.2020998187618956, 1.202619313181144, 1.2032102829034097, 1.2038653395434098, 1.2045835826799383], ReactionRateConstant = [1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11, 1.764e-11], DiffusionCoefficient = [3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14, 3.9e-14], Charge = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], Voltage = [-2.1173232928168587e-7, -5.922968748222838e-7, -9.299979381970803e-7, -1.2249073585544645e-6, -1.4771306021983557e-6, -1.6868062007057387e-6, -1.8541035993136588e-6, -1.9792213629153e-6, -2.0623828071074753e-6, -2.1038310525590007e-6], ParticleConcentration = [2191.999182857426 2189.2507271880345 … 2103.6815859459252 2084.1211330478104; 2148.787956795936 2146.1091605829815 … 2062.6912135604107 2043.6189249103516; … ; 642.017370776268 641.3896103895692 … 621.6591049969663 617.1112814419341; 256.43869791599593 256.21013243352434 … 248.97887089194455 247.30227501930904], SolidDiffFlux = [3.123655138693319e-17 3.118619592635258e-17 … 2.963113963875118e-17 2.927825523787915e-17; 2.4981707268577154e-16 2.4941942971595423e-16 … 2.3713430878979225e-16 2.3434527599351663e-16; … ; 1.5888510033663647e-14 1.586991972777687e-14 … 1.5289683749643333e-14 1.5156768065786096e-14; 2.25769106602225e-14 2.2553536474036587e-14 … 2.182166427360722e-14 2.1653544365963574e-14]), Elyte = (Volume = [4.150650000000001e-8, 4.15065e-8, 4.150649999999998e-8, 4.1506500000000015e-8, 4.15065e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.1506500000000015e-8, 4.150649999999996e-8, 4.1506500000000015e-8  …  6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], Mass = [2.1945849665328002e-5, 2.189294310654668e-5, 2.1788159652078428e-5, 2.163350235673774e-5, 2.143183995010795e-5, 2.118675614738006e-5, 2.090236453736898e-5, 2.0583107312917517e-5, 2.0233552882849377e-5, 1.9858212251584003e-5  …  2.6962942774499457e-5, 2.6195126142548415e-5, 2.5488520319982227e-5, 2.4829365185367293e-5, 2.4219220858580352e-5, 2.3680355645565634e-5, 2.3326590308752604e-5, 2.331792868915411e-5, 2.3312359983804338e-5, 2.3309619161914075e-5], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15  …  298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993, 0.29999999999999993  …  0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28], Conductivity = [0.1157449730305673, 0.11606652775731731, 0.1167029139425651, 0.11764086106148108, 0.11886092094663214, 0.12033805911527962, 0.12204250420571466, 0.12394081665202009, 0.12599712264463436, 0.12817439036063968  …  0.12223210515543873, 0.12470256060591244, 0.1268727830634557, 0.1287974170887019, 0.13048445743835868, 0.13189248187227626, 0.13277231764761704, 0.1327934003584807, 0.13280694303359453, 0.1328136051239624], ECTransmissibilities = [1192.3728813559326, 1192.372881355932, 1192.3728813559326, 1192.372881355934, 1192.3728813559305, 1192.3728813559335, 1192.3728813559278, 1192.372881355936, 1192.3728813559294, 1119.628647214855  …  886.764705882349, 764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], ChemCoef = [2.49924314084208e-6, 2.512242824584917e-6, 2.53816541298458e-6, 2.5768558816166825e-6, 2.6280789286046275e-6, 2.691518103344934e-6, 2.766778953977508e-6, 2.8533969043610383e-6, 2.9508507852345443e-6, 3.058580270962546e-6  …  3.1264347161128786e-6, 3.2831160941939524e-6, 3.4328529896996194e-6, 3.577444465080222e-6, 3.715608771309762e-6, 3.8411669458111565e-6, 3.925433617396579e-6, 3.927515294236022e-6, 3.928854109256943e-6, 3.929513185992811e-6], Charge = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0  …  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], Voltage = [-1.3333801662120677, -1.3335186267408705, -1.3337939932604224, -1.3342032330881073, -1.334741981489335, -1.3354047472456956, -1.3361851735397174, -1.3370763289440977, -1.33807101353097, -1.339162048925923  …  -1.3432461884978053, -1.3449585405270637, -1.3465874448838475, -1.3481553488622278, -1.3496504395542033, -1.35100748903293, -1.3519175094983524, -1.3519389686800418, -1.3519527744242112, -1.3519595741357189], Diffusivity = [9.74683587046272e-12, 9.807991206671544e-12, 9.930651571839526e-12, 1.0115434063765826e-11, 1.0363074303412139e-11, 1.0674239728143869e-11, 1.1049344655182878e-11, 1.1488396906887688e-11, 1.1990902541164651e-11, 1.2555834192377068e-11  …  1.3319680584303935e-11, 1.4193780294292571e-11, 1.5039529795914494e-11, 1.586420095207016e-11, 1.665828011750182e-11, 1.7384156750658177e-11, 1.7873223453154592e-11, 1.7885322346624746e-11, 1.7893104078844682e-11, 1.7896935018421153e-11], Concentration = [1762.442803362365, 1758.19394605236, 1749.7789223437649, 1737.3585949781148, 1721.1633479180332, 1701.4809846955745, 1678.641862308231, 1653.0027275179805, 1624.9304633289887, 1594.7873426719511  …  1487.8437655610273, 1445.4748298518714, 1406.4835714938083, 1370.1106923990997, 1336.4422816364233, 1306.7071279342865, 1287.1859816242977, 1286.7080242727204, 1286.4007372081624, 1286.249495750732], BruggemanCoefficient = [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5  …  1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5], DmuDc = [1.4065460875513616, 1.4099451514824881, 1.4167258491615136, 1.4268539821127804, 1.4402799319431263, 1.456940778004591, 1.4767634986736697, 1.4996690497447613, 1.5255773004118334, 1.5544122801031732  …  1.666140684245592, 1.7149776519155477, 1.7625211412668826, 1.8093114982276866, 1.854892698072227, 1.8971022477862027, 1.9258732343201848, 1.9265886143855804, 1.9270488253780043, 1.9272754141338038]), PeAm = (Volume = [6.472200000000007e-8, 6.472200000000006e-8, 6.472199999999998e-8, 6.472200000000006e-8, 6.472200000000007e-8, 6.472200000000006e-8, 6.472200000000006e-8, 6.472199999999996e-8, 6.472200000000017e-8, 6.472199999999996e-8], SurfaceConcentration = [12300.273634543519, 6031.887595109305, 4957.662033148967, 4905.101516896389, 5757.909992675495, 9580.446284038751, 22458.710081556204, 23773.61874328285, 23883.078149521818, 23992.988981688424], Temperature = [298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15, 298.15], VolumeFraction = [0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72], Conductivity = [0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177, 0.00610940258945177], ECTransmissibilities = [764.6739130434755, 764.6739130434821, 764.6739130434777, 764.6739130434719, 764.6739130434801, 764.6739130434777, 764.6739130434753, 764.6739130434778, 764.6739130434821], OpenCircuitPotential = [3.4323, 3.4323, 3.4323728316711297, 3.4323847817695574, 3.4323, 3.4323, 3.4307514964923835, 3.4114110121014636, 3.3979141986152332, 3.3843617223791536], ReactionRateConstant = [3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11, 3.626e-11], DiffusionCoefficient = [1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15, 1.25e-15], Charge = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], Voltage = [2.0883762055433417, 2.0871569600645272, 2.0856622850108075, 2.0839989859828756, 2.0820254061760157, 2.079170583133549, 2.072865688207688, 2.059415481245223, 2.0459085748930637, 2.032349698027513], ParticleConcentration = [12077.087615050246 5981.837127397039 … 23875.24108198864 23985.34043254; 12081.547714709204 5982.83057440759 … 23875.369074180962 23985.46587182354; … ; 12237.7405158248 6017.788341113599 … 23880.54281399142 23990.52090023291; 12277.935090433031 6026.841280962342 … 23882.12596587545 23992.062866752647], SolidDiffFlux = [-8.056794385644804e-21 -1.7945783522944986e-21 … -2.312071153938283e-22 -2.2659550069327974e-22; -6.445717272718053e-20 -1.436256210931154e-20 … -1.870612809349116e-21 -1.8328116860868876e-21; … ; -4.1293097112526826e-18 -9.276692200727734e-19 … -1.5176660062816157e-19 -1.479989070457847e-19; -5.881257207630181e-18 -1.324623242181575e-18 … -2.3164627364475824e-19 -2.2562004440942414e-19]), Control = (Controller = BattMo.CCController{Int64, Float64}(0, 0.06357915909518233, 6748.4375, false, &quot;discharging&quot;), ImaxDischarge = [0.06357915909518233], Voltage = [2.025544985757671], Current = [0.06357915909518233], ImaxCharge = [0.0]))), cross_terms = Any[JutulStorage{@NamedTuple{N::Int64, helper_mode::Bool, target::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, source::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, target_entities::Vector{Int64}, offdiagonal_alignment::@NamedTuple{from_source::@NamedTuple{Cells::Matrix{Int64}}}}}((N = 10, helper_mode = false, target = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(-0.006441043510202524,0.1267928806516729,-1.8273056855843454e-6) Dual{Cells()}(-0.006435543759035822,0.12668206146850963,-1.8301575242837776e-6) … Dual{Cells()}(-0.006262840506554091,0.12320102630746002,-1.9271103126848374e-6) Dual{Cells()}(-0.006223060525775272,0.12239948206957797,-1.9510628029405418e-6)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1899 1906 … 1962 1970; 2073 2080 … 2136 2144], nothing, 23, 23, Jutul.TrivialGlobalMap()),), source = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-0.006441043510202524,-0.1267928806516729,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0003300330652016201) Dual{Cells()}(-0.006435543759035822,-0.12668206146850963,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0003298272383163325) … Dual{Cells()}(-0.006262840506554091,-0.12320102630746002,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.00032347974484667565) Dual{Cells()}(-0.006223060525775272,-0.12239948206957797,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.00032204535353265874)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [14 30 … 142 157; 172 188 … 300 315; … ; 1594 1610 … 1722 1737; 1752 1768 … 1880 1895], nothing, 23, 10, Jutul.TrivialGlobalMap()),), target_entities = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], offdiagonal_alignment = (from_source = (Cells = [14 30 … 142 157; 172 188 … 300 315; … ; 1594 1610 … 1722 1737; 1752 1768 … 1880 1895],),))), JutulStorage{@NamedTuple{N::Int64, helper_mode::Bool, target::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, source::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, target_entities::Vector{Int64}, offdiagonal_alignment::@NamedTuple{from_source::@NamedTuple{Cells::Matrix{Int64}}}}}((N = 10, helper_mode = false, target = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(-6.675671127007662e-8,1.314115594989805e-6,-1.8938688717364063e-11) Dual{Cells()}(-6.669971036640143e-8,1.31296703510166e-6,-1.896824594242321e-11) … Dual{Cells()}(-6.490976730157596e-8,1.2768886483000363e-6,-1.9973090777249496e-11) Dual{Cells()}(-6.449747685718222e-8,1.268581227744077e-6,-2.0221340843200242e-11)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1901 1909 … 1965 1973; 2075 2083 … 2139 2147], nothing, 23, 23, Jutul.TrivialGlobalMap()),), source = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-6.675671127007662e-8,-1.314115594989805e-6,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-3.420551655697507e-9) Dual{Cells()}(-6.669971036640143e-8,-1.31296703510166e-6,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-3.4184184103730494e-9) … Dual{Cells()}(-6.490976730157596e-8,-1.2768886483000363e-6,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-3.3526312769417377e-9) Dual{Cells()}(-6.449747685718222e-8,-1.268581227744077e-6,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-3.3377648586903386e-9)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [15 31 … 143 158; 173 189 … 301 316; … ; 1595 1611 … 1723 1738; 1753 1769 … 1881 1896], nothing, 23, 10, Jutul.TrivialGlobalMap()),), target_entities = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], offdiagonal_alignment = (from_source = (Cells = [15 31 … 143 158; 173 189 … 301 316; … ; 1595 1611 … 1723 1738; 1753 1769 … 1881 1896],),))), JutulStorage{@NamedTuple{N::Int64, helper_mode::Bool, target::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, source::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, target_entities::Vector{Int64}, offdiagonal_alignment::@NamedTuple{from_source::@NamedTuple{Cells::Matrix{Int64}}}}}((N = 10, helper_mode = false, target = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(0.006441043510202524,0.1267928806516729,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0003300330652016201) Dual{Cells()}(0.006435543759035822,0.12668206146850963,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0003298272383163325) … Dual{Cells()}(0.006262840506554091,0.12320102630746002,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.00032347974484667565) Dual{Cells()}(0.006223060525775272,0.12239948206957797,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.00032204535353265874)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1 17 … 129 145; 159 175 … 287 303; … ; 1581 1597 … 1709 1725; 1739 1755 … 1867 1883], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 10, Jutul.TrivialGlobalMap()),), source = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.006441043510202524,-0.1267928806516729,1.8273056855843454e-6) Dual{Cells()}(0.006435543759035822,-0.12668206146850963,1.8301575242837776e-6) … Dual{Cells()}(0.006262840506554091,-0.12320102630746002,1.9271103126848374e-6) Dual{Cells()}(0.006223060525775272,-0.12239948206957797,1.9510628029405418e-6)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1897 1903 … 1959 1967; 2071 2077 … 2133 2141], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 23, Jutul.TrivialGlobalMap()),), target_entities = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], offdiagonal_alignment = (from_source = (Cells = [1897 1903 … 1959 1967; 2071 2077 … 2133 2141],),))), JutulStorage{@NamedTuple{N::Int64, helper_mode::Bool, target::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, source::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, target_entities::Vector{Int64}, offdiagonal_alignment::@NamedTuple{from_source::@NamedTuple{Cells::Matrix{Int64}}}}}((N = 10, helper_mode = false, target = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-3.0884846705386025e-14,-6.079727106420517e-13,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-1.582510754711578e-15) Dual{Cells()}(-3.085847536176255e-14,-6.074413319176894e-13,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-1.5815238134201731e-15) … Dual{Cells()}(-3.003036211117344e-14,-5.90749745041312e-13,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-1.5510875397848135e-15) Dual{Cells()}(-2.9839616837313514e-14,-5.869063350604036e-13,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-1.5442096238417234e-15)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [13 29 … 141 156; 171 187 … 299 314; … ; 1593 1609 … 1721 1736; 1751 1767 … 1879 1894], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 10, Jutul.TrivialGlobalMap()),), source = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(-3.0884846705386025e-14,6.079727106420517e-13,-8.761942982338015e-18) Dual{Cells()}(-3.085847536176255e-14,6.074413319176894e-13,-8.775617567973236e-18) … Dual{Cells()}(-3.003036211117344e-14,5.90749745041312e-13,-9.24050683672037e-18) Dual{Cells()}(-2.9839616837313514e-14,5.869063350604036e-13,-9.355359187676832e-18)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1898 1904 … 1960 1968; 2072 2078 … 2134 2142], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 23, Jutul.TrivialGlobalMap()),), target_entities = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], offdiagonal_alignment = (from_source = (Cells = [1898 1904 … 1960 1968; 2072 2078 … 2134 2142],),))), JutulStorage{@NamedTuple{N::Int64, helper_mode::Bool, target::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, source::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, target_entities::Vector{Int64}, offdiagonal_alignment::@NamedTuple{from_source::@NamedTuple{Cells::Matrix{Int64}}}}}((N = 10, helper_mode = false, target = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.005695950059792386,8.406478929483125,1.9141626935690354e-6) Dual{Cells()}(0.0012867245611439438,6.974169194604491,4.4508715564276e-7) … Dual{Cells()}(0.0002427906881785112,4.594020794330174,9.436821713326778e-8) Dual{Cells()}(0.0002361436088989339,4.502244399971827,9.179541359551956e-8)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [1994 2002 … 2058 2066; 2168 2176 … 2232 2240], nothing, 23, 23, Jutul.TrivialGlobalMap()),), source = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(0.005695950059792386,-8.406478929483125,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,2.940621148417302e-8) Dual{Cells()}(0.0012867245611439438,-6.974169194604491,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,7.50579345667755e-8) … Dual{Cells()}(0.0002427906881785112,-4.594020794330174,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0005665057763553214) Dual{Cells()}(0.0002361436088989339,-4.502244399971827,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0005551903496246142)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2245 2260 … 2372 2388; 2405 2420 … 2532 2548; … ; 3845 3860 … 3972 3988; 4005 4020 … 4132 4148], nothing, 23, 10, Jutul.TrivialGlobalMap()),), target_entities = [14, 15, 16, 17, 18, 19, 20, 21, 22, 23], offdiagonal_alignment = (from_source = (Cells = [2245 2260 … 2372 2388; 2405 2420 … 2532 2548; … ; 3845 3860 … 3972 3988; 4005 4020 … 4132 4148],),))), JutulStorage{@NamedTuple{N::Int64, helper_mode::Bool, target::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, source::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, target_entities::Vector{Int64}, offdiagonal_alignment::@NamedTuple{from_source::@NamedTuple{Cells::Matrix{Int64}}}}}((N = 10, helper_mode = false, target = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(5.90343618930747e-8,8.712701378349211e-5,1.9838898162406977e-11) Dual{Cells()}(1.3335960217679301e-8,7.228216957941896e-5,4.613003264486431e-12) … Dual{Cells()}(2.5163481420553944e-9,4.761366993563199e-5,9.780576414766953e-13) Dual{Cells()}(2.447456020529872e-9,4.666247464407958e-5,9.513924120535378e-13)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [1997 2005 … 2061 2068; 2171 2179 … 2235 2242], nothing, 23, 23, Jutul.TrivialGlobalMap()),), source = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(5.90343618930747e-8,-8.712701378349211e-5,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,3.047739029376663e-13) Dual{Cells()}(1.3335960217679301e-8,-7.228216957941896e-5,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,7.779206674300183e-13) … Dual{Cells()}(2.5163481420553944e-9,-4.761366993563199e-5,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-5.8714185807128145e-9) Dual{Cells()}(2.447456020529872e-9,-4.666247464407958e-5,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-5.754142447744141e-9)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2246 2261 … 2373 2389; 2406 2421 … 2533 2549; … ; 3846 3861 … 3973 3989; 4006 4021 … 4133 4149], nothing, 23, 10, Jutul.TrivialGlobalMap()),), target_entities = [14, 15, 16, 17, 18, 19, 20, 21, 22, 23], offdiagonal_alignment = (from_source = (Cells = [2246 2261 … 2373 2389; 2406 2421 … 2533 2549; … ; 3846 3861 … 3973 3989; 4006 4021 … 4133 4149],),))), JutulStorage{@NamedTuple{N::Int64, helper_mode::Bool, target::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, source::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, target_entities::Vector{Int64}, offdiagonal_alignment::@NamedTuple{from_source::@NamedTuple{Cells::Matrix{Int64}}}}}((N = 10, helper_mode = false, target = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-0.005695950059792386,8.406478929483125,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-2.940621148417302e-8) Dual{Cells()}(-0.0012867245611439438,6.974169194604491,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-7.50579345667755e-8) … Dual{Cells()}(-0.0002427906881785112,4.594020794330174,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0005665057763553214) Dual{Cells()}(-0.0002361436088989339,4.502244399971827,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0005551903496246142)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2247 2263 … 2375 2391; 2407 2423 … 2535 2551; … ; 3847 3863 … 3975 3991; 4007 4023 … 4135 4151], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 10, Jutul.TrivialGlobalMap()),), source = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(-0.005695950059792386,-8.406478929483125,-1.9141626935690354e-6) Dual{Cells()}(-0.0012867245611439438,-6.974169194604491,-4.4508715564276e-7) … Dual{Cells()}(-0.0002427906881785112,-4.594020794330174,-9.436821713326778e-8) Dual{Cells()}(-0.0002361436088989339,-4.502244399971827,-9.179541359551956e-8)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [1999 2007 … 2063 2069; 2173 2181 … 2237 2243], nothing, 10, 23, Jutul.TrivialGlobalMap()),), target_entities = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], offdiagonal_alignment = (from_source = (Cells = [1999 2007 … 2063 2069; 2173 2181 … 2237 2243],),))), JutulStorage{@NamedTuple{N::Int64, helper_mode::Bool, target::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, source::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, target_entities::Vector{Int64}, offdiagonal_alignment::@NamedTuple{from_source::@NamedTuple{Cells::Matrix{Int64}}}}}((N = 10, helper_mode = false, target = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(8.070539697977451e-18,-1.1911063335951624e-14,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,4.1665392894752504e-23) Dual{Cells()}(1.8231482969591428e-18,-9.881636733928554e-15,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,1.063489030294334e-22) … Dual{Cells()}(3.440079120559138e-19,-6.509226170309316e-15,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-8.026768685145033e-19) Dual{Cells()}(3.34589726039834e-19,-6.379189034057959e-15,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-7.866441435658858e-19)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2259 2275 … 2387 2402; 2419 2435 … 2547 2562; … ; 3859 3875 … 3987 4002; 4019 4035 … 4147 4162], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 10, Jutul.TrivialGlobalMap()),), source = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(8.070539697977451e-18,1.1911063335951624e-14,2.712159665142751e-21) Dual{Cells()}(1.8231482969591428e-18,9.881636733928554e-15,6.306399320512467e-22) … Dual{Cells()}(3.440079120559138e-19,6.509226170309316e-15,1.3370946630616215e-22) Dual{Cells()}(3.34589726039834e-19,6.379189034057959e-15,1.3006408443509143e-22)], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [2000 2008 … 2064 2070; 2174 2182 … 2238 2244], nothing, 10, 23, Jutul.TrivialGlobalMap()),), target_entities = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], offdiagonal_alignment = (from_source = (Cells = [2000 2008 … 2064 2070; 2174 2182 … 2238 2244],),))), JutulStorage{@NamedTuple{N::Int64, helper_mode::Bool, target::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, source::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, target_entities::Vector{Int64}, offdiagonal_alignment::@NamedTuple{from_source::@NamedTuple{Cells::Matrix{Int64}}}}}((N = 1, helper_mode = false, target = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(0.06357915929773789,9.343401568868082,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);;], [1, 2], [10], [2391; 2551; … ; 3991; 4151;;], nothing, 10, 10, Jutul.TrivialGlobalMap()),), source = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.06357915929773789,-9.343401568868082,-0.0);;], [1, 2], [1], [4165; 4168;;], nothing, 10, 1, Jutul.TrivialGlobalMap()),), target_entities = [10], offdiagonal_alignment = (from_source = (Cells = [4165; 4168;;],),))), JutulStorage{@NamedTuple{N::Int64, helper_mode::Bool, target::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, source::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, target_entities::Vector{Int64}, offdiagonal_alignment::@NamedTuple{from_source::@NamedTuple{Cells::Matrix{Int64}}}}}((N = 1, helper_mode = false, target = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(-0.06357915929773789,9.343401568868082,0.0);;], [1, 2], [1], [4166; 4169;;], [1], 1, 1, Jutul.TrivialGlobalMap()),), source = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(-0.06357915929773789,-9.343401568868082,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0);;], [1, 2], [10], [2403; 2563; … ; 4003; 4163;;], nothing, 1, 10, Jutul.TrivialGlobalMap()),), target_entities = [1], offdiagonal_alignment = (from_source = (Cells = [2403; 2563; … ; 4003; 4163;;],),))), JutulStorage{@NamedTuple{N::Int64, helper_mode::Bool, target::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}}, source::@NamedTuple{Cells::Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}}, target_entities::Vector{Int64}, offdiagonal_alignment::@NamedTuple{from_source::@NamedTuple{Cells::Matrix{Int64}}}}}((N = 1, helper_mode = false, target = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 2}, Matrix{ForwardDiff.Dual{Cells(), Float64, 2}}, Vector{Int64}, Matrix{Int64}, Vector{Int64}, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 2}[Dual{Cells()}(0.0,0.0,0.0);;], [1, 2], [1], [4167; 4170;;], [1], 1, 1, Jutul.TrivialGlobalMap()),), source = (Cells = Jutul.GenericAutoDiffCache{1, Cells(), ForwardDiff.Dual{Cells(), Float64, 12}, Matrix{ForwardDiff.Dual{Cells(), Float64, 12}}, Vector{Int64}, Matrix{Int64}, Nothing, Jutul.TrivialGlobalMap}(ForwardDiff.Dual{Cells(), Float64, 12}[Dual{Cells()}(0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0);;], [1, 2], [10], [2404; 2564; … ; 4004; 4164;;], nothing, 1, 10, Jutul.TrivialGlobalMap()),), target_entities = [1], offdiagonal_alignment = (from_source = (Cells = [2404; 2564; … ; 4004; 4164;;],),)))], LinearizedSystem = LinearizedSystem{EquationMajorLayout, SparseArrays.SparseMatrixCSC{Float64, Int64}, Vector{Float64}, Vector{Float64}, Vector{Float64}}(sparse([1, 2, 11, 21, 31, 41, 51, 61, 71, 81  …  276, 286, 287, 288, 176, 287, 288, 176, 287, 288], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1  …  286, 286, 286, 286, 287, 287, 287, 288, 288, 288], [450421.36983190634, -150140.4143463419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0  …  -3.612831551628262e-19, -1.147927298728712e-18, -0.0, -0.0, -9.343401568868082, 9.343401568968082, 0.0, -0.0, 0.0, 1.0], 288, 288), [2.765458366645046e-9, 2.7863353291301962e-9, 2.8282648540864375e-9, 2.8916178132498693e-9, 2.977229315512253e-9, 3.086004624584804e-9, 3.219232405822503e-9, 3.3780951525647085e-9, 3.563921535491843e-9, 3.779754377541966e-9  …  2.582094276439967e-30, -3.0499026599316267e-30, -2.443619913438525e-30, -1.8057519158574723e-30, -2.588449845256445e-30, 1.9220299362498517e-30, 1.5613995541633418e-30, -1.1529579612074187e-30, -1.0547118733938987e-15, 0.0], [-1.7938292191854823e-20, -1.0749579247864948e-13, -3.1597565206034837e-13, -6.124416620178496e-13, -9.774324374300826e-13, -1.3849482802854477e-12, -1.8024382349192433e-12, -2.1907294389337475e-12, -2.5040897192166665e-12, -2.6903185339930464e-12  …  -1.4026413676881687e-6, -1.62033437984e-6, -1.777599944062003e-6, -2.1096783661161646e-6, -5.698560658476326e-7, -3.451856414903195e-7, -3.843363206968431e-7, -4.021158419828603e-7, 5.0900074757814885e-5, -0.0], [450421.36983190634, -150140.4143463419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0  …  -3.612831551628262e-19, -1.147927298728712e-18, -0.0, -0.0, -9.343401568868082, 9.343401568968082, 0.0, -0.0, 0.0, 1.0], [2.765458366645046e-9, 2.7863353291301962e-9, 2.8282648540864375e-9, 2.8916178132498693e-9, 2.977229315512253e-9, 3.086004624584804e-9, 3.219232405822503e-9, 3.3780951525647085e-9, 3.563921535491843e-9, 3.779754377541966e-9  …  2.582094276439967e-30, -3.0499026599316267e-30, -2.443619913438525e-30, -1.8057519158574723e-30, -2.588449845256445e-30, 1.9220299362498517e-30, 1.5613995541633418e-30, -1.1529579612074187e-30, -1.0547118733938987e-15, 0.0], [-1.7938292191854823e-20, -1.0749579247864948e-13, -3.1597565206034837e-13, -6.124416620178496e-13, -9.774324374300826e-13, -1.3849482802854477e-12, -1.8024382349192433e-12, -2.1907294389337475e-12, -2.5040897192166665e-12, -2.6903185339930464e-12  …  -1.4026413676881687e-6, -1.62033437984e-6, -1.777599944062003e-6, -2.1096783661161646e-6, -5.698560658476326e-7, -3.451856414903195e-7, -3.843363206968431e-7, -4.021158419828603e-7, 5.0900074757814885e-5, -0.0], EquationMajorLayout(false)), multi_model_maps = (offset_map = [0, 120, 166, 286],), eq_maps = Jutul.MutableWrapper((mass_ind = [15, 31, 47, 63, 79, 95, 111, 127, 143, 158  …  4006, 4021, 4037, 4053, 4069, 4085, 4101, 4117, 4133, 4149], charge_ind = [14, 30, 46, 62, 78, 94, 110, 126, 142, 157  …  4005, 4020, 4036, 4052, 4068, 4084, 4100, 4116, 4132, 4148], mass_cons_map = [144, 145, 146, 147, 148, 149, 150, 151, 152, 153  …  157, 158, 159, 160, 161, 162, 163, 164, 165, 166], charge_cons_map = [121, 122, 123, 124, 125, 126, 127, 128, 129, 130  …  134, 135, 136, 137, 138, 139, 140, 141, 142, 143])), recorder = ProgressRecorder(Jutul.SolveRecorder(139, 300, 0, 6698.4375, 0, 50.0), Jutul.SolveRecorder(2, 4, 0, NaN, 0, 50.0)))))), {</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    [&quot;PositiveElectrode&quot;, &quot;ActiveMaterial&quot;, &quot;StoichiometricCoefficientAtSOC0&quot;] =&gt; (v0 = 0.999, vmin = 0.0, vmax = 1.0)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    [&quot;NegativeElectrode&quot;, &quot;ActiveMaterial&quot;, &quot;StoichiometricCoefficientAtSOC100&quot;] =&gt; (v0 = 0.51873811, vmin = 0.0, vmax = 1.0)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    [&quot;PositiveElectrode&quot;, &quot;ActiveMaterial&quot;, &quot;StoichiometricCoefficientAtSOC100&quot;] =&gt; (v0 = 0.14778, vmin = 0.0, vmax = 1.0)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    [&quot;NegativeElectrode&quot;, &quot;ActiveMaterial&quot;, &quot;StoichiometricCoefficientAtSOC0&quot;] =&gt; (v0 = 0.001, vmin = 0.0, vmax = 1.0)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}, missing, missing)</span></span></code></pre></div><p>&quot;MaximumConcentration&quot; of both electrodes</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">free_calibration_parameter!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc05,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;NegativeElectrode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ActiveMaterial&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MaximumConcentration&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	lower_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, upper_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">free_calibration_parameter!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc05,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PositiveElectrode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ActiveMaterial&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MaximumConcentration&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	lower_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, upper_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print_calibration_overview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc05)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">NegativeElectrode: Active calibration parameters</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">┌──────────────────────────────────────────────────┬───────────────┬────────────────────┐</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">                                             Name </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Initial value </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">             Bounds </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">├──────────────────────────────────────────────────┼───────────────┼────────────────────┤</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│              ActiveMaterial.MaximumConcentration │         31540 │ 10000.0 - 100000.0 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ ActiveMaterial.StoichiometricCoefficientAtSOC100 │      0.518738 │          0.0 - 1.0 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│   ActiveMaterial.StoichiometricCoefficientAtSOC0 │         0.001 │          0.0 - 1.0 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">└──────────────────────────────────────────────────┴───────────────┴────────────────────┘</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">PositiveElectrode: Active calibration parameters</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">┌──────────────────────────────────────────────────┬───────────────┬────────────────────┐</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">                                             Name </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Initial value </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">             Bounds </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">├──────────────────────────────────────────────────┼───────────────┼────────────────────┤</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│              ActiveMaterial.MaximumConcentration │         26390 │ 10000.0 - 100000.0 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│   ActiveMaterial.StoichiometricCoefficientAtSOC0 │         0.999 │          0.0 - 1.0 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ ActiveMaterial.StoichiometricCoefficientAtSOC100 │       0.14778 │          0.0 - 1.0 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">└──────────────────────────────────────────────────┴───────────────┴────────────────────┘</span></span></code></pre></div><h3 id="Solve-the-first-calibration-problem" tabindex="-1">Solve the first calibration problem <a class="header-anchor" href="#Solve-the-first-calibration-problem" aria-label="Permalink to &quot;Solve the first calibration problem {#Solve-the-first-calibration-problem}&quot;">​</a></h3><p>The calibration is performed by solving the optimization problem. This makes use of the adjoint method implemented in Jutul.jl and the LBFGS algorithm.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">solve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc05);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cell_parameters_calibrated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vc05</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">calibrated_cell_parameters;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print_calibration_overview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc05)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">Calibration: Starting calibration of 6 parameters.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">It.  | Objective  | Proj. grad | Linesearch-its</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">-----------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">   0 | 4.7318e-02 | 7.5025e+00 | -</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">   1 | 1.9629e-02 | 7.5021e+00 | 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">   2 | 1.2032e-02 | 1.2568e+00 | 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">   3 | 4.5957e-03 | 8.5363e-01 | 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">   4 | 4.5445e-03 | 1.4954e-01 | 2</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">   5 | 4.5420e-03 | 1.8979e-02 | 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">   6 | 4.5317e-03 | 1.9073e-02 | 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">   7 | 4.5096e-03 | 3.2554e-02 | 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">   8 | 4.4401e-03 | 7.7288e-02 | 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">   9 | 3.8201e-03 | 1.5348e-01 | 4</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">LBFGS: Line search unable to succeed in 5 iterations ...</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">  10 | 3.8192e-03 | 3.0847e-01 | 5</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">Calibration: Calibration finished in 164.467289026 seconds.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">NegativeElectrode: Active calibration parameters</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">┌──────────────────────────────────────────────────┬───────────────┬────────────────────┬─────────────────┬──────────┐</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">                                             Name </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Initial value </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">             Bounds </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Optimized value </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">   Change </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">├──────────────────────────────────────────────────┼───────────────┼────────────────────┼─────────────────┼──────────┤</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│              ActiveMaterial.MaximumConcentration │         31540 │ 10000.0 - 100000.0 │         27063.1 │  -14.19% │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ ActiveMaterial.StoichiometricCoefficientAtSOC100 │      0.518738 │          0.0 - 1.0 │        0.524655 │    1.14% │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│   ActiveMaterial.StoichiometricCoefficientAtSOC0 │         0.001 │          0.0 - 1.0 │       0.0263176 │ 2531.76% │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">└──────────────────────────────────────────────────┴───────────────┴────────────────────┴─────────────────┴──────────┘</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">PositiveElectrode: Active calibration parameters</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">┌──────────────────────────────────────────────────┬───────────────┬────────────────────┬─────────────────┬────────┐</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">                                             Name </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Initial value </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">             Bounds </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Optimized value </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Change </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">├──────────────────────────────────────────────────┼───────────────┼────────────────────┼─────────────────┼────────┤</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│              ActiveMaterial.MaximumConcentration │         26390 │ 10000.0 - 100000.0 │         27671.3 │  4.86% │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│   ActiveMaterial.StoichiometricCoefficientAtSOC0 │         0.999 │          0.0 - 1.0 │        0.998913 │ -0.01% │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ ActiveMaterial.StoichiometricCoefficientAtSOC100 │       0.14778 │          0.0 - 1.0 │        0.139125 │ -5.86% │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">└──────────────────────────────────────────────────┴───────────────┴────────────────────┴─────────────────┴────────┘</span></span></code></pre></div><h2 id="Compare-the-results-of-the-calibration-against-the-experimental-data" tabindex="-1">Compare the results of the calibration against the experimental data <a class="header-anchor" href="#Compare-the-results-of-the-calibration-against-the-experimental-data" aria-label="Permalink to &quot;Compare the results of the calibration against the experimental data {#Compare-the-results-of-the-calibration-against-the-experimental-data}&quot;">​</a></h2><p>We can now compare the results of the calibrated model against the experimental data for the 0.5C discharge curve.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sim_opt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, cell_parameters_calibrated, cycling_protocol)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">output_opt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sim_opt);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t_opt, V_opt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> get_tV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output_opt)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Figure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ax </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Axis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fig[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;CRate = 0.5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lines!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ax, t0, V0, label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;BattMo initial&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lines!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ax, t_exp_05, V_exp_05, label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Experimental data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lines!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ax, t_opt, V_opt, label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;BattMo calibrated&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, linestyle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :dash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">axislegend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :lb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig</span></span></code></pre></div><p><img src="`+r+`" alt=""></p><h2 id="Set-up-the-second-calibration" tabindex="-1">Set up the second calibration <a class="header-anchor" href="#Set-up-the-second-calibration" aria-label="Permalink to &quot;Set up the second calibration {#Set-up-the-second-calibration}&quot;">​</a></h2><p>The second calibration is performed against the 2.0C discharge curve. In the same manner as for the first discharge curve, we set up a set of parameters to calibrate against experimental data. The parameters are:</p><ul><li><p>The reaction rate constant of both electrodes</p></li><li><p>The diffusion coefficient of both electrodes</p></li></ul><p>The calibration this time around starts from the parameters calibrated in the first step, so we use the <code>cell_parameters_calibrated</code> from the first <code>solve</code> call when defining the new object:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t_exp_2, V_exp_2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> get_tV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df_2)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cycling_protocol2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> deepcopy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cycling_protocol)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cycling_protocol2[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DRate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sim2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, cell_parameters_calibrated, cycling_protocol2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">output2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sim2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t2, V2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> get_tV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output2)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sim2_0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, cell_parameters, cycling_protocol2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">output2_0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sim2_0);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t2_0, V2_0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> get_tV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output2_0)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vc2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> VoltageCalibration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t_exp_2, V_exp_2, sim2)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">free_calibration_parameter!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;NegativeElectrode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ActiveMaterial&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ReactionRateConstant&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	lower_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e-16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, upper_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e-10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">free_calibration_parameter!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PositiveElectrode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ActiveMaterial&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ReactionRateConstant&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	lower_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e-16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, upper_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e-10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">free_calibration_parameter!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;NegativeElectrode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ActiveMaterial&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DiffusionCoefficient&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	lower_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e-16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, upper_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e-12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">free_calibration_parameter!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PositiveElectrode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ActiveMaterial&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DiffusionCoefficient&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	lower_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e-16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, upper_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e-12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print_calibration_overview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc2)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of CellParameters passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of CyclingProtocol passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SimulationSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">Jutul: Simulating 33 minutes, 0.0002274 nanoseconds as 44 report steps</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">╭────────────────┬──────────┬──────────────┬──────────╮</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Iteration type </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Avg/step </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Avg/ministep </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">    Total </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">                │</span><span style="--shiki-light:#959da5;--shiki-dark:#959da5;"> 34 steps </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#959da5;--shiki-dark:#959da5;"> 36 ministeps </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#959da5;--shiki-dark:#959da5;"> (wasted) </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">├────────────────┼──────────┼──────────────┼──────────┤</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Newton         </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│  4.29412 │      4.05556 │ 146 (20) │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Linearization  </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│  5.35294 │      5.05556 │ 182 (21) │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Linear solver  </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│  4.29412 │      4.05556 │ 146 (20) │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Precond apply  </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│      0.0 │          0.0 │    0 (0) │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">╰────────────────┴──────────┴──────────────┴──────────╯</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">╭───────────────┬────────┬────────────┬──────────╮</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Timing type   </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">   Each </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">   Relative </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">    Total </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">               │</span><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">     ms </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#959da5;--shiki-dark:#959da5;"> Percentage </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">       ms </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">├───────────────┼────────┼────────────┼──────────┤</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Properties    </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ 0.6428 │    10.85 % │  93.8452 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Equations     </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ 0.5782 │    12.16 % │ 105.2308 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Assembly      </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ 0.0765 │     1.61 % │  13.9268 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Linear solve  </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ 0.2670 │     4.50 % │  38.9767 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Linear setup  </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ 0.0000 │     0.00 % │   0.0000 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Precond apply </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ 0.0000 │     0.00 % │   0.0000 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Update        </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ 0.0530 │     0.89 % │   7.7404 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Convergence   </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ 3.0101 │    63.31 % │ 547.8377 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Input/Output  </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ 0.0243 │     0.10 % │   0.8754 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Other         </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ 0.3897 │     6.57 % │  56.8917 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">├───────────────┼────────┼────────────┼──────────┤</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Total         </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ 5.9269 │   100.00 % │ 865.3247 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">╰───────────────┴────────┴────────────┴──────────╯</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of CellParameters passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of CyclingProtocol passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SimulationSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">Jutul: Simulating 33 minutes, 0.0002274 nanoseconds as 44 report steps</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">╭────────────────┬──────────┬──────────────┬──────────╮</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Iteration type </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Avg/step </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Avg/ministep </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">    Total </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">                │</span><span style="--shiki-light:#959da5;--shiki-dark:#959da5;"> 32 steps </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#959da5;--shiki-dark:#959da5;"> 32 ministeps </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#959da5;--shiki-dark:#959da5;"> (wasted) </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">├────────────────┼──────────┼──────────────┼──────────┤</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Newton         </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│  3.71875 │      3.71875 │  119 (0) │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Linearization  </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│  4.71875 │      4.71875 │  151 (0) │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Linear solver  </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│  3.71875 │      3.71875 │  119 (0) │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Precond apply  </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│      0.0 │          0.0 │    0 (0) │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">╰────────────────┴──────────┴──────────────┴──────────╯</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">╭───────────────┬────────┬────────────┬──────────╮</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Timing type   </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">   Each </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">   Relative </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">    Total </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">               │</span><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">     ms </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#959da5;--shiki-dark:#959da5;"> Percentage </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#959da5;--shiki-dark:#959da5;">       ms </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">├───────────────┼────────┼────────────┼──────────┤</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Properties    </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ 0.2634 │    17.11 % │  31.3454 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Equations     </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ 0.5794 │    47.77 % │  87.4910 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Assembly      </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ 0.0740 │     6.10 % │  11.1811 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Linear solve  </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ 0.2677 │    17.39 % │  31.8527 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Linear setup  </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ 0.0000 │     0.00 % │   0.0000 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Precond apply </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ 0.0000 │     0.00 % │   0.0000 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Update        </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ 0.0523 │     3.40 % │   6.2269 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Convergence   </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ 0.0733 │     6.05 % │  11.0735 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Input/Output  </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ 0.0273 │     0.48 % │   0.8732 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Other         </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ 0.0262 │     1.70 % │   3.1139 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">├───────────────┼────────┼────────────┼──────────┤</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Total         </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ 1.5391 │   100.00 % │ 183.1577 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">╰───────────────┴────────┴────────────┴──────────╯</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">NegativeElectrode: Active calibration parameters</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">┌─────────────────────────────────────┬───────────────┬───────────────────┐</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">                                Name </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Initial value </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">            Bounds </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">├─────────────────────────────────────┼───────────────┼───────────────────┤</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ ActiveMaterial.DiffusionCoefficient │       3.9e-14 │ 1.0e-16 - 1.0e-12 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ ActiveMaterial.ReactionRateConstant │     1.764e-11 │ 1.0e-16 - 1.0e-10 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">└─────────────────────────────────────┴───────────────┴───────────────────┘</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">PositiveElectrode: Active calibration parameters</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">┌─────────────────────────────────────┬───────────────┬───────────────────┐</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">                                Name </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Initial value </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">            Bounds </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">├─────────────────────────────────────┼───────────────┼───────────────────┤</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ ActiveMaterial.ReactionRateConstant │     3.626e-11 │ 1.0e-16 - 1.0e-10 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ ActiveMaterial.DiffusionCoefficient │      1.25e-15 │ 1.0e-16 - 1.0e-12 │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">└─────────────────────────────────────┴───────────────┴───────────────────┘</span></span></code></pre></div><h3 id="Solve-the-second-calibration-problem" tabindex="-1">Solve the second calibration problem <a class="header-anchor" href="#Solve-the-second-calibration-problem" aria-label="Permalink to &quot;Solve the second calibration problem {#Solve-the-second-calibration-problem}&quot;">​</a></h3><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cell_parameters_calibrated2, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc2);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print_calibration_overview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc2)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">Calibration: Starting calibration of 4 parameters.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">It.  | Objective  | Proj. grad | Linesearch-its</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">-----------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">   0 | 3.8718e-02 | 6.5451e+00 | -</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">LBFGS: Resetting &#39;m&#39; to number of parameters: m = 4</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">   1 | 4.7806e-03 | 6.5356e+00 | 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">   2 | 1.8089e-03 | 2.1126e+00 | 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">   3 | 1.5685e-03 | 3.3325e-01 | 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">   4 | 1.4933e-03 | 1.1580e-01 | 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">   5 | 1.3521e-03 | 9.0950e-02 | 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">   6 | 1.3397e-03 | 2.3756e-02 | 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">   7 | 1.3383e-03 | 6.5287e-03 | 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">✔️ Validation of SolverSettings passed: No issues found.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">──────────────────────────────────────────────────</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">   8 | 1.3378e-03 | 3.6928e-03 | 1</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">Calibration: Calibration finished in 61.692529896 seconds.</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">NegativeElectrode: Active calibration parameters</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">┌─────────────────────────────────────┬───────────────┬───────────────────┬─────────────────┬─────────┐</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">                                Name </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Initial value </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">            Bounds </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Optimized value </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">  Change </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">├─────────────────────────────────────┼───────────────┼───────────────────┼─────────────────┼─────────┤</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ ActiveMaterial.DiffusionCoefficient │       3.9e-14 │ 1.0e-16 - 1.0e-12 │       1.164e-13 │ 198.46% │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ ActiveMaterial.ReactionRateConstant │     1.764e-11 │ 1.0e-16 - 1.0e-10 │     1.78583e-11 │   1.24% │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">└─────────────────────────────────────┴───────────────┴───────────────────┴─────────────────┴─────────┘</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">PositiveElectrode: Active calibration parameters</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">┌─────────────────────────────────────┬───────────────┬───────────────────┬─────────────────┬─────────┐</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">                                Name </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Initial value </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">            Bounds </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;"> Optimized value </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span><span style="--shiki-light:#24292e;--shiki-light-font-weight:bold;--shiki-dark:#e1e4e8;--shiki-dark-font-weight:bold;">  Change </span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">├─────────────────────────────────────┼───────────────┼───────────────────┼─────────────────┼─────────┤</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ ActiveMaterial.ReactionRateConstant │     3.626e-11 │ 1.0e-16 - 1.0e-10 │     3.62414e-11 │  -0.05% │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">│ ActiveMaterial.DiffusionCoefficient │      1.25e-15 │ 1.0e-16 - 1.0e-12 │     2.03738e-14 │ 1529.9% │</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">└─────────────────────────────────────┴───────────────┴───────────────────┴─────────────────┴─────────┘</span></span></code></pre></div><h2 id="Compare-the-results-of-the-second-calibration-against-the-experimental-data" tabindex="-1">Compare the results of the second calibration against the experimental data <a class="header-anchor" href="#Compare-the-results-of-the-second-calibration-against-the-experimental-data" aria-label="Permalink to &quot;Compare the results of the second calibration against the experimental data {#Compare-the-results-of-the-second-calibration-against-the-experimental-data}&quot;">​</a></h2><p>We can now compare the results of the calibrated model against the experimental data for the 2.0C discharge curve. We compare three simulations against the experimental data:</p><ol><li><p>The initial simulation with the original parameters.</p></li><li><p>The simulation with the parameters calibrated against the 0.5C discharge curve.</p></li><li><p>The simulation with the parameters calibrated against the 0.5C and 2.0C discharge curves.</p></li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sim_c2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, cell_parameters_calibrated2, cycling_protocol2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">output2_c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sim_c2, accept_invalid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t2_c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [state[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:Control</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:Controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> output2_c[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:states</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">V2_c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [state[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:Control</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:Voltage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> output2_c[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:states</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Figure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ax </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Axis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fig[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;CRate = 2.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lines!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ax, t2_0, V2_0, label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;BattMo.jl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lines!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ax, t2, V2, label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;BattMo.jl (after CRate=0.5 calibration)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lines!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ax, t_exp_2, V_exp_2, label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Experimental data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lines!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ax, t2_c, V2_c, label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;BattMo.jl (after CRate=0.5 + Crate=2.0 calibration)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, linestyle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :dash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">axislegend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :lb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig</span></span></code></pre></div><p><img src="`+u+`" alt=""></p><h2 id="Compare-the-results-of-the-calibrated-model-against-the-experimental-data" tabindex="-1">Compare the results of the calibrated model against the experimental data <a class="header-anchor" href="#Compare-the-results-of-the-calibrated-model-against-the-experimental-data" aria-label="Permalink to &quot;Compare the results of the calibrated model against the experimental data {#Compare-the-results-of-the-calibrated-model-against-the-experimental-data}&quot;">​</a></h2><p>We can now compare the results of the calibrated model against the experimental data for the 0.5C, 1.0C, and 2.0C discharge curves.</p><p>Note that we did not calibrate the model for the 1.0C discharge curve, but we still obtain a good fit.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CRates </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">outputs_base </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">outputs_calibrated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CRate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CRates</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	cycling_protocol[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DRate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CRate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	simuc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, cell_parameters, cycling_protocol)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(simuc, info_level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	push!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(outputs_base, (CRate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CRate, output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> output))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	simc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, cell_parameters_calibrated2, cycling_protocol)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	output_c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(simc, info_level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	push!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(outputs_calibrated, (CRate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CRate, output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> output_c))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">colors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Makie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">wong_colors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Figure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ax </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Axis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fig[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], ylabel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Voltage / V&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, xlabel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Time / s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Discharge curve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i, data) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enumerate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(outputs_base)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	t_i, V_i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> get_tV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">output)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	lines!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ax, t_i, V_i, label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Simulation (initial) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$(round(data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CRate, digits </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2))</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colors[i])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i, data) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enumerate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(outputs_calibrated)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	t_i, V_i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> get_tV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">output)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	lines!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ax, t_i, V_i, label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Simulation (calibrated) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$(round(data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CRate, digits </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2))</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colors[i], linestyle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :dash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i, df) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enumerate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dfs)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	t_i, V_i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> get_tV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Experimental </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$(round(CRates[i], digits </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2))</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	lines!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ax, t_i, V_i, linestyle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> label, color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colors[i])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Legend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fig, ax, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C rate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, framevisible </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig</span></span></code></pre></div><p><img src="`+p+'" alt=""></p><h2 id="Example-on-GitHub" tabindex="-1">Example on GitHub <a class="header-anchor" href="#Example-on-GitHub" aria-label="Permalink to &quot;Example on GitHub {#Example-on-GitHub}&quot;">​</a></h2><p>If you would like to run this example yourself, it can be downloaded from the BattMo.jl GitHub repository <a href="https://github.com/BattMoTeam/BattMo.jl/blob/main/examples/example_calibration.jl" target="_blank" rel="noreferrer">as a script</a>.</p><hr><p><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl" target="_blank" rel="noreferrer">Literate.jl</a>.</em></p>',40))])}const M=n(c,[["render",y]]);export{b as __pageData,M as default};
