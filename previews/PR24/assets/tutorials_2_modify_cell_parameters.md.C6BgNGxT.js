import{_ as a,c as e,o as s,aA as i}from"./chunks/framework.DCHMZPbW.js";const g=JSON.parse('{"title":"Change input parameters","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/2_modify_cell_parameters.md","filePath":"tutorials/2_modify_cell_parameters.md","lastUpdated":null}'),n={name:"tutorials/2_modify_cell_parameters.md"};function o(l,t,u,p,r,c){return s(),e("div",null,t[0]||(t[0]=[i(`<h1 id="Change-input-parameters" tabindex="-1">Change input parameters <a class="header-anchor" href="#Change-input-parameters" aria-label="Permalink to &quot;Change input parameters {#Change-input-parameters}&quot;">​</a></h1><p>One way to change the values of our input parameters is the alter the value in the JSON file, which speaks for itself. But, as we saw in the first tutorial, BattMo uses the function <code>readBattMoJsonInputFile</code> to convert the JSON data to a Julia dict before running the simulation. Therefore, it is also possible to change the input parameters by altering the dict.</p><p>We create the input parameter dict like shown in the first tutorial.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BattMo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file_path_cell </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pathof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BattMo)), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/../test/data/jsonfiles/cell_parameters/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cell_parameter_set_chen2020_calibrated.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file_path_cycling </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pathof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BattMo)), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/../test/data/jsonfiles/cycling_protocols/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CCDischarge.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cell_parameters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> read_cell_parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file_path_cell)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cycling_protocol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> read_cycling_protocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file_path_cycling)</span></span></code></pre></div><p>We instantiate the model that we would like to work with.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LithiumIonBatteryModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>LithiumIonBatteryModel(&quot;1D Doyle-Fuller-Newman lithium-ion model&quot;, ModelSettings(Dict{String, Any}(&quot;TimeStepDuration&quot; =&gt; 50, &quot;GridPointsPositiveElectrodeActiveMaterial&quot; =&gt; 10, &quot;GridPointsSeparator&quot; =&gt; 10, &quot;GridPointsNegativeElectrodeActiveMaterial&quot; =&gt; 10, &quot;UseThermalModel&quot; =&gt; false, &quot;UseCurrentCollectors&quot; =&gt; false, &quot;GridPointsPositiveElectrode&quot; =&gt; 10, &quot;GridPointsNegativeElectrode&quot; =&gt; 10, &quot;ModelGeometry&quot; =&gt; &quot;1D&quot;, &quot;Grid&quot; =&gt; Any[]…)), true)</span></span></code></pre></div><p>We have an <code>inputparams</code> object that corresponds to the json file <a href="https://github.com/BattMoTeam/BattMo.jl/blob/main/test/data/jsonfiles/p2d_40_jl_chen2020.json" target="_blank" rel="noreferrer">p2d_40_jl_chen2020.json</a> which we can investigate directly.</p><p>We can for example inspect the parameters for the electrolyte</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cell_parameters[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Electrolyte&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Dict{String, Any} with 9 entries:</span></span>
<span class="line"><span>  &quot;TransferenceNumber&quot;   =&gt; 0.2594</span></span>
<span class="line"><span>  &quot;Description&quot;          =&gt; &quot;1 mol/l LiPF6 with ethylene carbonate (EC): ethyl …</span></span>
<span class="line"><span>  &quot;SpecificHeatCapacity&quot; =&gt; 1518.0</span></span>
<span class="line"><span>  &quot;DiffusionCoefficient&quot; =&gt; Dict{String, Any}(&quot;functionname&quot;=&gt;&quot;computeDiffusion…</span></span>
<span class="line"><span>  &quot;IonicConductivity&quot;    =&gt; Dict{String, Any}(&quot;functionname&quot;=&gt;&quot;computeElectroly…</span></span>
<span class="line"><span>  &quot;Density&quot;              =&gt; 1200</span></span>
<span class="line"><span>  &quot;ThermalConductivity&quot;  =&gt; 0.099</span></span>
<span class="line"><span>  &quot;ChargeNumber&quot;         =&gt; 1</span></span>
<span class="line"><span>  &quot;Concentration&quot;        =&gt; 1000</span></span></code></pre></div><p>or of the active material of the negative electrode. At the active material, we find all the parameters related to the active material reactions.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">active_material_params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cell_parameters[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;NegativeElectrode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ActiveMaterial&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Dict{String, Any} with 18 entries:</span></span>
<span class="line"><span>  &quot;ActivationEnergyOfDiffusion&quot;       =&gt; 5000</span></span>
<span class="line"><span>  &quot;NumberOfElectronsTransfered&quot;       =&gt; 1</span></span>
<span class="line"><span>  &quot;StoichiometricCoefficientAtSOC0&quot;   =&gt; 0.0279</span></span>
<span class="line"><span>  &quot;ReactionRateConstant&quot;              =&gt; 6.716e-12</span></span>
<span class="line"><span>  &quot;MassFraction&quot;                      =&gt; 1.0</span></span>
<span class="line"><span>  &quot;StoichiometricCoefficientAtSOC100&quot; =&gt; 0.9014</span></span>
<span class="line"><span>  &quot;ActivationEnergyOfReaction&quot;        =&gt; 35000</span></span>
<span class="line"><span>  &quot;OpenCircuitVoltage&quot;                =&gt; Dict{String, Any}(&quot;functionname&quot;=&gt;&quot;com…</span></span>
<span class="line"><span>  &quot;MaximumConcentration&quot;              =&gt; 33133.0</span></span>
<span class="line"><span>  &quot;VolumetricSurfaceArea&quot;             =&gt; 383959.0</span></span>
<span class="line"><span>  &quot;Description&quot;                       =&gt; &quot;Graphite-SiOx&quot;</span></span>
<span class="line"><span>  &quot;SpecificHeatCapacity&quot;              =&gt; 632.0</span></span>
<span class="line"><span>  &quot;DiffusionCoefficient&quot;              =&gt; 3.3e-14</span></span>
<span class="line"><span>  &quot;ParticleRadius&quot;                    =&gt; 5.86e-6</span></span>
<span class="line"><span>  &quot;Density&quot;                           =&gt; 2260.0</span></span>
<span class="line"><span>  &quot;ElectronicConductivity&quot;            =&gt; 215</span></span>
<span class="line"><span>  &quot;ThermalConductivity&quot;               =&gt; 1.04</span></span>
<span class="line"><span>  &quot;ChargeTransferCoefficient&quot;         =&gt; 0.5</span></span></code></pre></div><p>We can directly change one of these parameters. Let us for example change the reaction rate constant,</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">active_material_params[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ReactionRateConstant&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e-13</span></span></code></pre></div><p>We setup the simulation object and check if it&#39;s valid</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sim </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, cell_parameters, cycling_protocol)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Simulation(BattMo.run_battery, LithiumIonBatteryModel(&quot;1D Doyle-Fuller-Newman lithium-ion model&quot;, ModelSettings(Dict{String, Any}(&quot;TimeStepDuration&quot; =&gt; 50, &quot;GridPointsPositiveElectrodeActiveMaterial&quot; =&gt; 10, &quot;GridPointsSeparator&quot; =&gt; 10, &quot;GridPointsNegativeElectrodeActiveMaterial&quot; =&gt; 10, &quot;UseThermalModel&quot; =&gt; false, &quot;UseCurrentCollectors&quot; =&gt; false, &quot;GridPointsPositiveElectrode&quot; =&gt; 10, &quot;GridPointsNegativeElectrode&quot; =&gt; 10, &quot;ModelGeometry&quot; =&gt; &quot;1D&quot;, &quot;Grid&quot; =&gt; Any[]…)), true), CellParameters(Dict{String, Any}(&quot;Electrolyte&quot; =&gt; Dict{String, Any}(&quot;TransferenceNumber&quot; =&gt; 0.2594, &quot;Description&quot; =&gt; &quot;1 mol/l LiPF6 with ethylene carbonate (EC): ethyl methyl carbonate (EMC) (3:7, V:V)&quot;, &quot;SpecificHeatCapacity&quot; =&gt; 1518.0, &quot;DiffusionCoefficient&quot; =&gt; Dict{String, Any}(&quot;functionname&quot; =&gt; &quot;computeDiffusionCoefficient_Chen2020&quot;, &quot;argumentlist&quot; =&gt; Any[&quot;c&quot;], &quot;type&quot; =&gt; &quot;function&quot;), &quot;IonicConductivity&quot; =&gt; Dict{String, Any}(&quot;functionname&quot; =&gt; &quot;computeElectrolyteConductivity_Chen2020&quot;, &quot;argumentlist&quot; =&gt; Any[&quot;c&quot;], &quot;type&quot; =&gt; &quot;function&quot;), &quot;Density&quot; =&gt; 1200, &quot;ThermalConductivity&quot; =&gt; 0.099, &quot;ChargeNumber&quot; =&gt; 1, &quot;Concentration&quot; =&gt; 1000), &quot;Cell&quot; =&gt; Dict{String, Any}(&quot;HeatTransferCoefficient&quot; =&gt; 1000.0, &quot;DeviceSurfaceArea&quot; =&gt; 0.0053, &quot;InnerCellRadius&quot; =&gt; 0.001, &quot;NominalVoltage&quot; =&gt; 3.71, &quot;ElectrodeLength&quot; =&gt; 1.58, &quot;Name&quot; =&gt; &quot;LG INR 21700 M50&quot;, &quot;ElectrodeGeometricSurfaceArea&quot; =&gt; 0.1027, &quot;DoubleCoatedElectrodes&quot; =&gt; true, &quot;Case&quot; =&gt; &quot;Cylindrical&quot;, &quot;NominalCapacity&quot; =&gt; 4.8…), &quot;Metadata&quot; =&gt; Dict{String, Any}(&quot;Description&quot; =&gt; &quot;Parameter set of a cylindrical 21700 commercial cell (LGM50), for an electrochemical pseudo-two-dimensional (P2D) model, after calibration.&quot;, &quot;Source&quot; =&gt; &quot;https://doi.org/10.1149/1945-7111/ab9050&quot;, &quot;Title&quot; =&gt; &quot;Chen2020&quot;), &quot;PositiveElectrode&quot; =&gt; Dict{String, Any}(&quot;ActiveMaterial&quot; =&gt; Dict{String, Any}(&quot;NumberOfElectronsTransfered&quot; =&gt; 1, &quot;StoichiometricCoefficientAtSOC0&quot; =&gt; 0.9084, &quot;ReactionRateConstant&quot; =&gt; 3.545e-11, &quot;MassFraction&quot; =&gt; 1.0, &quot;StoichiometricCoefficientAtSOC100&quot; =&gt; 0.27, &quot;ActivationEnergyOfReaction&quot; =&gt; 17800.0, &quot;OpenCircuitVoltage&quot; =&gt; Dict{String, Any}(&quot;functionname&quot; =&gt; &quot;computeOCP_NMC811_Chen2020&quot;, &quot;argumentlist&quot; =&gt; Any[&quot;c&quot;, &quot;cmax&quot;], &quot;type&quot; =&gt; &quot;function&quot;), &quot;MaximumConcentration&quot; =&gt; 63104.0, &quot;VolumetricSurfaceArea&quot; =&gt; 383959.0, &quot;Description&quot; =&gt; &quot;NMC811&quot;…), &quot;ElectrodeCoating&quot; =&gt; Dict{String, Any}(&quot;SurfaceCoefficientOfHeatTransfer&quot; =&gt; 1000, &quot;BruggemanCoefficient&quot; =&gt; 1.5, &quot;EffectiveDensity&quot; =&gt; 3292, &quot;Thickness&quot; =&gt; 7.56e-5), &quot;Binder&quot; =&gt; Dict{String, Any}(&quot;Description&quot; =&gt; &quot;Unknown&quot;, &quot;MassFraction&quot; =&gt; 0.0, &quot;SpecificHeatCapacity&quot; =&gt; 1400, &quot;Density&quot; =&gt; 1780.0, &quot;ElectronicConductivity&quot; =&gt; 100, &quot;ThermalConductivity&quot; =&gt; 0.165), &quot;CurrentCollector&quot; =&gt; Dict{String, Any}(&quot;Description&quot; =&gt; &quot;Aluminum&quot;, &quot;Density&quot; =&gt; 2700, &quot;ElectronicConductivity&quot; =&gt; 5.96e7, &quot;Thickness&quot; =&gt; 1.63e-5), &quot;ConductiveAdditive&quot; =&gt; Dict{String, Any}(&quot;Description&quot; =&gt; &quot;Unknown&quot;, &quot;MassFraction&quot; =&gt; 0.0, &quot;SpecificHeatCapacity&quot; =&gt; 300.0, &quot;Density&quot; =&gt; 1800.0, &quot;ElectronicConductivity&quot; =&gt; 100, &quot;ThermalConductivity&quot; =&gt; 0.5)), &quot;Separator&quot; =&gt; Dict{String, Any}(&quot;Description&quot; =&gt; &quot;Ceramic-coated Polyolefin&quot;, &quot;SpecificHeatCapacity&quot; =&gt; 1692.0, &quot;Density&quot; =&gt; 946, &quot;BruggemanCoefficient&quot; =&gt; 1.5, &quot;Thickness&quot; =&gt; 1.2e-5, &quot;ThermalConductivity&quot; =&gt; 0.334, &quot;Porosity&quot; =&gt; 0.47), &quot;NegativeElectrode&quot; =&gt; Dict{String, Any}(&quot;ActiveMaterial&quot; =&gt; Dict{String, Any}(&quot;ActivationEnergyOfDiffusion&quot; =&gt; 5000, &quot;NumberOfElectronsTransfered&quot; =&gt; 1, &quot;StoichiometricCoefficientAtSOC0&quot; =&gt; 0.0279, &quot;ReactionRateConstant&quot; =&gt; 1.0e-13, &quot;MassFraction&quot; =&gt; 1.0, &quot;StoichiometricCoefficientAtSOC100&quot; =&gt; 0.9014, &quot;ActivationEnergyOfReaction&quot; =&gt; 35000, &quot;OpenCircuitVoltage&quot; =&gt; Dict{String, Any}(&quot;functionname&quot; =&gt; &quot;computeOCP_Graphite_SiOx_Chen2020&quot;, &quot;argumentlist&quot; =&gt; Any[&quot;c&quot;, &quot;cmax&quot;], &quot;type&quot; =&gt; &quot;function&quot;), &quot;MaximumConcentration&quot; =&gt; 33133.0, &quot;VolumetricSurfaceArea&quot; =&gt; 383959.0…), &quot;ElectrodeCoating&quot; =&gt; Dict{String, Any}(&quot;SurfaceCoefficientOfHeatTransfer&quot; =&gt; 1000, &quot;BruggemanCoefficient&quot; =&gt; 1.5, &quot;EffectiveDensity&quot; =&gt; 1695, &quot;Thickness&quot; =&gt; 8.52e-5), &quot;Binder&quot; =&gt; Dict{String, Any}(&quot;Description&quot; =&gt; &quot;Unknown&quot;, &quot;MassFraction&quot; =&gt; 0.0, &quot;SpecificHeatCapacity&quot; =&gt; 632.0, &quot;Density&quot; =&gt; 1100.0, &quot;ElectronicConductivity&quot; =&gt; 100.0, &quot;ThermalConductivity&quot; =&gt; 1.04), &quot;CurrentCollector&quot; =&gt; Dict{String, Any}(&quot;Description&quot; =&gt; &quot;Copper&quot;, &quot;Density&quot; =&gt; 8960, &quot;ElectronicConductivity&quot; =&gt; 3.55e7, &quot;Thickness&quot; =&gt; 1.17e-5), &quot;ConductiveAdditive&quot; =&gt; Dict{String, Any}(&quot;Description&quot; =&gt; &quot;Unknown&quot;, &quot;MassFraction&quot; =&gt; 0.0, &quot;SpecificHeatCapacity&quot; =&gt; 632.0, &quot;Density&quot; =&gt; 1950.0, &quot;ElectronicConductivity&quot; =&gt; 100.0, &quot;ThermalConductivity&quot; =&gt; 1.04)))), CyclingProtocol(Dict{String, Any}(&quot;InitialControl&quot; =&gt; &quot;discharging&quot;, &quot;AmbientKelvinTemperature&quot; =&gt; 298.15, &quot;InitialStateOfCharge&quot; =&gt; 0.99, &quot;DRate&quot; =&gt; 1.0, &quot;LowerVoltageLimit&quot; =&gt; 2.5, &quot;InitialKelvinTemperature&quot; =&gt; 298.15, &quot;Protocol&quot; =&gt; &quot;CCDischarge&quot;, &quot;UpperVoltageLimit&quot; =&gt; 4.1)), SimulationSettings(Dict{String, Any}(&quot;Grid&quot; =&gt; Any[], &quot;TimeStepDuration&quot; =&gt; 50, &quot;RampUpSteps&quot; =&gt; 5, &quot;RampUpTime&quot; =&gt; 10, &quot;GridPoints&quot; =&gt; Dict(&quot;PositiveElectrodeCoating&quot; =&gt; 10, &quot;PositiveElectrodeCurrentCollector&quot; =&gt; 10, &quot;NegativeElectrodeCurrentCollectorTabLength&quot; =&gt; 10, &quot;Separator&quot; =&gt; 10, &quot;PositiveElectrodeCurrentCollectorTabWidth&quot; =&gt; 10, &quot;PositiveElectrodeCurrentCollectorTabLength&quot; =&gt; 10, &quot;NegativeElectrodeCoating&quot; =&gt; 10, &quot;NegativeElectrodeActiveMaterial&quot; =&gt; 10, &quot;NegativeElectrodeCurrentCollector&quot; =&gt; 10, &quot;ElectrodeWidth&quot; =&gt; 5…))), false)</span></span></code></pre></div><p>sim.is_valid</p><p>Then we solve for the simulation</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>output = solve(sim);</span></span>
<span class="line highlighted"><span></span></span>
<span class="line"><span>states = output[:states]</span></span>
<span class="line"><span>t = [state[:Control][:ControllerCV].time for state in states]</span></span>
<span class="line"><span>E = [state[:Control][:Phi][1] for state in states]</span></span>
<span class="line"><span>I = [state[:Control][:Current][1] for state in states]</span></span>
<span class="line"><span>using GLMakie # hide</span></span>
<span class="line"><span>fig = Figure()</span></span>
<span class="line"><span>ax = Axis(fig[1, 1], ylabel = &quot;Voltage / V&quot;, xlabel = &quot;Time / s&quot;, title = &quot;Discharge curve&quot;)</span></span>
<span class="line"><span>lines!(ax, t, E)</span></span>
<span class="line"><span>ax = Axis(fig[1, 2], ylabel = &quot;Current / I&quot;, xlabel = &quot;Time / s&quot;, title = &quot;Discharge curve&quot;)</span></span>
<span class="line"><span>lines!(ax, t, I)</span></span>
<span class="line"><span>fig</span></span></code></pre></div><p>To compare the results, let us reload the previous input file and run it</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cell_parameters_2 = read_cell_parameters(file_path_cell)</span></span>
<span class="line highlighted"><span>sim2 = Simulation(model, cell_parameters_2, cycling_protocol);</span></span>
<span class="line"><span>output2 = solve(sim)</span></span>
<span class="line"><span>nothing # hide</span></span></code></pre></div><p>We plot both curves</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>t2 = [state[:Control][:ControllerCV].time for state in output2[:states]]</span></span>
<span class="line highlighted"><span>E2 = [state[:Control][:Phi][1] for state in output2[:states]]</span></span>
<span class="line"><span>I2 = [state[:Control][:Current][1] for state in output2[:states]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fig = Figure()</span></span>
<span class="line"><span>ax = Axis(fig[1, 1], ylabel = &quot;Voltage / V&quot;, xlabel = &quot;Time / s&quot;, title = &quot;Discharge curve&quot;)</span></span>
<span class="line"><span>lines!(ax, t, E)</span></span>
<span class="line"><span>lines!(ax, t2, E2)</span></span>
<span class="line"><span>ax = Axis(fig[1, 2], ylabel = &quot;Current / A&quot;, xlabel = &quot;Time / s&quot;)</span></span>
<span class="line"><span>lines!(ax, t, I, label = &quot;intial value&quot;)</span></span>
<span class="line"><span>lines!(ax, t2, I2, label = &quot;updated value&quot;)</span></span>
<span class="line"><span>fig[1, 3] = Legend(fig, ax, &quot;Reaction rate&quot;, framevisible = false)</span></span>
<span class="line"><span>fig # hide</span></span></code></pre></div><p>Then, it becomes clear that the values can be changed programatically. We iterate over a range of reaction rate and collect the results in the <code>outputs</code> list. In the simulation configuration keywords <code>config_kwargs</code> we pass to <code>run_battery</code>, we add the options of not printing out the full simulation report at the end of the simulation.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>outputs = []</span></span>
<span class="line highlighted"><span>for r in range(5e-11, 1e-13, length = 5)</span></span>
<span class="line"><span>	active_material_params[&quot;reactionRateConstant&quot;] = r</span></span>
<span class="line"><span>	sim3 = Simulation(model, cell_parameters, cycling_protocol)</span></span>
<span class="line"><span>	push!(outputs, solve(sim3; config_kwargs = (; end_report = false)))</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span>nothing # hide</span></span></code></pre></div><p>We can then plot the results and observe that reaction rate constant is not really a limiting factor before we reache the value of 1e-13.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>using Printf</span></span>
<span class="line highlighted"><span>fig = Figure()</span></span>
<span class="line"><span>ax = Axis(fig[1, 1], ylabel = &quot;Voltage / V&quot;, xlabel = &quot;Time / s&quot;, title = &quot;Discharge curve&quot;)</span></span>
<span class="line"><span>for output in outputs</span></span>
<span class="line"><span>	local t = [state[:Control][:ControllerCV].time for state in output[:states]]</span></span>
<span class="line"><span>	local E = [state[:Control][:Phi][1] for state in output[:states]]</span></span>
<span class="line"><span>	local r = output[:extra][:inputparams][&quot;NegativeElectrode&quot;][&quot;Coating&quot;][&quot;ActiveMaterial&quot;][&quot;Interface&quot;][&quot;reactionRateConstant&quot;]</span></span>
<span class="line"><span>	lines!(ax, t, E, label = &quot;$(@sprintf(&quot;%g&quot;, r))&quot;)</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span>fig[1, 2] = Legend(fig, ax, &quot;Reaction rate&quot;, framevisible = false)</span></span>
<span class="line"><span>fig # hide</span></span></code></pre></div><h2 id="Example-on-GitHub" tabindex="-1">Example on GitHub <a class="header-anchor" href="#Example-on-GitHub" aria-label="Permalink to &quot;Example on GitHub {#Example-on-GitHub}&quot;">​</a></h2><p>If you would like to run this example yourself, it can be downloaded from the BattMo.jl GitHub repository <a href="https://github.com/BattMoTeam/BattMo.jl/blob/main/examples/2_modify_cell_parameters.jl" target="_blank" rel="noreferrer">as a script</a>, or as a <a href="https://github.com/BattMoTeam/BattMo.jl/blob/gh-pages/dev/final_site/notebooks/2_modify_cell_parameters.ipynb" target="_blank" rel="noreferrer">Jupyter Notebook</a></p><hr><p><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl" target="_blank" rel="noreferrer">Literate.jl</a>.</em></p>`,34)]))}const h=a(n,[["render",o]]);export{g as __pageData,h as default};
