import{_ as e,c as s,o as a,aA as o}from"./chunks/framework.HFW38LgL.js";const h=JSON.parse('{"title":"Sub-models overview (ModelSettings)","description":"","frontmatter":{},"headers":[],"relativePath":"manuals/user_guide/sub_models.md","filePath":"manuals/user_guide/sub_models.md","lastUpdated":null}'),n={name:"manuals/user_guide/sub_models.md"};function l(i,t,d,r,u,p){return a(),s("div",null,[...t[0]||(t[0]=[o(`<h1 id="Sub-models-overview-ModelSettings" tabindex="-1">Sub-models overview (ModelSettings) <a class="header-anchor" href="#Sub-models-overview-ModelSettings" aria-label="Permalink to &quot;Sub-models overview (ModelSettings) {#Sub-models-overview-ModelSettings}&quot;">​</a></h1><h2 id="Available-sub-models" tabindex="-1">Available sub-models <a class="header-anchor" href="#Available-sub-models" aria-label="Permalink to &quot;Available sub-models {#Available-sub-models}&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:right;">ModelSetting</th><th style="text-align:right;">Sub-model(s)</th><th style="text-align:right;">Description</th></tr></thead><tbody><tr><td style="text-align:right;"><code>&quot;ModelFrameWork&quot;</code></td><td style="text-align:right;">&quot;P2D&quot;, &quot;P4D Pouch&quot;, &quot;P4D Cylindrical&quot;</td><td style="text-align:right;"><a href="./pxd_model">See the PXD section</a></td></tr><tr><td style="text-align:right;"><code>&quot;TransportInSolid&quot;</code></td><td style="text-align:right;">&quot;FullDiffusion&quot;</td><td style="text-align:right;">-</td></tr><tr><td style="text-align:right;"><code>&quot;RampUp&quot;</code></td><td style="text-align:right;">&quot;Sinusoidal&quot;</td><td style="text-align:right;"><a href="./ramp_up">See the Ramp Up section</a></td></tr><tr><td style="text-align:right;"><code>&quot;ButlerVolmer&quot;</code></td><td style="text-align:right;">&quot;Standard&quot;, &quot;Chayambuka&quot;</td><td style="text-align:right;"><a href="./sodium_ion_model">See the Sodium ion section</a></td></tr><tr><td style="text-align:right;"><code>&quot;CurrentCollectors&quot;</code></td><td style="text-align:right;">&quot;Standard&quot;</td><td style="text-align:right;">-</td></tr><tr><td style="text-align:right;"><code>&quot;SEIModel&quot;</code></td><td style="text-align:right;">&quot;Bolay&quot;</td><td style="text-align:right;"><a href="./sei_model">See the SEI section</a></td></tr><tr><td style="text-align:right;"><code>&quot;TemperatureDependence&quot;</code></td><td style="text-align:right;">&quot;Arrhenius&quot;</td><td style="text-align:right;"><a href="./arrhenius">See the temperature dependence section</a></td></tr><tr><td style="text-align:right;"><code>&quot;PotentialFlowDiscretization&quot;</code></td><td style="text-align:right;">&quot;GeneralAD&quot;, &quot;TwoPointDiscretization&quot;</td><td style="text-align:right;">-</td></tr></tbody></table><h2 id="How-to-select-sub-models" tabindex="-1">How to select sub-models <a class="header-anchor" href="#How-to-select-sub-models" aria-label="Permalink to &quot;How to select sub-models {#How-to-select-sub-models}&quot;">​</a></h2><p>Sub-models can be selected by defining the concerning setting in the model settings. If the setting is not defined that submodel will not be used. Create a json file and set the settings within the file or load a file and alter it in the command line.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># load model settings file</span></span>
<span class="line"><span>model_settings = load_model_setttings(; from_default_set = &quot;P2D&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># modify settings</span></span>
<span class="line"><span>model_settings[&quot;TemperatureDependent&quot;] = &quot;Arrhenius&quot;</span></span></code></pre></div><p>Or create a ModelSettings instance.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>model_settings = ModelSettings(Dict(</span></span>
<span class="line"><span>    &quot;ModelFrameWork&quot;    =&gt; &quot;P2D&quot;,</span></span>
<span class="line"><span>    &quot;TransportInSolid&quot;  =&gt; &quot;FullDiffusion&quot;,</span></span>
<span class="line"><span>    &quot;RampUp&quot;            =&gt; &quot;Sinusoidal&quot;,</span></span>
<span class="line"><span>    &quot;ButlerVolmer&quot;      =&gt; &quot;Standard&quot;</span></span>
<span class="line"><span>))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>model_settings[&quot;TemperatureDependent&quot;] = &quot;Arrhenius&quot;</span></span></code></pre></div><p>The model settings can then be pased to the battery model struct that you&#39;d like to use, for example, to instantiate a lithium ion battery model:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>model = LithiumIonBattery(;model_settings = model_settings)</span></span></code></pre></div>`,10)])])}const c=e(n,[["render",l]]);export{h as __pageData,c as default};
