import{_ as l,C as r,c as p,o as u,j as e,a,aA as o,G as s,w as i}from"./chunks/framework.BIuidntl.js";const v=JSON.parse('{"title":"High level interface","description":"","frontmatter":{},"headers":[],"relativePath":"manuals/api_documentation/highlevel.md","filePath":"manuals/api_documentation/highlevel.md","lastUpdated":null}'),d={name:"manuals/api_documentation/highlevel.md"},b={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},h={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""};function B(j,t,k,T,I,P){const n=r("Badge");return u(),p("div",null,[t[33]||(t[33]=e("h1",{id:"High-level-interface",tabindex:"-1"},[a("High level interface "),e("a",{class:"header-anchor",href:"#High-level-interface","aria-label":'Permalink to "High level interface {#High-level-interface}"'},"​")],-1)),t[34]||(t[34]=e("h2",{id:"Main-functions",tabindex:"-1"},[a("Main functions "),e("a",{class:"header-anchor",href:"#Main-functions","aria-label":'Permalink to "Main functions {#Main-functions}"'},"​")],-1)),e("details",b,[e("summary",null,[t[0]||(t[0]=e("a",{id:"BattMo.run_battery",href:"#BattMo.run_battery"},[e("span",{class:"jlbinding"},"BattMo.run_battery")],-1)),t[1]||(t[1]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[3]||(t[3]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">run_battery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inputparams</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractInputParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; hook </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Simulate a battery for a given input. The input is expected to be an instance of AbstractInputParams. Such input can be prepared from a json file using the function <a href="/BattMo.jl/previews/PR19/manuals/api_documentation/highlevel#BattMo.readBattMoJsonInputFile"><code>readBattMoJsonInputFile</code></a>.</p>',2)),s(n,{type:"info",class:"source-link",text:"source"},{default:i(()=>t[2]||(t[2]=[e("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/e3b7db3bee6aad125f1c5b6f2ebf88bc6f04514a/src/setup/model_setup.jl#L13-L20",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),t[35]||(t[35]=e("h2",{id:"input-types",tabindex:"-1"},[a("input types "),e("a",{class:"header-anchor",href:"#input-types","aria-label":'Permalink to "input types {#input-types}"'},"​")],-1)),e("details",m,[e("summary",null,[t[4]||(t[4]=e("a",{id:"BattMo.AbstractInputParams",href:"#BattMo.AbstractInputParams"},[e("span",{class:"jlbinding"},"BattMo.AbstractInputParams")],-1)),t[5]||(t[5]=a()),s(n,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[7]||(t[7]=e("p",null,"Abstract type for all input parameters in BattMo",-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:i(()=>t[6]||(t[6]=[e("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/e3b7db3bee6aad125f1c5b6f2ebf88bc6f04514a/src/input/input_types.jl#L9",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",f,[e("summary",null,[t[8]||(t[8]=e("a",{id:"BattMo.DictInputParams",href:"#BattMo.DictInputParams"},[e("span",{class:"jlbinding"},"BattMo.DictInputParams")],-1)),t[9]||(t[9]=a()),s(n,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[11]||(t[11]=e("p",null,"Abstract type for input parameters that have an underlying dictionary structure.",-1)),t[12]||(t[12]=e("p",null,[a("For any structure of this type, it is possible to access and set the values of the object using the same syntax a standard julia "),e("a",{href:"https://docs.julialang.org/en/v1/base/collections/#Dictionaries",target:"_blank",rel:"noreferrer"},"dictionary")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:i(()=>t[10]||(t[10]=[e("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/e3b7db3bee6aad125f1c5b6f2ebf88bc6f04514a/src/input/input_types.jl#L12-L17",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",c,[e("summary",null,[t[13]||(t[13]=e("a",{id:"BattMo.InputParams",href:"#BattMo.InputParams"},[e("span",{class:"jlbinding"},"BattMo.InputParams")],-1)),t[14]||(t[14]=a()),s(n,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[16]||(t[16]=e("p",null,[a("Input parameter type that is instantiated from a json file, see "),e("a",{href:"/BattMo.jl/previews/PR19/manuals/api_documentation/highlevel#BattMo.readBattMoJsonInputFile"},[e("code",null,"readBattMoJsonInputFile")]),a(".")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:i(()=>t[15]||(t[15]=[e("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/e3b7db3bee6aad125f1c5b6f2ebf88bc6f04514a/src/input/input_types.jl#L35-L37",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",g,[e("summary",null,[t[17]||(t[17]=e("a",{id:"BattMo.MatlabInputParams",href:"#BattMo.MatlabInputParams"},[e("span",{class:"jlbinding"},"BattMo.MatlabInputParams")],-1)),t[18]||(t[18]=a()),s(n,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[20]||(t[20]=e("p",null,[a("Input parameter type that is instantiated from a matlab output file, see "),e("a",{href:"/BattMo.jl/previews/PR19/manuals/api_documentation/highlevel#BattMo.readBattMoMatlabInputFile"},[e("code",null,"readBattMoMatlabInputFile")]),a(".")],-1)),s(n,{type:"info",class:"source-link",text:"source"},{default:i(()=>t[19]||(t[19]=[e("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/e3b7db3bee6aad125f1c5b6f2ebf88bc6f04514a/src/input/input_types.jl#L42-L44",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),t[36]||(t[36]=e("h2",{id:"Utility-to-read-and-manipulate-input",tabindex:"-1"},[a("Utility to read and manipulate input "),e("a",{class:"header-anchor",href:"#Utility-to-read-and-manipulate-input","aria-label":'Permalink to "Utility to read and manipulate input {#Utility-to-read-and-manipulate-input}"'},"​")],-1)),e("details",h,[e("summary",null,[t[21]||(t[21]=e("a",{id:"BattMo.readBattMoJsonInputFile",href:"#BattMo.readBattMoJsonInputFile"},[e("span",{class:"jlbinding"},"BattMo.readBattMoJsonInputFile")],-1)),t[22]||(t[22]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[24]||(t[24]=o('<p>readBattMoJsonInputFile(inputFileName::String)</p><p>Reads the input file in JSON format and returns the input parameters as a dictionary</p><p><strong>Arguments</strong></p><ul><li><code>inputFileName ::String</code> : name of the json file that contains the input</li></ul><p><strong>Returns</strong></p><p>An instance of <a href="/BattMo.jl/previews/PR19/manuals/api_documentation/highlevel#BattMo.InputParams"><code>InputParams</code></a> that can be sent to the simulator via <a href="/BattMo.jl/previews/PR19/manuals/api_documentation/highlevel#BattMo.run_battery"><code>run_battery</code></a></p>',6)),s(n,{type:"info",class:"source-link",text:"source"},{default:i(()=>t[23]||(t[23]=[e("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/e3b7db3bee6aad125f1c5b6f2ebf88bc6f04514a/src/input/io_types.jl#L25-L37",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",y,[e("summary",null,[t[25]||(t[25]=e("a",{id:"BattMo.readBattMoMatlabInputFile",href:"#BattMo.readBattMoMatlabInputFile"},[e("span",{class:"jlbinding"},"BattMo.readBattMoMatlabInputFile")],-1)),t[26]||(t[26]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[28]||(t[28]=o('<p>readBattMoMatlabInputFile(inputFileName::String)</p><p>Reads the input from a matlab output file which contains a description of the model and returns an <code>MatlabInputParams</code> that can be sent to the simulator.</p><p><strong>Arguments</strong></p><ul><li><code>inputFileName ::String</code> : filename of the input</li></ul><p><strong>Returns</strong></p><p>An instance of <a href="/BattMo.jl/previews/PR19/manuals/api_documentation/highlevel#BattMo.MatlabInputParams"><code>MatlabInputParams</code></a> that can be sent to the simulator via <a href="/BattMo.jl/previews/PR19/manuals/api_documentation/highlevel#BattMo.run_battery"><code>run_battery</code></a></p>',6)),s(n,{type:"info",class:"source-link",text:"source"},{default:i(()=>t[27]||(t[27]=[e("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/e3b7db3bee6aad125f1c5b6f2ebf88bc6f04514a/src/input/io_types.jl#L7-L20",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",M,[e("summary",null,[t[29]||(t[29]=e("a",{id:"BattMo.mergeInputParams",href:"#BattMo.mergeInputParams"},[e("span",{class:"jlbinding"},"BattMo.mergeInputParams")],-1)),t[30]||(t[30]=a()),s(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[32]||(t[32]=o("<p>mergeInputParams(inputparams1::T, inputparams2::T; warn = false) where {T &lt;: DictInputParams}</p><p><strong>Arguments</strong></p><ul><li><p><code>inputparams1 ::T</code> : First input parameter structure</p></li><li><p><code>inputparams2 ::T</code> : Second input parameter structure</p></li><li><p><code>warn = false</code> : If option <code>warn</code> is true, then give a warning when two distinct values are given for the same field. The first value has other precedence.</p></li></ul><p><strong>Returns</strong></p><p>A <code>DictInputParams</code> structure whose field are the composition of the two input parameter structures.</p>",5)),s(n,{type:"info",class:"source-link",text:"source"},{default:i(()=>t[31]||(t[31]=[e("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/e3b7db3bee6aad125f1c5b6f2ebf88bc6f04514a/src/input/input_types.jl#L70-L83",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})])])}const F=l(d,[["render",B]]);export{v as __pageData,F as default};
