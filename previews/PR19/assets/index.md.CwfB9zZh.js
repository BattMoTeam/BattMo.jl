import{_ as i,c as t,o as a,aA as n}from"./chunks/framework.BIuidntl.js";const e="/BattMo.jl/previews/PR19/assets/cuhtxis.WNECfpCi.jpeg",g=JSON.parse('{"title":"","description":"","frontmatter":{"layout":"home","hero":{"name":"BattMo.jl","text":"Fast open-source battery simulation","image":{"src":"battmologo_stacked.png","alt":"BattMo"},"tagline":"1D, 2D and 3D open-source P2D/PXD Lithium-Ion battery simulation","actions":[{"theme":"brand","text":"Getting started","link":"/man/intro"},{"theme":"alt","text":"BattMo Web App","link":"https://app.batterymodel.com/"},{"theme":"alt","text":"Github","link":"https://github.com/sintefmath/BattMo.jl"},{"theme":"alt","text":"Simulate a battery","link":"/examples/example_cycle"},{"theme":"alt","text":"About","link":"https://batterymodel.com/"}]},"features":[{"icon":"ðŸ”‹","title":"Accurate and open","details":"Validated on standard benchmarks. Automatic differentiation and Julia syntax means that the code is easy to read and edit. Based on proven computational core for other multiphysics domains.","link":"/examples"},{"icon":"âš¡","title":"Fast and flexible","details":"Written in Julia, simulate with scripting syntax without sacrificing performance. Extensible with new features.","link":"/man/advanced"},{"icon":{"src":"battmologo.ico","height":"10pt"},"title":"BattMo Web App","details":"A BattMo web application is available to run the simulation online without any further installation steps.","link":"https://app.batterymodel.com"},{"icon":"ðŸ§±","title":"1D, 2D and 3D","details":"One code handles both 1D models and complex 3D grids, with support for high-performance linear solvers for bigger models.","link":"/examples"}]},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":null}'),l={name:"index.md"};function p(o,s,h,r,k,u){return a(),t("div",null,s[0]||(s[0]=[n(`<p>The Battery Modelling Toolbox (<strong>BattMo</strong>) is a resource for continuum modelling of electrochemical devices in MATLAB. The code features a pseudo X-dimensional (PXD) framework for the Doyle-Fuller-Newman model of lithium-ion battery cells. The code implements a subset of features from the <a href="https://github.com/BattMoTeam/BattMo" target="_blank" rel="noreferrer">MATLAB version of BattMo</a> with improved numerical performance. <strong>BattMo.jl</strong> is based on <a href="https://github.com/sintefmath/Jutul.jl" target="_blank" rel="noreferrer">Jutul.jl</a> and uses finite-volume discretizations and automatic differentiation to simulate models in 1D, 2D and 3D.</p><p>The current implementation has many options for setting up simulation cases:</p><ul><li><p>Set up 1D, 2D and 3D grids using scripting syntax</p></li><li><p>Templates for different types of battery chemistry parameters in JSON format</p></li><li><p>Support for a variety of open formats</p></li><li><p>Read in input data prepared in the MATLAB version of BattMo (coin-cell, jellyroll, pouch)</p></li><li><p>Make use of common BattMo JSON format to run cases</p></li></ul><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">â€‹</a></h2><p>To install Julia, first visit the official Julia website at <a href="https://julialang.org" target="_blank" rel="noreferrer">https://julialang.org</a> and <a href="https://julialang.org/downloads/%20" target="_blank" rel="noreferrer">download</a> the appropriate installer for your operating system (Windows, macOS, or Linux). After installation, you can verify it by opening a terminal or command prompt and typing julia to start the Julia REPL (Read-Eval-Print Loop). This will confirm that Julia is correctly installed and ready for use.</p><p>BattMo is registered in the General Julia registry. To add it to your Julia environment, open Julia and run</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Pkg; Pkg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;BattMo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>For those which are not used to Julia, you should be aware that julia uses JIT compilation. The first time the code is run, you will therefore experience a compilation time which will not be present in the further runs.</p><h3 id="Getting-started" tabindex="-1">Getting started <a class="header-anchor" href="#Getting-started" aria-label="Permalink to &quot;Getting started {#Getting-started}&quot;">â€‹</a></h3><p>We start by loading BattMo</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BattMo</span></span></code></pre></div><p>BattMo uses a json input format. Json files can be easily read and modified. They are converted to dictionary structure</p><p>Let us choose the case <a href="https://github.com/BattMoTeam/BattMo.jl/blob/main/test/data/jsonfiles/p2d_40.json" target="_blank" rel="noreferrer">p2d_40.json</a>. We load it using the function <code>readBattMoJsonInputFile</code>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">filename </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pathof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BattMo)), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/../test/data/jsonfiles/p2d_40.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inputparams </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> readBattMoJsonInputFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>InputParams(Dict{String, Any}(&quot;include_current_collectors&quot; =&gt; true, &quot;use_thermal&quot; =&gt; false, &quot;Geometry&quot; =&gt; Dict{String, Any}(&quot;case&quot; =&gt; &quot;1D&quot;, &quot;faceArea&quot; =&gt; 0.0001), &quot;Separator&quot; =&gt; Dict{String, Any}(&quot;density&quot; =&gt; 946, &quot;thickness&quot; =&gt; 1.5e-5, &quot;N&quot; =&gt; 10, &quot;bruggemanCoefficient&quot; =&gt; 1.5, &quot;thermalConductivity&quot; =&gt; 0.334, &quot;specificHeatCapacity&quot; =&gt; 1978, &quot;porosity&quot; =&gt; 0.55), &quot;Control&quot; =&gt; Dict{String, Any}(&quot;dEdtLimit&quot; =&gt; 0.01, &quot;useCVswitch&quot; =&gt; true, &quot;DRate&quot; =&gt; 1, &quot;rampupTime&quot; =&gt; 10, &quot;dIdtLimit&quot; =&gt; 0.01, &quot;controlPolicy&quot; =&gt; &quot;CCDischarge&quot;, &quot;lowerCutoffVoltage&quot; =&gt; 2.4, &quot;upperCutoffVoltage&quot; =&gt; 4.1), &quot;TimeStepping&quot; =&gt; Dict{String, Any}(&quot;numberOfTimeSteps&quot; =&gt; 100, &quot;useRampup&quot; =&gt; true, &quot;numberOfRampupSteps&quot; =&gt; 5), &quot;G&quot; =&gt; Any[], &quot;SOC&quot; =&gt; 0.99, &quot;Electrolyte&quot; =&gt; Dict{String, Any}(&quot;ionicConductivity&quot; =&gt; Dict{String, Any}(&quot;functionname&quot; =&gt; &quot;computeElectrolyteConductivity_default&quot;, &quot;argumentlist&quot; =&gt; Any[&quot;concentration&quot;, &quot;temperature&quot;], &quot;type&quot; =&gt; &quot;function&quot;), &quot;density&quot; =&gt; 1200, &quot;diffusionCoefficient&quot; =&gt; Dict{String, Any}(&quot;functionname&quot; =&gt; &quot;computeDiffusionCoefficient_default&quot;, &quot;argumentlist&quot; =&gt; Any[&quot;concentration&quot;, &quot;temperature&quot;], &quot;type&quot; =&gt; &quot;function&quot;), &quot;initialConcentration&quot; =&gt; 1000, &quot;thermalConductivity&quot; =&gt; 0.6, &quot;specificHeatCapacity&quot; =&gt; 2055, &quot;bruggemanCoefficient&quot; =&gt; 1.5, &quot;species&quot; =&gt; Dict{String, Any}(&quot;transferenceNumber&quot; =&gt; 0.2594, &quot;nominalConcentration&quot; =&gt; 1000, &quot;chargeNumber&quot; =&gt; 1)), &quot;Output&quot; =&gt; Dict{String, Any}(&quot;variables&quot; =&gt; Any[&quot;energy&quot;])â€¦))</span></span></code></pre></div><p>We run the simulation using the <a href="/BattMo.jl/previews/PR19/man/highlevel#BattMo.run_battery">run_battery</a></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> run_battery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inputparams)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Jutul: Simulating 1 hour, 6 minutes as 105 report steps</span></span>
<span class="line"><span>â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®</span></span>
<span class="line"><span>â”‚ Iteration type â”‚  Avg/step â”‚  Avg/ministep â”‚    Total â”‚</span></span>
<span class="line"><span>â”‚                â”‚ 105 steps â”‚ 107 ministeps â”‚ (wasted) â”‚</span></span>
<span class="line"><span>â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤</span></span>
<span class="line"><span>â”‚ Newton         â”‚   2.33333 â”‚       2.28972 â”‚  245 (2) â”‚</span></span>
<span class="line"><span>â”‚ Linearization  â”‚   3.34286 â”‚       3.28037 â”‚  351 (2) â”‚</span></span>
<span class="line"><span>â”‚ Linear solver  â”‚   2.33333 â”‚       2.28972 â”‚  245 (2) â”‚</span></span>
<span class="line"><span>â”‚ Precond apply  â”‚       0.0 â”‚           0.0 â”‚    0 (0) â”‚</span></span>
<span class="line"><span>â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯</span></span>
<span class="line"><span>â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â•®</span></span>
<span class="line"><span>â”‚ Timing type   â”‚    Each â”‚   Relative â”‚  Total â”‚</span></span>
<span class="line"><span>â”‚               â”‚      ms â”‚ Percentage â”‚      s â”‚</span></span>
<span class="line"><span>â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¤</span></span>
<span class="line"><span>â”‚ Properties    â”‚  0.0409 â”‚     0.24 % â”‚ 0.0100 â”‚</span></span>
<span class="line"><span>â”‚ Equations     â”‚  6.9830 â”‚    59.08 % â”‚ 2.4510 â”‚</span></span>
<span class="line"><span>â”‚ Assembly      â”‚  0.2276 â”‚     1.93 % â”‚ 0.0799 â”‚</span></span>
<span class="line"><span>â”‚ Linear solve  â”‚  0.4832 â”‚     2.85 % â”‚ 0.1184 â”‚</span></span>
<span class="line"><span>â”‚ Linear setup  â”‚  0.0000 â”‚     0.00 % â”‚ 0.0000 â”‚</span></span>
<span class="line"><span>â”‚ Precond apply â”‚  0.0000 â”‚     0.00 % â”‚ 0.0000 â”‚</span></span>
<span class="line"><span>â”‚ Update        â”‚  0.5825 â”‚     3.44 % â”‚ 0.1427 â”‚</span></span>
<span class="line"><span>â”‚ Convergence   â”‚  0.9279 â”‚     7.85 % â”‚ 0.3257 â”‚</span></span>
<span class="line"><span>â”‚ Input/Output  â”‚  0.2332 â”‚     0.60 % â”‚ 0.0250 â”‚</span></span>
<span class="line"><span>â”‚ Other         â”‚  4.0654 â”‚    24.01 % â”‚ 0.9960 â”‚</span></span>
<span class="line"><span>â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¤</span></span>
<span class="line"><span>â”‚ Total         â”‚ 16.9335 â”‚   100.00 % â”‚ 4.1487 â”‚</span></span>
<span class="line"><span>â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â•¯</span></span></code></pre></div><p>We can now plot the results</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLMakie</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">states </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> output[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:states</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [state[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:Control</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:ControllerCV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> states]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">E </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [state[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:Control</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:Phi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> states]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">I </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [state[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:Control</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:Current</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> states]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Figure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ax </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Axis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fig[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], ylabel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Voltage / V&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, xlabel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Time / s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Discharge curve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lines!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ax, t, E)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ax </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Axis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fig[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], ylabel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Voltage / V&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, xlabel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Time / s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Discharge curve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lines!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ax, t, I)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig</span></span></code></pre></div><p><img src="`+e+'" alt=""></p><p>see full example script here</p><h2 id="Get-involved" tabindex="-1">Get involved <a class="header-anchor" href="#Get-involved" aria-label="Permalink to &quot;Get involved {#Get-involved}&quot;">â€‹</a></h2><p>The code is open source <a href="https://github.com/BattmoTeam/BattMo.jl" target="_blank" rel="noreferrer">on GitHub</a>. Pull requests, comments or issues are welcome!</p><h2 id="acknowledgements" tabindex="-1">Acknowledgements <a class="header-anchor" href="#acknowledgements" aria-label="Permalink to &quot;Acknowledgements&quot;">â€‹</a></h2><p>BattMo has received funding from the European Unionâ€™s Horizon 2020 innovation program under grant agreement numbers:</p><ul><li><p>875527 HYDRA</p></li><li><p>957189 BIG-MAP</p></li><li><p>101104013 BATMAX</p></li><li><p>101103997 DigiBatt</p></li></ul>',27)]))}const c=i(l,[["render",p]]);export{g as __pageData,c as default};
