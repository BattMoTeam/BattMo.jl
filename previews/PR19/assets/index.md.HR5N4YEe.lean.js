import{_ as s,c as a,o as t,aA as e}from"./chunks/framework.BIuidntl.js";const n="/BattMo.jl/previews/PR19/assets/wbdwbfv.WNECfpCi.jpeg",g=JSON.parse('{"title":"","description":"","frontmatter":{"layout":"home","hero":{"name":"BattMo.jl","text":"Fast open-source battery simulation","image":{"src":"battmologo_stacked.png","alt":"BattMo"},"tagline":"1D, 2D and 3D open-source P2D/PXD Lithium-Ion battery simulation","actions":[{"theme":"brand","text":"Getting started","link":"/man/intro"},{"theme":"alt","text":"BattMo Web App","link":"https://app.batterymodel.com/"},{"theme":"alt","text":"Github","link":"https://github.com/sintefmath/BattMo.jl"},{"theme":"alt","text":"Simulate a battery","link":"/examples/example_cycle"},{"theme":"alt","text":"About","link":"https://batterymodel.com/"}]},"features":[{"icon":"ðŸ”‹","title":"Accurate and open","details":"Validated on standard benchmarks. Automatic differentiation and Julia syntax means that the code is easy to read and edit. Based on proven computational core for other multiphysics domains.","link":"/examples"},{"icon":"âš¡","title":"Fast and flexible","details":"Written in Julia, simulate with scripting syntax without sacrificing performance. Extensible with new features.","link":"/man/advanced"},{"icon":{"src":"battmologo.ico","height":"10pt"},"title":"BattMo Web App","details":"A BattMo web application is available to run the simulation online without any further installation steps.","link":"https://app.batterymodel.com"},{"icon":"ðŸ§±","title":"1D, 2D and 3D","details":"One code handles both 1D models and complex 3D grids, with support for high-performance linear solvers for bigger models.","link":"/examples"}]},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":null}'),l={name:"index.md"};function h(p,i,r,k,o,d){return t(),a("div",null,i[0]||(i[0]=[e("",25)]))}const u=s(l,[["render",h]]);export{g as __pageData,u as default};
