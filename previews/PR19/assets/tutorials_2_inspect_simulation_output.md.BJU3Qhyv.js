import{_ as a,c as n,o as i,aA as e}from"./chunks/framework.I3vsI2xV.js";const k=JSON.parse('{"title":"How to inspect simulation output","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/2_inspect_simulation_output.md","filePath":"tutorials/2_inspect_simulation_output.md","lastUpdated":null}'),t={name:"tutorials/2_inspect_simulation_output.md"};function p(l,s,h,o,c,d){return i(),n("div",null,s[0]||(s[0]=[e(`<h1 id="How-to-inspect-simulation-output" tabindex="-1">How to inspect simulation output <a class="header-anchor" href="#How-to-inspect-simulation-output" aria-label="Permalink to &quot;How to inspect simulation output {#How-to-inspect-simulation-output}&quot;">​</a></h1><p>We have seen how to simple it is to run a simulation using BattMo. Now we&#39;ll have a look into how to inspect the results of a simulation.</p><p>We&#39;ll run a simulation like we saw in the previous tutorial</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BattMo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;p2d_40_jl_chen2020.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pathof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BattMo)), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/../test/data/jsonfiles/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, file_name)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inputparams </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> readBattMoJsonInputFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file_path)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> run_battery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inputparams);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Jutul: Simulating 1 hour, 6 minutes as 77 report steps</span></span>
<span class="line"><span>╭────────────────┬──────────┬──────────────┬──────────╮</span></span>
<span class="line"><span>│ Iteration type │ Avg/step │ Avg/ministep │    Total │</span></span>
<span class="line"><span>│                │ 77 steps │ 77 ministeps │ (wasted) │</span></span>
<span class="line"><span>├────────────────┼──────────┼──────────────┼──────────┤</span></span>
<span class="line"><span>│ Newton         │  3.15584 │      3.15584 │  243 (0) │</span></span>
<span class="line"><span>│ Linearization  │  4.15584 │      4.15584 │  320 (0) │</span></span>
<span class="line"><span>│ Linear solver  │  3.15584 │      3.15584 │  243 (0) │</span></span>
<span class="line"><span>│ Precond apply  │      0.0 │          0.0 │    0 (0) │</span></span>
<span class="line"><span>╰────────────────┴──────────┴──────────────┴──────────╯</span></span>
<span class="line"><span>╭───────────────┬────────┬────────────┬──────────╮</span></span>
<span class="line"><span>│ Timing type   │   Each │   Relative │    Total │</span></span>
<span class="line"><span>│               │     ms │ Percentage │       ms │</span></span>
<span class="line"><span>├───────────────┼────────┼────────────┼──────────┤</span></span>
<span class="line"><span>│ Properties    │ 0.0423 │     3.17 % │  10.2847 │</span></span>
<span class="line"><span>│ Equations     │ 0.2382 │    23.48 % │  76.2249 │</span></span>
<span class="line"><span>│ Assembly      │ 0.1308 │    12.89 % │  41.8474 │</span></span>
<span class="line"><span>│ Linear solve  │ 0.6473 │    48.46 % │ 157.2903 │</span></span>
<span class="line"><span>│ Linear setup  │ 0.0000 │     0.00 % │   0.0000 │</span></span>
<span class="line"><span>│ Precond apply │ 0.0000 │     0.00 % │   0.0000 │</span></span>
<span class="line"><span>│ Update        │ 0.0450 │     3.37 % │  10.9296 │</span></span>
<span class="line"><span>│ Convergence   │ 0.0619 │     6.10 % │  19.8047 │</span></span>
<span class="line"><span>│ Input/Output  │ 0.0273 │     0.65 % │   2.1023 │</span></span>
<span class="line"><span>│ Other         │ 0.0252 │     1.88 % │   6.1154 │</span></span>
<span class="line"><span>├───────────────┼────────┼────────────┼──────────┤</span></span>
<span class="line"><span>│ Total         │ 1.3358 │   100.00 % │ 324.5992 │</span></span>
<span class="line"><span>╰───────────────┴────────┴────────────┴──────────╯</span></span></code></pre></div><p>Now we&#39;ll have a look into what the output entail. The ouput is of type NamedTuple and contains multiple dicts. Lets print the keys of each dict.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(:states, :cellSpecifications, :reports, :inputparams, :extra)</span></span></code></pre></div><p>So we can see the the output contains state data, cell specifications, reports on the simulation, the input parameters of the simulation, and some extra data. The most important dicts, that we&#39;ll dive a bit deeper into, are the states and cell specifications. First let&#39;s see how the states output is structured.</p><h3 id="states" tabindex="-1">States <a class="header-anchor" href="#states" aria-label="Permalink to &quot;States&quot;">​</a></h3><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">states </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> output[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:states</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(states)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Vector{Dict{Symbol, Any}} (alias for Array{Dict{Symbol, Any}, 1})</span></span></code></pre></div><p>As we can see, the states output is a Vector that contains dicts.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(states)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>77-element LinearIndices{1, Tuple{Base.OneTo{Int64}}}:</span></span>
<span class="line"><span>  1</span></span>
<span class="line"><span>  2</span></span>
<span class="line"><span>  3</span></span>
<span class="line"><span>  4</span></span>
<span class="line"><span>  5</span></span>
<span class="line"><span>  6</span></span>
<span class="line"><span>  7</span></span>
<span class="line"><span>  8</span></span>
<span class="line"><span>  9</span></span>
<span class="line"><span> 10</span></span>
<span class="line"><span>  ⋮</span></span>
<span class="line"><span> 69</span></span>
<span class="line"><span> 70</span></span>
<span class="line"><span> 71</span></span>
<span class="line"><span> 72</span></span>
<span class="line"><span> 73</span></span>
<span class="line"><span> 74</span></span>
<span class="line"><span> 75</span></span>
<span class="line"><span> 76</span></span>
<span class="line"><span> 77</span></span></code></pre></div><p>In this case it consists of 77 dicts. Each dict represents a time step in the simulation and each time step stores quantities divided into battery component related group. This structure agrees with the overal model structure of BattMo.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">initial_state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> states[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(initial_state)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>KeySet for a Dict{Symbol, Any} with 5 entries. Keys:</span></span>
<span class="line"><span>  :Elyte</span></span>
<span class="line"><span>  :NeAm</span></span>
<span class="line"><span>  :substates</span></span>
<span class="line"><span>  :Control</span></span>
<span class="line"><span>  :PeAm</span></span></code></pre></div><p>So each time step contains quantities related to the electrolyte, the negative electrode active material, the cycling control, and the positive electrode active material. Lets print the stored quantities for each group.</p><p>Electrolyte keys:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(initial_state[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:Elyte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>KeySet for a Dict{Symbol, Any} with 6 entries. Keys:</span></span>
<span class="line"><span>  :Charge</span></span>
<span class="line"><span>  :Mass</span></span>
<span class="line"><span>  :Diffusivity</span></span>
<span class="line"><span>  :Phi</span></span>
<span class="line"><span>  :Conductivity</span></span>
<span class="line"><span>  :C</span></span></code></pre></div><p>Negative electrode active material keys:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(initial_state[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:NeAm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>KeySet for a Dict{Symbol, Any} with 6 entries. Keys:</span></span>
<span class="line"><span>  :Ocp</span></span>
<span class="line"><span>  :Cp</span></span>
<span class="line"><span>  :Cs</span></span>
<span class="line"><span>  :Charge</span></span>
<span class="line"><span>  :Temperature</span></span>
<span class="line"><span>  :Phi</span></span></code></pre></div><p>Positive electrode active material keys:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(initial_state[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:PeAm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>KeySet for a Dict{Symbol, Any} with 6 entries. Keys:</span></span>
<span class="line"><span>  :Ocp</span></span>
<span class="line"><span>  :Cp</span></span>
<span class="line"><span>  :Cs</span></span>
<span class="line"><span>  :Charge</span></span>
<span class="line"><span>  :Temperature</span></span>
<span class="line"><span>  :Phi</span></span></code></pre></div><p>Control keys:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(initial_state[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:Control</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>KeySet for a Dict{Symbol, Any} with 3 entries. Keys:</span></span>
<span class="line"><span>  :Current</span></span>
<span class="line"><span>  :ControllerCV</span></span>
<span class="line"><span>  :Phi</span></span></code></pre></div><h3 id="Cell-specifications" tabindex="-1">Cell specifications <a class="header-anchor" href="#Cell-specifications" aria-label="Permalink to &quot;Cell specifications {#Cell-specifications}&quot;">​</a></h3><p>Now lets see what quantities are stored within the cellSpecifications dict in the simulation output.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cell_specifications </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> output[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:cellSpecifications</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cell_specifications)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>KeySet for a Dict{Any, Any} with 4 entries. Keys:</span></span>
<span class="line"><span>  &quot;NegativeElectrodeCapacity&quot;</span></span>
<span class="line"><span>  &quot;MaximumEnergy&quot;</span></span>
<span class="line"><span>  &quot;PositiveElectrodeCapacity&quot;</span></span>
<span class="line"><span>  &quot;Mass&quot;</span></span></code></pre></div><h2 id="Example-on-GitHub" tabindex="-1">Example on GitHub <a class="header-anchor" href="#Example-on-GitHub" aria-label="Permalink to &quot;Example on GitHub {#Example-on-GitHub}&quot;">​</a></h2><p>If you would like to run this example yourself, it can be downloaded from the BattMo.jl GitHub repository <a href="https://github.com/BattMoTeam/BattMo.jl/blob/main/examples/2_inspect_simulation_output.jl" target="_blank" rel="noreferrer">as a script</a>, or as a <a href="https://github.com/BattMoTeam/BattMo.jl/blob/gh-pages/dev/final_site/notebooks/2_inspect_simulation_output.ipynb" target="_blank" rel="noreferrer">Jupyter Notebook</a></p><hr><p><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl" target="_blank" rel="noreferrer">Literate.jl</a>.</em></p>`,39)]))}const u=a(t,[["render",p]]);export{k as __pageData,u as default};
