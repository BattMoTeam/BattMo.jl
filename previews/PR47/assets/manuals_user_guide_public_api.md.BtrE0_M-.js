import{_ as i,c as s,o as t,aA as e}from"./chunks/framework.Ci-gXDe3.js";const k=JSON.parse('{"title":"Public API","description":"","frontmatter":{},"headers":[],"relativePath":"manuals/user_guide/public_api.md","filePath":"manuals/user_guide/public_api.md","lastUpdated":null}'),n={name:"manuals/user_guide/public_api.md"};function l(o,a,h,p,r,d){return t(),s("div",null,a[0]||(a[0]=[e(`<h1 id="Public-API" tabindex="-1">Public API <a class="header-anchor" href="#Public-API" aria-label="Permalink to &quot;Public API {#Public-API}&quot;">​</a></h1><p>This document provides an overview of the public API for using <code>BattMo</code>. The API allows users to load parameter sets, define battery models, setup simulation objects and run simulations.</p><h2 id="Loading-Parameters" tabindex="-1">Loading Parameters <a class="header-anchor" href="#Loading-Parameters" aria-label="Permalink to &quot;Loading Parameters {#Loading-Parameters}&quot;">​</a></h2><p>Input parameter files are stored in JSON format and define the characteristics of the battery model and the simulation environment. For more information in the input terminilogy have a look at the <a href="./terminology">input terminology</a> section.</p><p>Parameters are loaded using helper functions that read JSON files and return structured data. These functions are <a href="/BattMo.jl/previews/PR47/manuals/api_documentation/highlevel#BattMo.load_cell_parameters"><code>load_cell_parameters</code></a>, <a href="/BattMo.jl/previews/PR47/manuals/api_documentation/highlevel#BattMo.load_cycling_protocol"><code>load_cycling_protocol</code></a>, <a href="/BattMo.jl/previews/PR47/manuals/api_documentation/highlevel#BattMo.load_model_settings"><code>load_model_settings</code></a>, and <a href="/BattMo.jl/previews/PR47/manuals/api_documentation/highlevel#BattMo.load_simulation_settings"><code>load_simulation_settings</code></a>. Each function takes a file path as input and returns a dictionary containing the respective settings.</p><h2 id="Model-Initialization" tabindex="-1">Model Initialization <a class="header-anchor" href="#Model-Initialization" aria-label="Permalink to &quot;Model Initialization {#Model-Initialization}&quot;">​</a></h2><p>A model can be instantiated using the sub classes of abstract type <a href="/BattMo.jl/previews/PR47/manuals/api_documentation/highlevel#BattMo.BatteryModelSetup"><code>BatteryModelSetup</code></a>. At the moment only the <a href="/BattMo.jl/previews/PR47/manuals/api_documentation/highlevel#BattMo.LithiumIonBattery"><code>LithiumIonBattery</code></a> constructor is available. By passing a <a href="/BattMo.jl/previews/PR47/manuals/api_documentation/highlevel#BattMo.ModelSettings"><code>ModelSettings</code></a> object to the constructor, the user can personalize the model to be solved.</p><h2 id="Simulation-Initialization" tabindex="-1">Simulation Initialization <a class="header-anchor" href="#Simulation-Initialization" aria-label="Permalink to &quot;Simulation Initialization {#Simulation-Initialization}&quot;">​</a></h2><p>A Simulation object can be instantiated using the <a href="/BattMo.jl/previews/PR47/manuals/api_documentation/highlevel#BattMo.Simulation"><code>Simulation</code></a> constructor. This constructor requires the instantiated model object, <a href="/BattMo.jl/previews/PR47/manuals/api_documentation/highlevel#BattMo.CellParameters"><code>CellParameters</code></a> struct and <a href="/BattMo.jl/previews/PR47/manuals/api_documentation/highlevel#BattMo.CyclingProtocol"><code>CyclingProtocol</code></a> structs as arguments and takes a instantiated <a href="/BattMo.jl/previews/PR47/manuals/api_documentation/highlevel#BattMo.SimulationSettings"><code>SimulationSettings</code></a> struct as an optional argument.</p><h2 id="Solve-for-a-simulation" tabindex="-1">Solve for a simulation <a class="header-anchor" href="#Solve-for-a-simulation" aria-label="Permalink to &quot;Solve for a simulation {#Solve-for-a-simulation}&quot;">​</a></h2><p>A simulation can be solved by passing a <a href="/BattMo.jl/previews/PR47/manuals/api_documentation/highlevel#BattMo.Simulation"><code>Simulation</code></a> object to the <a href="/BattMo.jl/previews/PR47/manuals/api_documentation/highlevel#BattMo.solve"><code>solve</code></a> function. This function will return the simulation output.</p><h2 id="Example-Usage" tabindex="-1">Example Usage <a class="header-anchor" href="#Example-Usage" aria-label="Permalink to &quot;Example Usage {#Example-Usage}&quot;">​</a></h2><p>Below is an example of a complete workflow:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Define file paths</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file_path_cell </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;path/to/cell_parameters.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file_path_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;path/to/model_settings.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file_path_cycling </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;path/to/cycling_protocol.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file_path_simulation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;path/to/simulation_settings.json&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Load parameters</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cell_parameters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> load_cell_parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; from_file_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file_path_cell)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cycling_protocol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> load_cycling_protocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; from_file_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file_path_cycling)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model_settings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> load_model_settings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; from_file_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file_path_model)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">simulation_settings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> read_simulation_settings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file_path_simulation)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Initialize model and simulation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LithiumIonBattery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; model_settings)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sim </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, cell_parameters, cycling_protocol; simulation_settings)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run simulation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sim)</span></span></code></pre></div>`,14)]))}const u=i(n,[["render",l]]);export{k as __pageData,u as default};
