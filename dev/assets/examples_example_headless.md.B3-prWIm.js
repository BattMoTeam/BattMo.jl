import{_ as a,c as e,o as i,aA as t}from"./chunks/framework.BxeeVtwU.js";const n="/BattMo.jl/dev/assets/mfysxan.GqK4r65j.jpeg",c=JSON.parse('{"title":"Headless UI","description":"","frontmatter":{},"headers":[],"relativePath":"examples/example_headless.md","filePath":"examples/example_headless.md","lastUpdated":null}'),l={name:"examples/example_headless.md"};function p(o,s,h,r,d,k){return i(),e("div",null,[...s[0]||(s[0]=[t(`<h1 id="Headless-UI" tabindex="-1">Headless UI <a class="header-anchor" href="#Headless-UI" aria-label="Permalink to &quot;Headless UI {#Headless-UI}&quot;">​</a></h1><p>An example for running the Headless UI. The headless UI only requires one input file containing all needed parameters and settings: ModelSettings, CellParameters, CyclingProtocol, SimulationSettings, and SolverSettings. This UI lacks some of the handy input tools setup for the interactive UI using a setup of the model and simulation object passed to the <code>solve()</code> function. The Headless UI is very convenient when running batches of simulations and within a digital twin and/or websocket or restfull api situation.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BattMo, GLMakie</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">simulation_input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> load_full_simulation_input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; from_default_set </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;chen_2020&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> run_simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(simulation_input)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">plot_dashboard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output; plot_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;contour&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><img src="`+n+'" alt=""></p><h2 id="Example-on-GitHub" tabindex="-1">Example on GitHub <a class="header-anchor" href="#Example-on-GitHub" aria-label="Permalink to &quot;Example on GitHub {#Example-on-GitHub}&quot;">​</a></h2><p>If you would like to run this example yourself, it can be downloaded from the BattMo.jl GitHub repository <a href="https://github.com/BattMoTeam/BattMo.jl/blob/main/examples/example_headless.jl" target="_blank" rel="noreferrer">as a script</a>.</p><hr><p><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl" target="_blank" rel="noreferrer">Literate.jl</a>.</em></p>',8)])])}const m=a(l,[["render",p]]);export{c as __pageData,m as default};
