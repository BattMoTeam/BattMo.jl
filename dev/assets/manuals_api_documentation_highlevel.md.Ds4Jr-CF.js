import{_ as o,C as p,c as r,o as d,j as s,a,aA as n,G as e,w as l}from"./chunks/framework.DDDm73_6.js";const w=JSON.parse('{"title":"High level interface","description":"","frontmatter":{},"headers":[],"relativePath":"manuals/api_documentation/highlevel.md","filePath":"manuals/api_documentation/highlevel.md","lastUpdated":null}'),u={name:"manuals/api_documentation/highlevel.md"},h={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""};function I(D,t,L,O,R,V){const i=p("Badge");return d(),r("div",null,[t[86]||(t[86]=s("h1",{id:"High-level-interface",tabindex:"-1"},[a("High level interface "),s("a",{class:"header-anchor",href:"#High-level-interface","aria-label":'Permalink to "High level interface {#High-level-interface}"'},"​")],-1)),t[87]||(t[87]=s("h2",{id:"Input-types",tabindex:"-1"},[a("Input types "),s("a",{class:"header-anchor",href:"#Input-types","aria-label":'Permalink to "Input types {#Input-types}"'},"​")],-1)),s("details",h,[s("summary",null,[t[0]||(t[0]=s("a",{id:"BattMo.AbstractInput",href:"#BattMo.AbstractInput"},[s("span",{class:"jlbinding"},"BattMo.AbstractInput")],-1)),t[1]||(t[1]=a()),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[3]||(t[3]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AbstractInput</span></span></code></pre></div><p>Abstract type for all parameter sets that can be given as an input to BattMo.</p><p>For any structure of this type, it is possible to access and set the values of the object using the same syntax as a standard Julia <a href="https://docs.julialang.org/en/v1/base/collections/#Dictionaries" target="_blank" rel="noreferrer">dictionary</a>.</p>',3)),e(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[2]||(t[2]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/bc4060f42d0249469dccabe0330cb7226aa86da6/src/input/input_types.jl#L11-L18",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),s("details",g,[s("summary",null,[t[4]||(t[4]=s("a",{id:"BattMo.ParameterSet",href:"#BattMo.ParameterSet"},[s("span",{class:"jlbinding"},"BattMo.ParameterSet")],-1)),t[5]||(t[5]=a()),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[7]||(t[7]=s("p",null,"Abstract type for parameter sets that are part of the user API.",-1)),e(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[6]||(t[6]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/bc4060f42d0249469dccabe0330cb7226aa86da6/src/input/input_types.jl#L146-L148",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]})]),s("details",c,[s("summary",null,[t[8]||(t[8]=s("a",{id:"BattMo.CellParameters",href:"#BattMo.CellParameters"},[s("span",{class:"jlbinding"},"BattMo.CellParameters")],-1)),t[9]||(t[9]=a()),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[11]||(t[11]=s("p",null,"Cell parameter set type that represents the cell parameters",-1)),e(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[10]||(t[10]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/bc4060f42d0249469dccabe0330cb7226aa86da6/src/input/input_types.jl#L194",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[10]})]),s("details",k,[s("summary",null,[t[12]||(t[12]=s("a",{id:"BattMo.CyclingProtocol",href:"#BattMo.CyclingProtocol"},[s("span",{class:"jlbinding"},"BattMo.CyclingProtocol")],-1)),t[13]||(t[13]=a()),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[15]||(t[15]=s("p",null,"Parameter set type that represents the cycling protocol related parameters",-1)),e(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[14]||(t[14]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/bc4060f42d0249469dccabe0330cb7226aa86da6/src/input/input_types.jl#L204",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[14]})]),s("details",m,[s("summary",null,[t[16]||(t[16]=s("a",{id:"BattMo.ModelSettings",href:"#BattMo.ModelSettings"},[s("span",{class:"jlbinding"},"BattMo.ModelSettings")],-1)),t[17]||(t[17]=a()),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[19]||(t[19]=s("p",null,"Parameter set type that represents the model related settings",-1)),e(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[18]||(t[18]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/bc4060f42d0249469dccabe0330cb7226aa86da6/src/input/input_types.jl#L213",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[18]})]),s("details",y,[s("summary",null,[t[20]||(t[20]=s("a",{id:"BattMo.SimulationSettings",href:"#BattMo.SimulationSettings"},[s("span",{class:"jlbinding"},"BattMo.SimulationSettings")],-1)),t[21]||(t[21]=a()),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[23]||(t[23]=s("p",null,"Parameter set type that represents the simulation related settings",-1)),e(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[22]||(t[22]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/bc4060f42d0249469dccabe0330cb7226aa86da6/src/input/input_types.jl#L223",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[22]})]),s("details",b,[s("summary",null,[t[24]||(t[24]=s("a",{id:"BattMo.FullSimulationInput",href:"#BattMo.FullSimulationInput"},[s("span",{class:"jlbinding"},"BattMo.FullSimulationInput")],-1)),t[25]||(t[25]=a()),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[27]||(t[27]=s("p",null,"Parameter set type that includes all other parameter set types",-1)),e(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[26]||(t[26]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/bc4060f42d0249469dccabe0330cb7226aa86da6/src/input/input_types.jl#L232",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[26]})]),s("details",f,[s("summary",null,[t[28]||(t[28]=s("a",{id:"BattMo.BattMoFormattedInput",href:"#BattMo.BattMoFormattedInput"},[s("span",{class:"jlbinding"},"BattMo.BattMoFormattedInput")],-1)),t[29]||(t[29]=a()),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[31]||(t[31]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BattMoFormattedInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractInput</span></span></code></pre></div><p>Abstract type representing input parameters formatted for BattMo. This type is used exclusively in the backend as an input to the simulation. Subtypes of <code>BattMoFormattedInput</code> contain parameter dictionaries structured for BattMo compatibility.</p>',2)),e(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[30]||(t[30]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/bc4060f42d0249469dccabe0330cb7226aa86da6/src/input/input_types.jl#L241-L247",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[30]})]),s("details",_,[s("summary",null,[t[32]||(t[32]=s("a",{id:"BattMo.InputParams",href:"#BattMo.InputParams"},[s("span",{class:"jlbinding"},"BattMo.InputParams")],-1)),t[33]||(t[33]=a()),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[35]||(t[35]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InputParams </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BattMoFormattedInput</span></span></code></pre></div><p>Represents a validated and backend-formatted set of input parameters for a BattMo simulation.</p><p><strong>Fields</strong></p><ul><li><code>data ::Dict{String, Any}</code> : A dictionary storing the input parameters for BattMo.</li></ul>',4)),e(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[34]||(t[34]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/bc4060f42d0249469dccabe0330cb7226aa86da6/src/input/input_types.jl#L251-L258",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[34]})]),s("details",B,[s("summary",null,[t[36]||(t[36]=s("a",{id:"BattMo.MatlabInputParams",href:"#BattMo.MatlabInputParams"},[s("span",{class:"jlbinding"},"BattMo.MatlabInputParams")],-1)),t[37]||(t[37]=a()),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[39]||(t[39]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MatlabInputParams </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BattMoFormattedInput</span></span></code></pre></div><p>Represents input parameters derived from MATLAB-generated files, formatted for BattMo compatibility.</p><p><strong>Fields</strong></p><ul><li><code>data ::Dict{String, Any}</code> : A dictionary storing MATLAB-extracted input parameters.</li></ul>',4)),e(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[38]||(t[38]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/bc4060f42d0249469dccabe0330cb7226aa86da6/src/input/input_types.jl#L265-L272",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[38]})]),t[88]||(t[88]=s("h2",{id:"Read-input",tabindex:"-1"},[a("Read input "),s("a",{class:"header-anchor",href:"#Read-input","aria-label":'Permalink to "Read input {#Read-input}"'},"​")],-1)),s("details",T,[s("summary",null,[t[40]||(t[40]=s("a",{id:"BattMo.load_cell_parameters",href:"#BattMo.load_cell_parameters"},[s("span",{class:"jlbinding"},"BattMo.load_cell_parameters")],-1)),t[41]||(t[41]=a()),e(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[43]||(t[43]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load_cell_parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; from_file_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from_default_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from_model_template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BatteryModelSetup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reads and loads cell parameters either from a JSON file, a default set, or a model template.</p><p><strong>Arguments</strong></p><ul><li><p><code>from_file_path ::String</code> : (Optional) Path to the JSON file containing cell parameters.</p></li><li><p><code>from_default_set ::String</code> : (Optional) The name of the default set to load cell parameters from.</p></li><li><p><code>from_model_template ::BatteryModelSetup</code> : (Optional) A <code>BatteryModelSetup</code> instance used to load an empty set of cell parameters required for the concerning model.</p></li></ul><p><strong>Returns</strong></p><p>An instance of <code>CellParameters</code>.</p><p><strong>Errors</strong></p><p>Throws an <code>ArgumentError</code> if none of the arguments are provided.</p>',8)),e(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[42]||(t[42]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/bc4060f42d0249469dccabe0330cb7226aa86da6/src/input/loader.jl#L35-L50",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[42]})]),s("details",E,[s("summary",null,[t[44]||(t[44]=s("a",{id:"BattMo.load_cycling_protocol",href:"#BattMo.load_cycling_protocol"},[s("span",{class:"jlbinding"},"BattMo.load_cycling_protocol")],-1)),t[45]||(t[45]=a()),e(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[47]||(t[47]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load_cycling_protocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; from_file_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from_default_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reads and loads cycling protocol either from a JSON file or a default set.</p><p><strong>Arguments</strong></p><ul><li><p><code>from_file_path ::String</code> : (Optional) Path to the JSON file containing cycling protocol.</p></li><li><p><code>from_default_set ::String</code> : (Optional) The name of the default set to load cycling protocol from.</p></li></ul><p><strong>Returns</strong></p><p>An instance of <code>CyclingProtocol</code>.</p><p><strong>Errors</strong></p><p>Throws an <code>ArgumentError</code> if neither <code>from_file_path</code> nor <code>from_default_set</code> is provided.</p>',8)),e(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[46]||(t[46]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/bc4060f42d0249469dccabe0330cb7226aa86da6/src/input/loader.jl#L72-L86",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[46]})]),s("details",j,[s("summary",null,[t[48]||(t[48]=s("a",{id:"BattMo.load_model_settings",href:"#BattMo.load_model_settings"},[s("span",{class:"jlbinding"},"BattMo.load_model_settings")],-1)),t[49]||(t[49]=a()),e(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[51]||(t[51]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load_model_settings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; from_file_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from_default_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reads and loads model settings either from a JSON file or a default set.</p><p><strong>Arguments</strong></p><ul><li><p><code>from_file_path ::String</code> : (Optional) Path to the JSON file containing model settings.</p></li><li><p><code>from_default_set ::String</code> : (Optional) The name of the default set to load model settings from.</p></li></ul><p><strong>Returns</strong></p><p>An instance of <code>ModelSettings</code>.</p><p><strong>Errors</strong></p><p>Throws an <code>ArgumentError</code> if neither <code>from_file_path</code> nor <code>from_default_set</code> is provided.</p>',8)),e(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[50]||(t[50]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/bc4060f42d0249469dccabe0330cb7226aa86da6/src/input/loader.jl#L5-L19",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[50]})]),s("details",C,[s("summary",null,[t[52]||(t[52]=s("a",{id:"BattMo.load_simulation_settings",href:"#BattMo.load_simulation_settings"},[s("span",{class:"jlbinding"},"BattMo.load_simulation_settings")],-1)),t[53]||(t[53]=a()),e(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[55]||(t[55]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load_simulation_settings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; from_file_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from_default_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from_model_template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BatteryModelSetup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reads and loads simulation settings either from a JSON file, a default set, or a model template.</p><p><strong>Arguments</strong></p><ul><li><p><code>from_file_path ::String</code> : (Optional) Path to the JSON file containing simulation settings.</p></li><li><p><code>from_default_set ::String</code> : (Optional) The name of the default set to load simulation settings from.</p></li><li><p><code>from_model_template ::BatteryModelSetup</code> : (Optional) A <code>BatteryModelSetup</code> instance used to load an empty set of simulation settings required for the concerning model.</p></li></ul><p><strong>Returns</strong></p><p>An instance of <code>SimulationSettings</code>.</p><p><strong>Errors</strong></p><p>Throws an <code>ArgumentError</code> if none of the arguments are provided.</p>',8)),e(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[54]||(t[54]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/bc4060f42d0249469dccabe0330cb7226aa86da6/src/input/loader.jl#L102-L117",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[54]})]),s("details",F,[s("summary",null,[t[56]||(t[56]=s("a",{id:"BattMo.load_battmo_formatted_input",href:"#BattMo.load_battmo_formatted_input"},[s("span",{class:"jlbinding"},"BattMo.load_battmo_formatted_input")],-1)),t[57]||(t[57]=a()),e(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[59]||(t[59]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load_battmo_formatted_input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filepath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reads and parses a JSON file into an <code>InputParams</code> instance.</p><p><strong>Arguments</strong></p><ul><li><code>filepath ::String</code> : Path to the JSON file.</li></ul><p><strong>Returns</strong></p><p>An instance of <code>InputParams</code>.</p>',6)),e(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[58]||(t[58]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/bc4060f42d0249469dccabe0330cb7226aa86da6/src/input/loader.jl#L153-L163",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[58]})]),s("details",M,[s("summary",null,[t[60]||(t[60]=s("a",{id:"BattMo.load_matlab_battmo_input",href:"#BattMo.load_matlab_battmo_input"},[s("span",{class:"jlbinding"},"BattMo.load_matlab_battmo_input")],-1)),t[61]||(t[61]=a()),e(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[63]||(t[63]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load_matlab_battmo_input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inputFileName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reads the input from a MATLAB output file which contains a description of the model and returns an <code>MatlabInputParams</code> that can be sent to the simulator.</p><p><strong>Arguments</strong></p><ul><li><code>inputFileName ::String</code> : Path to the MATLAB file.</li></ul><p><strong>Returns</strong></p><p>An instance of <code>MatlabInputParams</code> that can be sent to the simulator via <code>run_battery</code>.</p>',6)),e(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[62]||(t[62]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/bc4060f42d0249469dccabe0330cb7226aa86da6/src/input/loader.jl#L136-L148",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[62]})]),t[89]||(t[89]=s("h2",{id:"Battery-model-types",tabindex:"-1"},[a("Battery model types "),s("a",{class:"header-anchor",href:"#Battery-model-types","aria-label":'Permalink to "Battery model types {#Battery-model-types}"'},"​")],-1)),s("details",A,[s("summary",null,[t[64]||(t[64]=s("a",{id:"BattMo.BatteryModelSetup",href:"#BattMo.BatteryModelSetup"},[s("span",{class:"jlbinding"},"BattMo.BatteryModelSetup")],-1)),t[65]||(t[65]=a()),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[67]||(t[67]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BatteryModelSetup</span></span></code></pre></div><p>Abstract type representing a battery model. All battery models should inherit from this type.</p>',2)),e(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[66]||(t[66]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/bc4060f42d0249469dccabe0330cb7226aa86da6/src/models/full_battery_model_setups/battery_model.jl#L4-L9",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[66]})]),s("details",S,[s("summary",null,[t[68]||(t[68]=s("a",{id:"BattMo.LithiumIonBattery",href:"#BattMo.LithiumIonBattery"},[s("span",{class:"jlbinding"},"BattMo.LithiumIonBattery")],-1)),t[69]||(t[69]=a()),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[71]||(t[71]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LithiumIonBattery </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BatteryModelSetup</span></span></code></pre></div><p>Represents a lithium-ion battery model based on the Doyle-Fuller-Newman approach.</p><p><strong>Fields</strong></p><ul><li><p><code>name ::String</code> : A descriptive name for the model.</p></li><li><p><code>model_settings ::ModelSettings</code> : Settings specific to the model.</p></li></ul><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>LithiumIonBattery(; model_settings = get_default_model_settings(LithiumIonBattery))</span></span></code></pre></div><p>Creates an instance of <code>LithiumIonBattery</code> with the specified or default model settings. The model name is automatically generated based on the model geometry.</p>',7)),e(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[70]||(t[70]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/bc4060f42d0249469dccabe0330cb7226aa86da6/src/models/full_battery_model_setups/lithium_ion.jl#L5-L19",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[70]})]),t[90]||(t[90]=s("h2",{id:"Forward-simulation",tabindex:"-1"},[a("Forward simulation "),s("a",{class:"header-anchor",href:"#Forward-simulation","aria-label":'Permalink to "Forward simulation {#Forward-simulation}"'},"​")],-1)),s("details",v,[s("summary",null,[t[72]||(t[72]=s("a",{id:"BattMo.Simulation",href:"#BattMo.Simulation"},[s("span",{class:"jlbinding"},"BattMo.Simulation")],-1)),t[73]||(t[73]=a()),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),t[75]||(t[75]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Simulation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SolvingProblem</span></span></code></pre></div><p>Represents a battery simulation problem to be solved.</p><p><strong>Fields</strong></p><ul><li><p><code>function_to_solve ::Function</code> : The function responsible for running the simulation.</p></li><li><p><code>model ::BatteryModelSetup</code> : The battery model being simulated.</p></li><li><p><code>cell_parameters ::CellParameters</code> : The cell parameters for the simulation.</p></li><li><p><code>cycling_protocol ::CyclingProtocol</code> : The cycling protocol used.</p></li><li><p><code>simulation_settings ::SimulationSettings</code> : The simulation settings applied.</p></li><li><p><code>is_valid ::Bool</code> : A flag indicating if the simulation is valid.</p></li></ul><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Simulation(model::BatteryModelSetup, cell_parameters::CellParameters, cycling_protocol::CyclingProtocol; simulation_settings::SimulationSettings = get_default_simulation_settings(model))</span></span></code></pre></div><p>Creates an instance of <code>Simulation</code>, initializing it with the given parameters and defaulting simulation settings if not provided.</p>',7)),e(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[74]||(t[74]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/bc4060f42d0249469dccabe0330cb7226aa86da6/src/setup/model_setup.jl#L24-L42",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[74]})]),s("details",P,[s("summary",null,[t[76]||(t[76]=s("a",{id:"BattMo.solve",href:"#BattMo.solve"},[s("span",{class:"jlbinding"},"BattMo.solve")],-1)),t[77]||(t[77]=a()),e(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[79]||(t[79]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">solve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(problem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; hook</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Solves a given <code>Simulation</code> problem by running the associated simulation function.</p><p><strong>Arguments</strong></p><ul><li><p><code>problem ::Simulation</code> : The simulation problem instance.</p></li><li><p><code>hook</code> (optional) : A user-defined function or callback to modify the solving process.</p></li><li><p><code>kwargs...</code> : Additional keyword arguments passed to the solver.</p></li></ul><p><strong>Returns</strong></p><p>The output of the simulation if the problem is valid.</p><p><strong>Throws</strong></p><p>Throws an error if the <code>Simulation</code> object is not valid, prompting the user to check warnings during instantiation.</p>',8)),e(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[78]||(t[78]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/bc4060f42d0249469dccabe0330cb7226aa86da6/src/setup/model_setup.jl#L123-L138",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[78]})]),s("details",x,[s("summary",null,[t[80]||(t[80]=s("a",{id:"BattMo.run_battery",href:"#BattMo.run_battery"},[s("span",{class:"jlbinding"},"BattMo.run_battery")],-1)),t[81]||(t[81]=a()),e(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),t[84]||(t[84]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">run_battery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BatteryModelSetup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cell_parameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CellParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			cycling_protocol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CyclingProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, simulation_settings</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SimulationSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			hook</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Runs a battery simulation using the provided model, cell parameters, cycling protocol, and simulation settings.</p><p><strong>Arguments</strong></p><ul><li><p><code>model ::BatteryModelSetup</code> : The battery model to be used.</p></li><li><p><code>cell_parameters ::CellParameters</code> : The cell parameter set.</p></li><li><p><code>cycling_protocol ::CyclingProtocol</code> : The cycling protocol parameter set.</p></li><li><p><code>simulation_settings ::SimulationSettings</code> : The simulation settings parameter set.</p></li><li><p><code>hook</code> (optional) : A user-defined function or callback to modify the process.</p></li><li><p><code>kwargs...</code> : Additional keyword arguments.</p></li></ul><p><strong>Returns</strong></p><p>The output of the battery simulation after executing <code>run_battery</code> with formatted input.</p>`,6)),e(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[82]||(t[82]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/bc4060f42d0249469dccabe0330cb7226aa86da6/src/setup/model_setup.jl#L250-L267",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[82]}),t[85]||(t[85]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">run_battery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inputparams</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractInputParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; hook </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Simulate a battery for a given input. The input is expected to be an instance of AbstractInputParams. Such input can be prepared from a json file using the function <a href="/BattMo.jl/dev/manuals/api_documentation/highlevel#BattMo.load_battmo_formatted_input"><code>load_battmo_formatted_input</code></a>.</p>',2)),e(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>t[83]||(t[83]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/bc4060f42d0249469dccabe0330cb7226aa86da6/src/setup/model_setup.jl#L285-L292",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[83]})])])}const J=o(u,[["render",I]]);export{w as __pageData,J as default};
