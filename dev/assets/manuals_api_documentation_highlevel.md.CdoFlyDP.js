import{_ as o,C as p,c as r,o as d,j as s,a as e,aA as n,G as a,w as l}from"./chunks/framework.BxeeVtwU.js";const si=JSON.parse('{"title":"High level interface","description":"","frontmatter":{},"headers":[],"relativePath":"manuals/api_documentation/highlevel.md","filePath":"manuals/api_documentation/highlevel.md","lastUpdated":null}'),h={name:"manuals/api_documentation/highlevel.md"},k={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},q={class:"jldocstring custom-block",open:""},I={class:"jldocstring custom-block",open:""},O={class:"jldocstring custom-block",open:""},L={class:"jldocstring custom-block",open:""},N={class:"jldocstring custom-block",open:""},V={class:"jldocstring custom-block",open:""},R={class:"jldocstring custom-block",open:""},z={class:"jldocstring custom-block",open:""},J={class:"jldocstring custom-block",open:""},U={class:"jldocstring custom-block",open:""},G={class:"jldocstring custom-block",open:""},H={class:"jldocstring custom-block",open:""},K={class:"jldocstring custom-block",open:""};function $(W,i,Q,X,Y,Z){const t=p("Badge");return d(),r("div",null,[i[145]||(i[145]=s("h1",{id:"High-level-interface",tabindex:"-1"},[e("High level interface "),s("a",{class:"header-anchor",href:"#High-level-interface","aria-label":'Permalink to "High level interface {#High-level-interface}"'},"​")],-1)),i[146]||(i[146]=s("h2",{id:"Input-types",tabindex:"-1"},[e("Input types "),s("a",{class:"header-anchor",href:"#Input-types","aria-label":'Permalink to "Input types {#Input-types}"'},"​")],-1)),s("details",k,[s("summary",null,[i[0]||(i[0]=s("a",{id:"BattMo.AbstractInput",href:"#BattMo.AbstractInput"},[s("span",{class:"jlbinding"},"BattMo.AbstractInput")],-1)),i[1]||(i[1]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[3]||(i[3]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AbstractInput</span></span></code></pre></div><p>Abstract type for all parameter sets that can be given as an input to BattMo.</p><p>For any structure of this type, it is possible to access and set the values of the object using the same syntax as a standard Julia <a href="https://docs.julialang.org/en/v1/base/collections/#Dictionaries" target="_blank" rel="noreferrer">dictionary</a>.</p>',3)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[2]||(i[2]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/input/input_types.jl#L11-L18",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",u,[s("summary",null,[i[4]||(i[4]=s("a",{id:"BattMo.ParameterSet",href:"#BattMo.ParameterSet"},[s("span",{class:"jlbinding"},"BattMo.ParameterSet")],-1)),i[5]||(i[5]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[7]||(i[7]=s("p",null,"Abstract type for parameter sets that are part of the user API.",-1)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[6]||(i[6]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/input/input_types.jl#L146-L148",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",g,[s("summary",null,[i[8]||(i[8]=s("a",{id:"BattMo.CellParameters",href:"#BattMo.CellParameters"},[s("span",{class:"jlbinding"},"BattMo.CellParameters")],-1)),i[9]||(i[9]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[11]||(i[11]=s("p",null,"Cell parameter set type that represents the cell parameters",-1)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[10]||(i[10]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/input/input_types.jl#L204",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",c,[s("summary",null,[i[12]||(i[12]=s("a",{id:"BattMo.CyclingProtocol",href:"#BattMo.CyclingProtocol"},[s("span",{class:"jlbinding"},"BattMo.CyclingProtocol")],-1)),i[13]||(i[13]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[15]||(i[15]=s("p",null,"Parameter set type that represents the cycling protocol related parameters",-1)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[14]||(i[14]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/input/input_types.jl#L214",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",y,[s("summary",null,[i[16]||(i[16]=s("a",{id:"BattMo.ModelSettings",href:"#BattMo.ModelSettings"},[s("span",{class:"jlbinding"},"BattMo.ModelSettings")],-1)),i[17]||(i[17]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[19]||(i[19]=s("p",null,"Parameter set type that represents the model related settings",-1)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[18]||(i[18]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/input/input_types.jl#L223",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",m,[s("summary",null,[i[20]||(i[20]=s("a",{id:"BattMo.SimulationSettings",href:"#BattMo.SimulationSettings"},[s("span",{class:"jlbinding"},"BattMo.SimulationSettings")],-1)),i[21]||(i[21]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[23]||(i[23]=s("p",null,"Parameter set type that represents the simulation related settings",-1)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[22]||(i[22]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/input/input_types.jl#L233",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",E,[s("summary",null,[i[24]||(i[24]=s("a",{id:"BattMo.SolverSettings",href:"#BattMo.SolverSettings"},[s("span",{class:"jlbinding"},"BattMo.SolverSettings")],-1)),i[25]||(i[25]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[27]||(i[27]=s("p",null,"Parameter set type that represents the simulation related settings",-1)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[26]||(i[26]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/input/input_types.jl#L243",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",b,[s("summary",null,[i[28]||(i[28]=s("a",{id:"BattMo.FullSimulationInput",href:"#BattMo.FullSimulationInput"},[s("span",{class:"jlbinding"},"BattMo.FullSimulationInput")],-1)),i[29]||(i[29]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[31]||(i[31]=s("p",null,"Parameter set type that includes all other parameter set types",-1)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[30]||(i[30]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/input/input_types.jl#L252",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i[147]||(i[147]=s("h2",{id:"Read-input",tabindex:"-1"},[e("Read input "),s("a",{class:"header-anchor",href:"#Read-input","aria-label":'Permalink to "Read input {#Read-input}"'},"​")],-1)),s("details",f,[s("summary",null,[i[32]||(i[32]=s("a",{id:"BattMo.load_cell_parameters",href:"#BattMo.load_cell_parameters"},[s("span",{class:"jlbinding"},"BattMo.load_cell_parameters")],-1)),i[33]||(i[33]=e()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[35]||(i[35]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load_cell_parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; from_file_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from_default_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from_model_template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ModelConfigured</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reads and loads cell parameters either from a JSON file, a default set, or a model template.</p><p><strong>Arguments</strong></p><ul><li><p><code>from_file_path ::String</code> : (Optional) Path to the JSON file containing cell parameters.</p></li><li><p><code>from_default_set ::String</code> : (Optional) The name of the default set to load cell parameters from.</p></li><li><p><code>from_model_template ::ModelConfigured</code> : (Optional) A <code>ModelConfigured</code> instance used to load an empty set of cell parameters required for the concerning model.</p></li></ul><p><strong>Returns</strong></p><p>An instance of <code>CellParameters</code>.</p><p><strong>Errors</strong></p><p>Throws an <code>ArgumentError</code> if none of the arguments are provided.</p>',8)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[34]||(i[34]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/input/loader.jl#L35-L50",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",F,[s("summary",null,[i[36]||(i[36]=s("a",{id:"BattMo.load_cycling_protocol",href:"#BattMo.load_cycling_protocol"},[s("span",{class:"jlbinding"},"BattMo.load_cycling_protocol")],-1)),i[37]||(i[37]=e()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[39]||(i[39]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load_cycling_protocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; from_file_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from_default_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reads and loads cycling protocol either from a JSON file or a default set.</p><p><strong>Arguments</strong></p><ul><li><p><code>from_file_path ::String</code> : (Optional) Path to the JSON file containing cycling protocol.</p></li><li><p><code>from_default_set ::String</code> : (Optional) The name of the default set to load cycling protocol from.</p></li></ul><p><strong>Returns</strong></p><p>An instance of <code>CyclingProtocol</code>.</p><p><strong>Errors</strong></p><p>Throws an <code>ArgumentError</code> if neither <code>from_file_path</code> nor <code>from_default_set</code> is provided.</p>',8)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[38]||(i[38]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/input/loader.jl#L72-L86",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",_,[s("summary",null,[i[40]||(i[40]=s("a",{id:"BattMo.load_model_settings",href:"#BattMo.load_model_settings"},[s("span",{class:"jlbinding"},"BattMo.load_model_settings")],-1)),i[41]||(i[41]=e()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[43]||(i[43]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load_model_settings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; from_file_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from_default_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reads and loads model settings either from a JSON file or a default set.</p><p><strong>Arguments</strong></p><ul><li><p><code>from_file_path ::String</code> : (Optional) Path to the JSON file containing model settings.</p></li><li><p><code>from_default_set ::String</code> : (Optional) The name of the default set to load model settings from.</p></li></ul><p><strong>Returns</strong></p><p>An instance of <code>ModelSettings</code>.</p><p><strong>Errors</strong></p><p>Throws an <code>ArgumentError</code> if neither <code>from_file_path</code> nor <code>from_default_set</code> is provided.</p>',8)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[42]||(i[42]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/input/loader.jl#L5-L19",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",C,[s("summary",null,[i[44]||(i[44]=s("a",{id:"BattMo.load_simulation_settings",href:"#BattMo.load_simulation_settings"},[s("span",{class:"jlbinding"},"BattMo.load_simulation_settings")],-1)),i[45]||(i[45]=e()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[47]||(i[47]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load_simulation_settings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; from_file_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from_default_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from_model_template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ModelConfigured</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reads and loads simulation settings either from a JSON file, a default set, or a model template.</p><p><strong>Arguments</strong></p><ul><li><p><code>from_file_path ::String</code> : (Optional) Path to the JSON file containing simulation settings.</p></li><li><p><code>from_default_set ::String</code> : (Optional) The name of the default set to load simulation settings from.</p></li><li><p><code>from_model_template ::ModelConfigured</code> : (Optional) A <code>ModelConfigured</code> instance used to load an empty set of simulation settings required for the concerning model.</p></li></ul><p><strong>Returns</strong></p><p>An instance of <code>SimulationSettings</code>.</p><p><strong>Errors</strong></p><p>Throws an <code>ArgumentError</code> if none of the arguments are provided.</p>',8)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[46]||(i[46]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/input/loader.jl#L102-L117",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",v,[s("summary",null,[i[48]||(i[48]=s("a",{id:"BattMo.load_solver_settings",href:"#BattMo.load_solver_settings"},[s("span",{class:"jlbinding"},"BattMo.load_solver_settings")],-1)),i[49]||(i[49]=e()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[51]||(i[51]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load_solver_settings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; from_file_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from_default_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reads and loads solver settings either from a JSON file or a default set.</p><p><strong>Arguments</strong></p><ul><li><p><code>from_file_path ::String</code> : (Optional) Path to the JSON file containing solver settings.</p></li><li><p><code>from_default_set ::String</code> : (Optional) The name of the default set to load solver settings from.</p></li></ul><p><strong>Returns</strong></p><p>An instance of <code>SolverSettings</code>.</p><p><strong>Errors</strong></p><p>Throws an <code>ArgumentError</code> if none of the arguments are provided.</p>',8)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[50]||(i[50]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/input/loader.jl#L140-L154",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",B,[s("summary",null,[i[52]||(i[52]=s("a",{id:"BattMo.load_full_simulation_input",href:"#BattMo.load_full_simulation_input"},[s("span",{class:"jlbinding"},"BattMo.load_full_simulation_input")],-1)),i[53]||(i[53]=e()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[55]||(i[55]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load_full_simulation_input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; from_file_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from_default_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reads and loads a full simulation input either from a JSON file or a default set. A full simulation input should contain cell parameters, cycling protocol, model settings, the base model, simulation settings, and optionally solver settings.</p><p><strong>Arguments</strong></p><ul><li><p><code>from_file_path ::String</code> : (Optional) Path to the JSON file containing the full simulation input.</p></li><li><p><code>from_default_set ::String</code> : (Optional) The name of the default set to load the full simulation input from.</p></li></ul><p><strong>Returns</strong></p><p>An instance of <code>FullSimulationInput</code>.</p><p><strong>Errors</strong></p><p>Throws an <code>ArgumentError</code> if none of the arguments are provided.</p>',8)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[54]||(i[54]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/input/loader.jl#L174-L189",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i[148]||(i[148]=s("h2",{id:"Model-types",tabindex:"-1"},[e("Model types "),s("a",{class:"header-anchor",href:"#Model-types","aria-label":'Permalink to "Model types {#Model-types}"'},"​")],-1)),s("details",j,[s("summary",null,[i[56]||(i[56]=s("a",{id:"BattMo.ModelConfigured",href:"#BattMo.ModelConfigured"},[s("span",{class:"jlbinding"},"BattMo.ModelConfigured")],-1)),i[57]||(i[57]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[59]||(i[59]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ModelConfigured</span></span></code></pre></div><p>Abstract type representing a model. All models should inherit from this type.</p>',2)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[58]||(i[58]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/models/full_battery_models/battery.jl#L4-L9",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",A,[s("summary",null,[i[60]||(i[60]=s("a",{id:"BattMo.LithiumIonBattery",href:"#BattMo.LithiumIonBattery"},[s("span",{class:"jlbinding"},"BattMo.LithiumIonBattery")],-1)),i[61]||(i[61]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[63]||(i[63]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LithiumIonBattery </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Battery</span></span></code></pre></div><p>Represents a lithium-ion battery model based on the Doyle-Fuller-Newman approach.</p><p><strong>Fields</strong></p><ul><li><p><code>name ::String</code> : A descriptive name for the model.</p></li><li><p><code>model_settings ::ModelSettings</code> : Settings specific to the model.</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LithiumIonBattery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; model_settings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> get_default_model_settings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LithiumIonBattery))</span></span></code></pre></div><p>Creates an instance of <code>LithiumIonBattery</code> with the specified or default model settings. The model name is automatically generated based on the model geometry.</p>',7)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[62]||(i[62]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/models/full_battery_models/lithium_ion.jl#L7-L21",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",T,[s("summary",null,[i[64]||(i[64]=s("a",{id:"BattMo.SodiumIonBattery",href:"#BattMo.SodiumIonBattery"},[s("span",{class:"jlbinding"},"BattMo.SodiumIonBattery")],-1)),i[65]||(i[65]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[67]||(i[67]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SodiumIonBattery </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Battery</span></span></code></pre></div><p>Represents a lithium-ion battery model based on the Doyle-Fuller-Newman approach.</p><p><strong>Fields</strong></p><ul><li><p><code>name ::String</code> : A descriptive name for the model.</p></li><li><p><code>model_settings ::ModelSettings</code> : Settings specific to the model.</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SodiumIonBattery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; model_settings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> get_default_model_settings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SodiumIonBattery))</span></span></code></pre></div><p>Creates an instance of <code>SodiumIonBattery</code> with the specified or default model settings. The model name is automatically generated based on the model geometry.</p>',7)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[66]||(i[66]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/models/full_battery_models/sodium_ion.jl#L5-L19",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i[149]||(i[149]=s("h2",{id:"Forward-simulation",tabindex:"-1"},[e("Forward simulation "),s("a",{class:"header-anchor",href:"#Forward-simulation","aria-label":'Permalink to "Forward simulation {#Forward-simulation}"'},"​")],-1)),s("details",M,[s("summary",null,[i[68]||(i[68]=s("a",{id:"BattMo.Simulation",href:"#BattMo.Simulation"},[s("span",{class:"jlbinding"},"BattMo.Simulation")],-1)),i[69]||(i[69]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[71]||(i[71]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ModelConfigured</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cell_parameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CellParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cycling_protocol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CyclingProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; simulation_settings</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SimulationSettings</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> get_default_simulation_settings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model))</span></span></code></pre></div><p>Constructs a <code>Simulation</code> object that sets up and validates all necessary components for simulating a battery model.</p><p><strong>Arguments</strong></p><ul><li><p><code>model::ModelConfigured</code>: A fully configured model object that includes the physical and numerical setup.</p></li><li><p><code>cell_parameters::CellParameters</code>: Parameters defining the physical characteristics of the battery cell.</p></li><li><p><code>cycling_protocol::CyclingProtocol</code>: The protocol specifying the charging/discharging cycles for the simulation.</p></li><li><p><code>simulation_settings::SimulationSettings</code> (optional): Configuration settings controlling solver behavior, time stepping, etc. If not provided, default settings are generated based on the model.</p></li></ul><p><strong>Behavior</strong></p><ul><li><p>Validates <code>model</code>, <code>cell_parameters</code>, <code>cycling_protocol</code>, and <code>simulation_settings</code>.</p></li><li><p>Sets up default solver options if not explicitly defined.</p></li><li><p>Initializes computational grids and couplings.</p></li><li><p>Configures the physical model and parameters.</p></li><li><p>Prepares the initial simulation state and external forcing functions.</p></li><li><p>Instantiates a <code>Simulator</code> from the Jutul framework with the prepared state and parameters.</p></li><li><p>Defines the time-stepping strategy for the simulation.</p></li><li><p>Assembles a simulation configuration object used to control execution.</p></li></ul><p><strong>Returns</strong></p><p>A <code>Simulation</code> struct instance that includes:</p><ul><li><p>Validation flag (<code>is_valid</code>)</p></li><li><p>Prepared simulation components: model, grids, couplings, parameters, initial state, forces, time steps, and simulator instance.</p></li></ul><p><strong>Throws</strong></p><ul><li>An error if <code>model.is_valid == false</code>, halting construction with a helpful message.</li></ul>',11)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[70]||(i[70]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/simulation/simulation.jl#L13-L42",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",S,[s("summary",null,[i[72]||(i[72]=s("a",{id:"BattMo.solve-Tuple{Simulation}",href:"#BattMo.solve-Tuple{Simulation}"},[s("span",{class:"jlbinding"},"BattMo.solve")],-1)),i[73]||(i[73]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[75]||(i[75]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">solve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(problem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; accept_invalid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hook </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, info_level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, end_report </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> info_level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Solves a battery <code>Simulation</code> problem by executing the simulation workflow defined in <code>solve_simulation</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>problem::Simulation</code>: A fully constructed <code>Simulation</code> object, containing all model parameters, solver settings, and initial conditions.</p></li><li><p><code>accept_invalid::Bool</code> (optional): If <code>true</code>, bypasses the internal validation check on the <code>Simulation</code> object. Use with caution. Default is <code>false</code>.</p></li><li><p><code>hook</code> (optional): A user-defined callback or observer function that can be inserted into the simulation loop.</p></li><li><p><code>info_level::Int</code> (optional): Controls verbosity of simulation logging and output. Default is <code>0</code>.</p></li><li><p><code>end_report::Bool</code> (optional): Whether to print a summary report after simulation. Defaults to <code>true</code> if <code>info_level &gt; -1</code>.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments forwarded to <code>solve_simulation</code>.</p></li></ul><p><strong>Behavior</strong></p><ul><li><p>Validates the <code>Simulation</code> object unless <code>accept_invalid</code> is <code>true</code>.</p></li><li><p>Prepares simulation configuration options, including verbosity and report behavior.</p></li><li><p>Calls <code>solve_simulation</code>, passing in the simulation problem and configuration.</p></li></ul><p><strong>Returns</strong></p><ul><li>The result of <code>solve_simulation</code>, typically containing simulation outputs such as state trajectories, solver diagnostics, and performance metrics.</li></ul><p><strong>Throws</strong></p><ul><li>An error if the <code>Simulation</code> object is invalid and <code>accept_invalid</code> is not set to <code>true</code>.</li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sim </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, cell_parameters, cycling_protocol)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sim; info_level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,12)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[74]||(i[74]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/simulation/simulation.jl#L171-L200",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",D,[s("summary",null,[i[76]||(i[76]=s("a",{id:"BattMo.run_simulation",href:"#BattMo.run_simulation"},[s("span",{class:"jlbinding"},"BattMo.run_simulation")],-1)),i[77]||(i[77]=e()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[79]||(i[79]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">run_simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(simulation_input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FullSimulationInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Provides a headless UI for running a simulation.</p><p><strong>Arguments</strong></p><ul><li><p><code>simulation_input::FullSimulationInput</code>: A FullSimulationInput instance containing all the parameters and settings needed to run and solve a simulation.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments passed to the lower-level solver configuration.</p></li></ul><p><strong>Behavior</strong></p><ul><li><p>Extracts all relevant parameter sets and settings from the FullSimulationInput instance.</p></li><li><p>Instantiates a ModelConfigured using the provided model settings.</p></li><li><p>Instantiates a Simulation using the ModelConfigured, and the cell parameters, cycling protocol parameters, and simulation settings from the FullSimulationInput.</p></li><li><p>Solves the simulation by passing the Simulation instance and the solver settings from the FullSimulationInput to <code>BattMo.solve</code>.</p></li></ul><p><strong>Returns</strong></p><p>A NamedTuple containing the simulation results.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">simulation_input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> load_full_simulation_input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(;from_default_set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;chen_2020&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> run_simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(simulation_input)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">plot_dashboard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output)</span></span></code></pre></div>`,10)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[78]||(i[78]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/simulation/simulation_wrappers.jl#L7-L31",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i[150]||(i[150]=s("h2",{id:"Plotting",tabindex:"-1"},[e("Plotting "),s("a",{class:"header-anchor",href:"#Plotting","aria-label":'Permalink to "Plotting {#Plotting}"'},"​")],-1)),s("details",x,[s("summary",null,[i[80]||(i[80]=s("a",{id:"BattMo.plot_dashboard",href:"#BattMo.plot_dashboard"},[s("span",{class:"jlbinding"},"BattMo.plot_dashboard")],-1)),i[81]||(i[81]=e()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[83]||(i[83]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BattMo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">plot_dashboard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output; plot_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;simple&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Plot a dashboard summarizing simulation output with selectable styles.</p><p><strong>Arguments</strong></p><ul><li><p><code>output</code>: Simulation output NamedTuple.</p></li><li><p><code>plot_type</code>: One of <code>&quot;simple&quot;</code>, <code>&quot;line&quot;</code>, or <code>&quot;contour&quot;</code> (default <code>&quot;simple&quot;</code>).</p></li></ul><p><strong>Description</strong></p><ul><li><p><code>&quot;simple&quot;</code>: Shows time series of current and voltage.</p></li><li><p><code>&quot;line&quot;</code>: Adds interactive line plots of concentrations and potentials with a time slider.</p></li><li><p><code>&quot;contour&quot;</code>: Shows contour plots of concentrations and potentials over time and position.</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLMakie</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BattMo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">plot_dashboard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output; plot_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;line&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,8)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[82]||(i[82]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/plotting/1d.jl#L67-L86",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",P,[s("summary",null,[i[84]||(i[84]=s("a",{id:"BattMo.plot_output",href:"#BattMo.plot_output"},[s("span",{class:"jlbinding"},"BattMo.plot_output")],-1)),i[85]||(i[85]=e()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[87]||(i[87]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BattMo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">plot_output</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output, output_variables; layout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Plot specified variables from simulation output using GLMakie.</p><p><strong>Arguments</strong></p><ul><li><p><code>output</code>: NamedTuple with simulation data.</p></li><li><p><code>output_variables</code>: Vector of variable names or groups of names to plot.</p></li><li><p><code>layout</code>: Optional (nrows, ncols) tuple to set subplot arrangement.</p></li></ul><p><strong>Notes</strong></p><ul><li><p>Requires GLMakie to be imported beforehand.</p></li><li><p>Automatically chooses layout if none provided.</p></li><li><p>Supports line plots (1D data) and contour plots (2D data).</p></li><li><p>Displays units and metadata in labels.</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GLMakie</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BattMo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">plot_output</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Voltage vs Time&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;NegativeElectrodeActiveMaterialSurfaceConcentration vs Time at Position index 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;NegativeElectrodeActiveMaterialSurfaceConcentration vs Time at Position index 10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">				&quot;ElectrolytePotential vs time and Position&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				]; layout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div>`,8)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[86]||(i[86]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/plotting/1d.jl#L34-L59",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",w,[s("summary",null,[i[88]||(i[88]=s("a",{id:"BattMo.plot_interactive_3d",href:"#BattMo.plot_interactive_3d"},[s("span",{class:"jlbinding"},"BattMo.plot_interactive_3d")],-1)),i[89]||(i[89]=e()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[91]||(i[91]=s("p",null,"plot_interactive_3d",-1)),i[92]||(i[92]=s("p",null,"Launch an interactive plot for visualizing simulation results of 3D geometries.",-1)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[90]||(i[90]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/plotting/3d.jl#L3-L7",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",q,[s("summary",null,[i[93]||(i[93]=s("a",{id:"BattMo.plot_cell_curves",href:"#BattMo.plot_cell_curves"},[s("span",{class:"jlbinding"},"BattMo.plot_cell_curves")],-1)),i[94]||(i[94]=e()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[96]||(i[96]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BattMo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">plot_cell_curves_impl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cell_parameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CellParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; new_window </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Plot functional parameter curves from a cell parameter set.</p><p>Scans <code>cell_parameters</code> for known functional properties (e.g., open-circuit potential, diffusion coefficient, reaction rate constant, conductivity) and plots their dependence on concentration and temperature.</p><p><strong>Arguments</strong></p><ul><li><p><code>cell_parameters::CellParameters</code>: Cell parameter object containing model data.</p></li><li><p><code>new_window::Bool = true</code>: If <code>true</code>, display the figure in a new window.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>fig::Figure</code>: A Makie figure with subplots of all detected functional parameter curves.</li></ul><p><strong>Notes</strong></p><ul><li><p>Only functional (non-constant) parameters are plotted.</p></li><li><p>The layout and axes are auto-scaled based on the number and type of parameters.</p></li></ul>',9)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[95]||(i[95]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/plotting/1d.jl#L8-L26",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i[151]||(i[151]=s("h2",{id:"Tools-that-print-extra-information",tabindex:"-1"},[e("Tools that print extra information "),s("a",{class:"header-anchor",href:"#Tools-that-print-extra-information","aria-label":'Permalink to "Tools that print extra information {#Tools-that-print-extra-information}"'},"​")],-1)),s("details",I,[s("summary",null,[i[97]||(i[97]=s("a",{id:"BattMo.print_info-Tuple{S} where S<:ParameterSet",href:"#BattMo.print_info-Tuple{S} where S<:ParameterSet"},[s("span",{class:"jlbinding"},"BattMo.print_info")],-1)),i[98]||(i[98]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[100]||(i[100]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ParameterSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Print a formatted overview of all parameters in a <code>ParameterSet</code>.</p><p>Lists parameter names, units, types, and values in a structured table, using available metadata for labeling and formatting.</p><p><strong>Arguments</strong></p><ul><li><code>input::ParameterSet</code>: Parameter set (e.g., cell, cycling, solver, or simulation settings).</li></ul><p><strong>Notes</strong></p><ul><li><p>Recursively traverses nested dictionaries within the parameter set.</p></li><li><p>Default parameters are marked as <code>(default)</code>.</p></li><li><p>Used for quick inspection of model inputs in BattMo.</p></li></ul>',7)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[99]||(i[99]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/tools/print_info.jl#L3-L18",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",O,[s("summary",null,[i[101]||(i[101]=s("a",{id:"BattMo.print_info-Tuple{SimulationOutput}",href:"#BattMo.print_info-Tuple{SimulationOutput}"},[s("span",{class:"jlbinding"},"BattMo.print_info")],-1)),i[102]||(i[102]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[104]||(i[104]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SimulationOutput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Print a structured overview of all available output variables in a simulation result.</p><p>Displays variable names, units, and shapes grouped by category (time series, metrics, and states), based on BattMo output metadata.</p><p><strong>Arguments</strong></p><ul><li><code>output::SimulationOutput</code>: Simulation results object to inspect.</li></ul><p><strong>Notes</strong></p><ul><li><p>Only variables present in the simulation output are listed.</p></li><li><p>Groups variables by case for easier browsing.</p></li><li><p>Intended for quick post-simulation inspection within BattMo.</p></li></ul>',7)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[103]||(i[103]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/tools/print_info.jl#L25-L40",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",L,[s("summary",null,[i[105]||(i[105]=s("a",{id:"BattMo.print_info-Tuple{String}",href:"#BattMo.print_info-Tuple{String}"},[s("span",{class:"jlbinding"},"BattMo.print_info")],-1)),i[106]||(i[106]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[108]||(i[108]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(from_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; view</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing, String}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Nothing</span></span></code></pre></div><p>Prints information on specific parameters, settings, and output variables. Searches available metadata categories for entries matching <code>from_name</code> and prints detailed information about each match. The output is formatted with emojis, section headers, and aligned labels for readability.</p><p><strong>Arguments</strong></p><ul><li><code>from_name::String</code>: the (partial or full) name to search for in the metadata.</li></ul><p><strong>Keywords</strong></p><ul><li><code>view::Union{Nothing, String}=nothing</code>: restricts the search to a specific category. Must be one of: <code>&quot;CellParameters&quot;</code>, <code>&quot;CyclingProtocol&quot;</code>, <code>&quot;ModelSettings&quot;</code>, <code>&quot;SimulationSettings&quot;</code>, <code>&quot;SolverSettings&quot;</code>, or <code>&quot;OutputVariable&quot;</code>. If <code>nothing</code> (default), all categories are searched.</li></ul><p><strong>Returns</strong></p><ul><li><code>Nothing</code>: this function only prints formatted results to the console.</li></ul><p><strong>Throws</strong></p><ul><li><code>ErrorException</code>: if <code>view</code> is provided but not one of the allowed categories.</li></ul><p><strong>Notes</strong></p><ul><li><p>Each matching entry prints metadata fields such as:</p><ul><li><p><code>Name</code>, <code>Category</code>, <code>Keyword argument</code>, <code>Description</code>, <code>Type</code>, <code>Shape</code>, <code>Unit</code></p></li><li><p><code>Options</code>, <code>Minimum value</code>, <code>Maximum value</code>, <code>Documentation</code>, <code>Ontology link</code></p></li></ul></li><li><p>Output formatting adjusts automatically depending on the detected output format.</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Badge type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;info&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;source-link&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;source&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/tools/print_info.jl#L77-L111&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_blank&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;noreferrer&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Badge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">details</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">details class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;jldocstring custom-block&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">summary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;BattMo.print_info-Tuple{AbstractCalibration}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#BattMo.print_info-Tuple{AbstractCalibration}&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">span class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jlbinding&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BattMo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">print_info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">span</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Badge type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;info&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jlObjectType jlMethod&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Method&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /&gt;&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">summary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\`\`julia</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">print_info(calibration::AbstractCalibration) -&gt; Nothing</span></span></code></pre></div><p>Prints an overview of the calibration parameters and their current values for a given <code>calibration</code> object. This is a convenience wrapper around <a href="/BattMo.jl/dev/manuals/api_documentation/highlevel#BattMo.print_calibration_overview"><code>print_calibration_overview</code></a>, which performs the actual display.</p><p><strong>Arguments</strong></p><ul><li><code>calibration::AbstractCalibration</code>: the calibration object containing parameter targets and (optionally) optimized values.</li></ul><p><strong>Returns</strong></p><ul><li><code>Nothing</code>: this function only prints formatted output to the console.</li></ul><p><strong>Notes</strong></p><ul><li><p>Delegates to <a href="/BattMo.jl/dev/manuals/api_documentation/highlevel#BattMo.print_calibration_overview"><code>print_calibration_overview</code></a> to display:</p><ul><li><p>Parameter names</p></li><li><p>Initial values</p></li><li><p>Bounds</p></li><li><p>Optimized values (if available)</p></li><li><p>Percentage change from initial values</p></li></ul></li><li><p>If the calibration has not been performed, only initial values and bounds are shown.</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Badge type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;info&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;source-link&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;source&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/tools/print_info.jl#L46-L72&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_blank&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;noreferrer&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Badge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">details</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">details class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;jldocstring custom-block&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">summary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;BattMo.quick_cell_check-Tuple{CellParameters}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#BattMo.quick_cell_check-Tuple{CellParameters}&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">span class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jlbinding&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BattMo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">quick_cell_check</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">span</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Badge type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;info&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jlObjectType jlMethod&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Method&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /&gt;&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">summary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\`\`julia</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">quick_cell_check(cell::CellParameters; cell_2::Union{Nothing, CellParameters} = nothing)</span></span></code></pre></div><p>Print key performance indicators (KPIs) and basic properties for one or two battery cells.</p><p>Compares input and derived quantities (mass, capacity, N:P ratio, loadings, etc.) between cells and displays results in a formatted, color-coded table.</p><p><strong>Arguments</strong></p><ul><li><p><code>cell::CellParameters</code>: Primary cell to inspect.</p></li><li><p><code>cell_2::Union{Nothing, CellParameters} = nothing</code>: Optional second cell for comparison.</p></li></ul><p><strong>Notes</strong></p><ul><li><p>Blue values indicate input parameters, green indicate calculated values.</p></li><li><p>Displays deltas when comparing two cells.</p></li><li><p>Intended for quick text-based validation and comparison within BattMo.</p></li></ul>`,29)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[107]||(i[107]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/input/printer.jl#L100-L116",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",N,[s("summary",null,[i[109]||(i[109]=s("a",{id:"BattMo.print_submodels-Tuple{}",href:"#BattMo.print_submodels-Tuple{}"},[s("span",{class:"jlbinding"},"BattMo.print_submodels")],-1)),i[110]||(i[110]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[112]||(i[112]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print_submodels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Prints an overview of configurable submodels available within the simulation framework, including valid options and documentation links.</p><p><strong>Behavior</strong></p><ul><li><p>Retrieves model configuration metadata using <code>get_model_settings_meta_data()</code>.</p></li><li><p>Filters the metadata to include only entries marked with <code>&quot;is_sub_model&quot; =&gt; true</code>.</p></li><li><p>Extracts:</p><ul><li><p>The submodel parameter name</p></li><li><p>The list of valid options (or <code>&quot;N/A&quot;</code> if not specified)</p></li><li><p>A documentation link (if available)</p></li></ul></li><li><p>Prints a well-formatted table summarizing each submodel, with aligned columns:</p><ul><li><p><strong>Parameter</strong> – the submodel key name (e.g., <code>&quot;electrolyte_transport&quot;</code>)</p></li><li><p><strong>Options</strong> – available values that can be assigned to the parameter</p></li><li><p><strong>Documentation</strong> – a URL (formatted with <code>format_link</code>) or <code>-</code> if missing</p></li></ul></li></ul><p><strong>Output</strong></p><ul><li><p>Directly prints a structured table to the console.</p></li><li><p>Uses consistent width formatting for readability.</p></li><li><p>Includes Unicode symbols and horizontal lines for visual structure.</p></li></ul><p><strong>Use Case</strong></p><ul><li><p>Helps users understand which submodels are configurable and how to select between them.</p></li><li><p>Useful for exploring model flexibility and guiding configuration in notebooks, scripts, or GUIs.</p></li></ul>',8)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[111]||(i[111]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/input/printer.jl#L521-L546",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",V,[s("summary",null,[i[113]||(i[113]=s("a",{id:"BattMo.print_default_input_sets-Tuple{}",href:"#BattMo.print_default_input_sets-Tuple{}"},[s("span",{class:"jlbinding"},"BattMo.print_default_input_sets")],-1)),i[114]||(i[114]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[116]||(i[116]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print_default_input_sets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Prints a structured overview of all available default input sets for battery simulations, including high-level summaries and detailed metadata for each set.</p><p><strong>Behavior</strong></p><ul><li><p>Scans the <code>defaults/</code> directory (located relative to the script file) for available JSON input sets organized by category (subfolders).</p></li><li><p>Prints:</p><ol><li><p>📋 A concise aligned list of categories and their corresponding default set names.</p></li><li><p>📖 A detailed description for each default set, including:</p></li></ol></li></ul><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cell name and case</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Source (with optional formatted link)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Supported models</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Set description</span></span></code></pre></div><ul><li>Metadata is extracted using helper functions such as <code>read_meta_data</code> and <code>read_source_from_meta_data</code>, which pull structured data (e.g., description, model support) from the JSON files.</li></ul><p><strong>Output</strong></p><ul><li><p>Prints directly to the console using <code>println</code>, formatted for clarity with Unicode symbols and horizontal dividers.</p></li><li><p>Output includes:</p><ul><li><p>Folder/category names (e.g., <code>CellParameters&quot;</code>)</p></li><li><p>Available JSON set names (e.g., <code>&quot;chen_2020&quot;</code>)</p></li><li><p>Descriptions and intended use cases for each set</p></li></ul></li></ul><p><strong>Use Case</strong></p><ul><li><p>Helps users quickly understand what predefined inputs are available for simulation without needing to inspect the files manually.</p></li><li><p>Useful for educational purposes, rapid prototyping, or configuration setup.</p></li></ul><p><strong>Notes</strong></p><ul><li><p>Only <code>.json</code> files are considered valid input sets.</p></li><li><p>Requires that the <code>defaults/</code> directory structure and expected metadata fields are present and correctly formatted.</p></li></ul>`,12)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[115]||(i[115]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/input/printer.jl#L305-L336",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i[152]||(i[152]=s("h2",{id:"Tools-that-write-files",tabindex:"-1"},[e("Tools that write files "),s("a",{class:"header-anchor",href:"#Tools-that-write-files","aria-label":'Permalink to "Tools that write files {#Tools-that-write-files}"'},"​")],-1)),s("details",R,[s("summary",null,[i[117]||(i[117]=s("a",{id:"BattMo.generate_default_parameter_files",href:"#BattMo.generate_default_parameter_files"},[s("span",{class:"jlbinding"},"BattMo.generate_default_parameter_files")],-1)),i[118]||(i[118]=e()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[120]||(i[120]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">generate_default_parameter_files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">generate_default_parameter_files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/some/path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, force </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">generate_default_parameter_files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/some/path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my_json_files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Make a local copy of the default JSON parameter files in the specified directory. The default name is &quot;battmo_json&quot;. If the directory already exists, an error is thrown unless <code>force</code> is set to true. The default path is the current working directory.</p>`,2)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[119]||(i[119]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/input/defaults.jl#L49-L57",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",z,[s("summary",null,[i[121]||(i[121]=s("a",{id:"BattMo.write_to_json_file",href:"#BattMo.write_to_json_file"},[s("span",{class:"jlbinding"},"BattMo.write_to_json_file")],-1)),i[122]||(i[122]=e()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[124]||(i[124]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">write_to_json_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Writes the contents of <code>data</code> to a JSON file at the specified <code>file_path</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>file_path::String</code>: The path (including filename) where the JSON file will be saved.</p></li><li><p><code>data::AbstractInput</code>: An object containing the data to serialize. The function accesses the <code>.all</code> field/property of <code>data</code> to retrieve the content to write.</p></li></ul><p><strong>Behavior</strong></p><ul><li><p>Opens the file at <code>file_path</code> in write mode.</p></li><li><p>Serializes the <code>data.all</code> object to JSON format with indentation of 4 spaces.</p></li><li><p>Writes the JSON data to the file.</p></li><li><p>Prints a success message upon completion.</p></li><li><p>If an error occurs (e.g., file system permission issues), catches the exception and prints an error message.</p></li></ul><p><strong>Returns</strong></p><ul><li>Nothing (side-effect only: writes file and prints status messages).</li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">write_to_json_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;output/config.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sim_input)</span></span></code></pre></div>',10)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[123]||(i[123]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/input/writer.jl#L4-L27",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i[153]||(i[153]=s("h2",{id:"Voltage-Calibration",tabindex:"-1"},[e("Voltage Calibration "),s("a",{class:"header-anchor",href:"#Voltage-Calibration","aria-label":'Permalink to "Voltage Calibration {#Voltage-Calibration}"'},"​")],-1)),s("details",J,[s("summary",null,[i[125]||(i[125]=s("a",{id:"BattMo.AbstractCalibration",href:"#BattMo.AbstractCalibration"},[s("span",{class:"jlbinding"},"BattMo.AbstractCalibration")],-1)),i[126]||(i[126]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[128]||(i[128]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AbstractCalibration</span></span></code></pre></div><p>Abstract type for calibration objects.</p>',2)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[127]||(i[127]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/calibration/calibration.jl#L6-L10",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",U,[s("summary",null,[i[129]||(i[129]=s("a",{id:"BattMo.VoltageCalibration",href:"#BattMo.VoltageCalibration"},[s("span",{class:"jlbinding"},"BattMo.VoltageCalibration")],-1)),i[130]||(i[130]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[132]||(i[132]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mutable struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> VoltageCalibration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractCalibration</span></span></code></pre></div><p>Represents a voltage calibration problem for a battery simulation.</p><p><strong>Fields</strong></p><ul><li><p><code>t::Any</code> Time vector corresponding to the calibration voltage data points.</p></li><li><p><code>v::Any</code> Voltage vector containing calibration voltage data.</p></li><li><p><code>sim::Any</code> A deep copy of the <code>Simulation</code> object used for calibration, allowing reuse of the original simulation.</p></li><li><p><code>parameter_targets::Any</code> Dictionary mapping parameter name vectors (keys) to tuples <code>(initial_value, lower_bound, upper_bound)</code> specifying calibration targets.</p></li><li><p><code>calibrated_cell_parameters::Any</code> Holds the cell parameters obtained after calibration is solved.</p></li><li><p><code>history::Any</code> Stores the optimization process history, including iteration details and convergence info.</p></li></ul><p><strong>Constructors</strong></p><ul><li><p><code>VoltageCalibration(t, v, sim)</code> Creates a new calibration object from time vector <code>t</code>, voltage vector <code>v</code>, and a simulation <code>sim</code>. Ensures time vector <code>t</code> is strictly increasing and matches length of <code>v</code>.</p></li><li><p><code>VoltageCalibration(t_and_v, sim; normalize_time = false)</code> Alternative constructor that takes a 2D array <code>t_and_v</code> where the first column is time and the second is voltage. Optionally normalizes the time vector to start at zero if <code>normalize_time</code> is true.</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sim </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Simulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">calib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> VoltageCalibration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t, v, sim)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or with combined data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">calib2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> VoltageCalibration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data, sim, normalize_time</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,8)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[131]||(i[131]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/calibration/calibration.jl#L14-L61",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",G,[s("summary",null,[i[133]||(i[133]=s("a",{id:"BattMo.solve-Tuple{AbstractCalibration}",href:"#BattMo.solve-Tuple{AbstractCalibration}"},[s("span",{class:"jlbinding"},"BattMo.solve")],-1)),i[134]||(i[134]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[136]||(i[136]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">solve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractCalibration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (calibrated_parameters, history)</span></span></code></pre></div><p>Solve the calibration problem by optimizing model parameters to fit target data.</p><p><strong>Description</strong></p><p>Performs parameter calibration for a model using the LBFGS optimizer (or a user-supplied optimizer). The method minimizes an objective function derived from the discrepancy between simulation output and calibration targets.</p><p><strong>Keyword Arguments</strong></p><ul><li><p><code>grad_tol</code>: Gradient norm stopping tolerance (default: <code>1e-6</code>)</p></li><li><p><code>obj_change_tol</code>: Objective change tolerance (default: <code>1e-6</code>)</p></li><li><p><code>opt_fun</code>: Optional custom optimization function</p></li><li><p><code>backend_arg</code>: Tuple controlling sparsity and preprocessing (default settings shown in source)</p></li><li><p>Other keyword arguments are passed to the optimizer.</p></li></ul><p><strong>Returns</strong></p><p>A tuple <code>(calibrated_cell_parameters, optimization_history)</code>.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">calibrated_params, history </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc; grad_tol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e-7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>',10)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[135]||(i[135]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/calibration/calibration.jl#L233-L255",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",H,[s("summary",null,[i[137]||(i[137]=s("a",{id:"BattMo.free_calibration_parameter!",href:"#BattMo.free_calibration_parameter!"},[s("span",{class:"jlbinding"},"BattMo.free_calibration_parameter!")],-1)),i[138]||(i[138]=e()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[140]||(i[140]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">free_calibration_parameter!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractCalibration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, parameter_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{String}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		initial_value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> missing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		lower_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> missing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		upper_bound </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> missing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	)</span></span></code></pre></div><p>Set a calibration parameter to be free for optimization. The parameter is specified by <code>parameter_name</code>, which is a vector of strings representing the nested structure of the parameter in the simulation&#39;s cell parameters.</p><p><strong>Notes</strong></p><ul><li><p>The <code>initial_value</code> is optional and can be set to <code>missing</code> if not provided.</p></li><li><p>The <code>lower_bound</code> and <code>upper_bound</code> must be provided and cannot be <code>missing</code>.</p></li></ul>`,4)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[139]||(i[139]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/calibration/calibration.jl#L99-L113",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",K,[s("summary",null,[i[141]||(i[141]=s("a",{id:"BattMo.print_calibration_overview",href:"#BattMo.print_calibration_overview"},[s("span",{class:"jlbinding"},"BattMo.print_calibration_overview")],-1)),i[142]||(i[142]=e()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[144]||(i[144]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print_calibration_overview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractCalibration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Print an overview of the calibration parameters and their current values. If the calibration has been performed, the table will also include the optimized values and the percentage change from the initial values.</p>',2)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[143]||(i[143]=[s("a",{href:"https://github.com/BattMoTeam/BattMo.jl/blob/557340b21155da17d7d24e9c55a8932101506bf2/src/calibration/calibration.jl#L150-L156",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const ti=o(h,[["render",$]]);export{si as __pageData,ti as default};
